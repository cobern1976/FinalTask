#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой ГрупповоеИзменениеОбъектов.

// Возвращает реквизиты объекта, которые не рекомендуется редактировать
// с помощью обработки группового изменения реквизитов.
//
// Возвращаемое значение:
//  Массив - список имен реквизитов объекта.
Функция РеквизитыНеРедактируемыеВГрупповойОбработке() Экспорт
	
	НеРедактируемыеРеквизиты = Новый Массив;
	
	НеРедактируемыеРеквизиты.Добавить("СкрытыйРеквизит");
	
	Возврат НеРедактируемыеРеквизиты;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой ЗагрузкаДанныхИзФайла.

// Устанавливает параметры загрузки данных из файла.
//
// Параметры:
//     Параметры - Структура - Список параметров. Поля: 
//         * Заголовок - Строка - Заголовок окна.
//         * ОбязательныеКолонки - Массив - Список имен колонок обязательных для заполнения.
//         * ТипДанныхКолонки - Соответствие, Ключ - Имя колонки, Значение - Описание типа данных.
//
Процедура ОпределитьПараметрыЗагрузкиДанныхИзФайла(Параметры) Экспорт
	
	Параметры.Заголовок = НСтр("ru = 'Демо: Номенклатура'");
	
	ОписаниеТипаШтрихкод =  Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(13));
	ОписаниеТипаНаименование =  Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(100));
	Параметры.ТипДанныхКолонки.Вставить("Штрихкод", ОписаниеТипаШтрихкод);
	Параметры.ТипДанныхКолонки.Вставить("Наименование", ОписаниеТипаНаименование);

КонецПроцедуры

// Производит сопоставление загружаемых данных с данными в ИБ.
//
// Параметры:
//   ЗагружаемыеДанные - ТаблицаЗначений - таблица значений с загружаемыми данными:
//     * СопоставленныйОбъект - СправочникСсылка - Ссылка на сопоставленный объект. Заполняется внутри процедуры
//     * <другие колонки>     - Произвольный - Состав колонок соответствует макету "ЗагрузкаИзФайла".
//
Процедура СопоставитьЗагружаемыеДанныеИзФайла(ЗагружаемыеДанные) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДанныеДляСопоставления.Штрихкод,
	               |	ДанныеДляСопоставления.Наименование,
	               |	ДанныеДляСопоставления.Идентификатор
	               |ПОМЕСТИТЬ ДанныеДляСопоставления
	               |ИЗ
	               |	&ДанныеДляСопоставления КАК ДанныеДляСопоставления
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ДанныеДляСопоставления.Штрихкод,
	               |	ДанныеДляСопоставления.Наименование,
	               |	ДанныеДляСопоставления.Идентификатор
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	_ДемоНоменклатура.Ссылка,
	               |	_ДемоНоменклатура.Штрихкод,
	               |	ДанныеДляСопоставления.Идентификатор
	               |ПОМЕСТИТЬ СопоставленнаяНоменклатураПоШтрихкоду
	               |ИЗ
	               |	ДанныеДляСопоставления КАК ДанныеДляСопоставления
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник._ДемоНоменклатура КАК _ДемоНоменклатура
	               |		ПО (_ДемоНоменклатура.Штрихкод = ДанныеДляСопоставления.Штрихкод)
	               |ГДЕ
	               |	НЕ _ДемоНоменклатура.Ссылка ЕСТЬ NULL 
	               |	И _ДемоНоменклатура.Штрихкод <> """"
	               |	И _ДемоНоменклатура.ПометкаУдаления = ЛОЖЬ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДанныеДляСопоставления.Наименование,
	               |	ДанныеДляСопоставления.Идентификатор
	               |ПОМЕСТИТЬ ДанныеДляСопоставленияПоНаименованию
	               |ИЗ
	               |	ДанныеДляСопоставления КАК ДанныеДляСопоставления
	               |		ЛЕВОЕ СОЕДИНЕНИЕ СопоставленнаяНоменклатураПоШтрихкоду КАК СопоставленнаяНоменклатураПоШтрихкоду
	               |		ПО ДанныеДляСопоставления.Штрихкод = СопоставленнаяНоменклатураПоШтрихкоду.Штрихкод
	               |ГДЕ
	               |	СопоставленнаяНоменклатураПоШтрихкоду.Штрихкод ЕСТЬ NULL 
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	_ДемоНоменклатура.Ссылка КАК Номенклатура,
	               |	ДанныеДляСопоставленияПоНаименованию.Идентификатор
	               |ИЗ
	               |	ДанныеДляСопоставленияПоНаименованию КАК ДанныеДляСопоставленияПоНаименованию
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник._ДемоНоменклатура КАК _ДемоНоменклатура
	               |		ПО (_ДемоНоменклатура.Наименование = ДанныеДляСопоставленияПоНаименованию.Наименование)
	               |ГДЕ
	               |	НЕ _ДемоНоменклатура.Ссылка ЕСТЬ NULL 
	               |	И _ДемоНоменклатура.ПометкаУдаления = ЛОЖЬ
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	СопоставленнаяНоменклатураПоШтрихкоду.Ссылка,
	               |	СопоставленнаяНоменклатураПоШтрихкоду.Идентификатор
	               |ИЗ
	               |	СопоставленнаяНоменклатураПоШтрихкоду КАК СопоставленнаяНоменклатураПоШтрихкоду";
	
	Запрос.УстановитьПараметр("ДанныеДляСопоставления", ЗагружаемыеДанные);

	РезультатЗапроса = Запрос.Выполнить().Выбрать();

	Пока РезультатЗапроса.Следующий() Цикл
		Фильтр = Новый Структура("Идентификатор", РезультатЗапроса.Идентификатор);
		Строки = ЗагружаемыеДанные.НайтиСтроки(Фильтр);
		Для Каждого Строка Из Строки Цикл
			Строка.ОбъектСопоставления = РезультатЗапроса.Номенклатура;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Загрузка данных из файла.
//
// Параметры:
//   ЗагружаемыеДанные - ТаблицаЗначений с колонками:
//     * СопоставленныйОбъект         - СправочникСсылка - Ссылка на сопоставленный объект.
//     * РезультатСопоставленияСтроки - Строка       - Статус загрузки, возможны варианты: Создан, Обновлен, Пропущен.
//     * ОписаниеОшибки               - Строка       - расшифровка ошибки загрузки данных.
//     * Идентификатор                - Число        - Уникальный номер строки 
//     * <другие колонки>             - Произвольный - Строки за загружаемого файла в соответствие с макетом.
// ПараметрыЗагрузки                  - Структура    - Параметры загрузки.
//     * СоздаватьНовые               - Булево       - Требуется ли создавать новые элементы справочника.
//     * ОбновлятьСуществующие        - Булево       - Требуется ли обновлять элементы справочника.
// Отказ                              - Булево       - Отмена загрузки.
Процедура ЗагрузитьИзФайла(ЗагружаемыеДанные, ПараметрыЗагрузки, Отказ) Экспорт
	
	Для каждого СтрокаТаблицы Из ЗагружаемыеДанные Цикл 
		НачатьТранзакцию();
		Попытка
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ОбъектСопоставления) Тогда 
				Если ПараметрыЗагрузки.СоздаватьНовые Тогда 
					ЭлементСправочника = Справочники._ДемоНоменклатура.СоздатьЭлемент();
					СтрокаТаблицы.ОбъектСопоставления = ЭлементСправочника;
					СтрокаТаблицы.РезультатСопоставленияСтроки = "Создан";
				Иначе
					СтрокаТаблицы.РезультатСопоставленияСтроки = "Пропущен";
					Продолжить;
				КонецЕсли;
			Иначе
				Если НЕ ПараметрыЗагрузки.ОбновлятьСуществующие Тогда 
					СтрокаТаблицы.РезультатСопоставленияСтроки = "Пропущен";
					Продолжить;
				КонецЕсли;
				
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить("Справочник._ДемоНоменклатура");
				ЭлементБлокировки.УстановитьЗначение("Ссылка", СтрокаТаблицы.ОбъектСопоставления);
				
				ЭлементСправочника = СтрокаТаблицы.ОбъектСопоставления.ПолучитьОбъект();
				СтрокаТаблицы.РезультатСопоставленияСтроки = "Обновлен";
				Если ЭлементСправочника = Неопределено Тогда
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Номенклатура с артикулом %1 не существует.'"), СтрокаТаблицы.Артикул);
					ВызватьИсключение ТекстСообщения;
				КонецЕсли;
			КонецЕсли;
			
			ЭлементСправочника.Наименование = СтрокаТаблицы.Наименование;
			ЭлементСправочника.Штрихкод = СтрокаТаблицы.Штрихкод;
			Если ЗначениеЗаполнено(СтрокаТаблицы.Страна) Тогда
				ЭлементСправочника.СтранаПроисхождения = Справочники.СтраныМира.НайтиПоНаименованию(СтрокаТаблицы.Страна);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаТаблицы.Родитель) Тогда
				Родитель = Справочники._ДемоНоменклатура.НайтиПоНаименованию(СтрокаТаблицы.Родитель, Истина);
				Если Родитель = Неопределено ИЛИ НЕ Родитель.ЭтоГруппа ИЛИ Родитель.Пустая() Тогда
					Родитель = Справочники._ДемоНоменклатура.СоздатьГруппу();
					Родитель.Наименование = СтрокаТаблицы.Родитель;
					Родитель.Записать();
				КонецЕсли;
				ЭлементСправочника.Родитель = Родитель.Ссылка;
			КонецЕсли;
			
			ВидНоменклатуры = Справочники._ДемоВидыНоменклатуры.НайтиПоНаименованию(СтрокаТаблицы.ВидНоменклатуры, Истина);
			Если ВидНоменклатуры = Неопределено ИЛИ ВидНоменклатуры.Пустая() Тогда
				ВидНоменклатуры = Справочники._ДемоВидыНоменклатуры.СоздатьЭлемент();
				ВидНоменклатуры.Наименование = СтрокаТаблицы.ВидНоменклатуры;
				ВидНоменклатуры.Записать();
			КонецЕсли;
			
			ЭлементСправочника.ВидНоменклатуры = ВидНоменклатуры.Ссылка;
			Если ЭлементСправочника.ПроверитьЗаполнение() Тогда
				ЭлементСправочника.Записать();
				ЗафиксироватьТранзакцию();
			Иначе
				СтрокаТаблицы.РезультатСопоставленияСтроки = "Пропущен";
				СообщенияПользователю = ПолучитьСообщенияПользователю(Истина);
				Если СообщенияПользователю.Количество()>0 Тогда 
					текстСообщений = "";
					Для каждого СообщениеПользователю Из СообщенияПользователю Цикл
						текстСообщений  = текстСообщений + СообщениеПользователю.Текст + Символы.ПС;
					КонецЦикла;
					СтрокаТаблицы.ОписаниеОшибки = текстСообщений;
				КонецЕсли;
				ОтменитьТранзакцию();
			КонецЕсли;
		Исключение
			Причина = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			СтрокаТаблицы.РезультатСопоставленияСтроки = "Пропущен";
			СтрокаТаблицы.ОписаниеОшибки = НСтр("ru = 'Невозможна запись из-за некорректности данных'");
			ОтменитьТранзакцию();
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

// Производит сопоставление данных, загружаемых в табличную часть Аналоги,
// с данными в ИБ, и заполняет параметры АдресТаблицыСопоставления и СписокНеоднозначностей.
//
// Параметры:
//   АдресЗагружаемыхДанных    - Строка - Адрес временного хранилища с таблицей значений, в которой
//                                        находятся загруженные данные из файла. Состав колонок:
//     * Идентификатор - Число - Порядковый номер строки;
//     * остальные колонки соответствуют колонкам макета ЗагрузкаИзФайла.
//   АдресТаблицыСопоставления - Строка - Адрес временного хранилища с пустой таблицей значений,
//                                        являющейся копией табличной части документа, 
//                                        которую необходимо заполнить из таблицы АдресЗагружаемыхДанных.
//   СписокНеоднозначностей - ТаблицаЗначений - Список неоднозначных значений, для которых в ИБ имеется несколько
//                                              подходящих вариантов.
//     * Колонка       - Строка - Имя колонки, в которой была обнаружена неоднозначность;
//     * Идентификатор - Число  - Идентификатор строки, в которой была обнаружена неоднозначность.
//   ПолноеИмяТабличнойЧасти   - Строка - Полное имя табличной части, в которую загружаются данные.
//   ДополнительныеПараметры   - ЛюбойТип - Любые дополнительные сведения.
//
Процедура СопоставитьЗагружаемыеДанные(АдресЗагружаемыхДанных, АдресТаблицыСопоставления, СписокНеоднозначностей, ПолноеИмяТабличнойЧасти, ДополнительныеПараметры) Экспорт
	
	Аналоги =  ПолучитьИзВременногоХранилища(АдресТаблицыСопоставления);
	ЗагружаемыеДанные = ПолучитьИзВременногоХранилища(АдресЗагружаемыхДанных);
	
	// совместимость номенклатуры
	СовместимостьНоменклатуры = Новый Соответствие;
	Для каждого Значение Из Метаданные.Перечисления._ДемоСовместимостьНоменклатуры.ЗначенияПеречисления Цикл
		Имя = ВРег(Значение.Представление());
		СовместимостьНоменклатуры.Вставить(Имя, Перечисления._ДемоСовместимостьНоменклатуры[Значение.Имя]);
	КонецЦикла;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ВидНоменклатуры = ДополнительныеПараметры.ВидНоменклатуры;
	
	Для каждого СтрокаТаблицы Из ЗагружаемыеДанные Цикл
		Аналог = Аналоги.Добавить();
		Аналог.Идентификатор = СтрокаТаблицы.Идентификатор;
		Аналог.Аналог = Справочники._ДемоНоменклатура.НайтиПоНаименованию(СтрокаТаблицы.Наименование);
		Аналог.Совместимость = СовместимостьНоменклатуры.Получить(ВРег(СтрокаТаблицы.Совместимость));
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(Аналоги, АдресТаблицыСопоставления);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой ЗапретРедактированияРеквизитовОбъектов.

// Возвращает описание блокируемых реквизитов.
//
// Возвращаемое значение:
//  Массив - содержит строки в формате ИмяРеквизита[;ИмяЭлементаФормы,...]
//           где ИмяРеквизита - имя реквизита объекта, ИмяЭлементаФормы - имя элемента формы,
//           связанного с реквизитом.
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	БлокируемыеРеквизиты = Новый Массив;
	
	БлокируемыеРеквизиты.Добавить("Код");
	БлокируемыеРеквизиты.Добавить("ВидНоменклатуры");
	
	Возврат БлокируемыеРеквизиты;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой ПоискИУдалениеДублей.

// Анализирует пары ссылок справочника на возможность замены одной на другую 
// во всех местах использования с прикладной точки зрения.
// 
// Параметры:
//     ПарыЗамен - Соответствие - Ключ - что будет заменено, значение - на что будет заменено.
//     Параметры - Структура    - Необязательный набор флагов, описывающих действие с заменяемыми 
//                                элементами. Содержит необязательные реквизиты:
//                     * СпособУдаления - Строка, может принимать значения:
//                         "Непосредственно" - Если после замены ссылка нигде не используется,
//                                             то она будет удалена непосредственно
//                         "Пометка"         - Если после замены ссылка не используется, то 
//                                             она будет помечена на удаление.
//                         Любые другие значения говорят о том, что заменяемая ссылка не будет изменена.
//
// Возвращаемое значение:
//     Соответствие - Ключ - исходная ссылка, значение - строка - описание, почему замена недопустима.
//                    Если все замены допустимы, то возвращается пустое соответствие;
//
// Проверки на запрет замены групп и ссылок разных типов производятся автоматически при начале замены.
//
Функция ВозможностьЗаменыЭлементов(Знач ПарыЗамен, Знач Параметры = Неопределено) Экспорт
	
	СпособУдаления = "";
	Если Параметры <> Неопределено Тогда
		Параметры.Свойство("СпособУдаления", СпособУдаления);
	КонецЕсли;
	
	// В качестве примера: запрещено заменять номенклатуру с кодом 000000001.
	ЗапрещеннаяСсылка = Справочники._ДемоНоменклатура.НайтиПоКоду("000000001");
	
	Результат = Новый Соответствие;
	Для Каждого КлючЗначение Из ПарыЗамен Цикл
		ТекущаяСсылка = КлючЗначение.Ключ;
		ЦелеваяСсылка = КлючЗначение.Значение;
		
		Если ТекущаяСсылка = ЦелеваяСсылка Тогда
			Продолжить;
			
		ИначеЕсли ТекущаяСсылка = ЗапрещеннаяСсылка Тогда
			Ошибка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Номенклатуру ""%1"" с кодом 000000001 заменять запрещено.'"),
				ТекущаяСсылка);
			Результат.Вставить(ТекущаяСсылка, Ошибка);
			Продолжить;
		КонецЕсли;
		
		// Разрешаем заменять одну ссылку номенклатуры на другую только если они одного вида 
		// или вид номенклатуры не заполнен.
		ТекущийВид = ТекущаяСсылка.ВидНоменклатуры;
		ЦелевойВид = ЦелеваяСсылка.ВидНоменклатуры;
		МожноЗаменять = ТекущийВид.Пустая() Или ЦелевойВид.Пустая() Или ТекущийВид = ЦелевойВид;
			
		Если МожноЗаменять Тогда
			// Проверим по флагам, возможно объект нельзя будет удалять, так как он нам важен.
			Если СпособУдаления = "Непосредственно" И ТекущаяСсылка = ЗапрещеннаяСсылка Тогда
				Ошибка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Номенклатуру ""%1"" с кодом 000000001 запрещено удалять безвозвратно.'"), 
					ТекущаяСсылка);
				Результат.Вставить(ТекущаяСсылка, Ошибка);
			КонецЕсли;
		Иначе
			Ошибка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'У элемента ""%1"" вид номенклатуры ""%2"", а у ""%3"" - ""%4""'"),
				ТекущаяСсылка, ТекущийВид, ЦелеваяСсылка, ЦелевойВид);
			Результат.Вставить(ТекущаяСсылка, Ошибка);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// Вызывается для определения прикладных параметров поиска дублей.
//
// Параметры:
//
//     ПараметрыПоиска - Структура - Предлагаемые параметры поиска. Содержит поля:
//
//         *  ПравилаПоиска - ТаблицаЗначений - Предлагаемые правила сравнения для объектов.
//                            Может быть изменена для установки новых вариантов. Содержит колонки.
//               ** Реквизит - Строка - Имя реквизита для сравнения.
//               ** Правило  - Строка - Правило сравнения: "Равно" - сравнение по равенству, "Подобно" -подобие строк,
//                                     "" - пустая строка - не сравнивать.
//
//         * КомпоновщикОтбора - КомпоновщикНастроекКомпоновкиДанных - Инициализированный компоновщик для 
//                               предварительного отбора. Может быть изменен, например, для 
//                               усиления отборов.
// 
//         * ОграниченияСравнения - Массив - Предназначен для заполнения описания прикладных правил-ограничений.
//                                  Должен быть дополнен структурами с полями:
//               ** Представление      - Строка - Описание правила-ограничения для пользователя.
//               ** ДополнительныеПоля - Строка - Список дополнительных реквизитов запятую, необходимых для
//                                                дополнительного анализа.
// 
//         * КоличествоЭлементовДляСравнения - Число - Количество кандидатов в дубли, передаваемых одним вызовом
//                                                     обработчику.
//
//     ДополнительныеПараметры - Произвольный - Значение, переданное при вызове программного интерфейса
//                                              ОбщегоНазначения.НайтиДублиЭлементов.
//                               При вызове пользователем из обработки "ПоискИЗаменаДублей" равно Неопределено.
// 
Процедура ПараметрыПоискаДублей(ПараметрыПоиска, ДополнительныеПараметры = Неопределено) Экспорт
	
	ОграниченияСравнения = ПараметрыПоиска.ОграниченияСравнения;
	ПравилаПоиска        = ПараметрыПоиска.ПравилаПоиска;
	КомпоновщикОтбора    = ПараметрыПоиска.КомпоновщикОтбора;
	
	// Общие ограничения для всех случаев.
	
	// Общие ограничения
	Ограничение = Новый Структура;
	Ограничение.Вставить("Представление",      НСтр("ru = 'Вид номенклатуры у сравниваемых элементов одинаков.'"));
	Ограничение.Вставить("ДополнительныеПоля", "ВидНоменклатуры");
	ОграниченияСравнения.Добавить(Ограничение);
	
	// Размер таблицы для передачи в обработчик.
	ПараметрыПоиска.КоличествоЭлементовДляСравнения = 100;
	
	// Анализ режима работы - варианта вызова.
	Если ДополнительныеПараметры = Неопределено Тогда
		// Внешний вызов из обработки, больше ничего делать не надо, но можно отредактировать параметры пользователя.
		Возврат;
	КонецЕсли;
	
	// Вызов из программного интерфейса.
	ЭлементыОтбора = КомпоновщикОтбора.Настройки.Отбор.Элементы;
	ЭлементыОтбора.Очистить();
	ПравилаПоиска.Очистить();
	
	Если ДополнительныеПараметры.Режим = "КонтрольПоНаименованию" Тогда
		// Ищем среди неудаленных таких же по равенству Наименования и ВидаНоменклатуры.
		
		// Фиксируем условия отбора
		Отбор = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Отбор.Использование  = Истина;
		Отбор.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ПометкаУдаления");
		Отбор.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		Отбор.ПравоеЗначение = Ложь;
		
		СтрокаПравила = ПравилаПоиска.Добавить();
		СтрокаПравила.Реквизит = "Наименование";
		СтрокаПравила.Правило  = "Равно";
		
		СтрокаПравила = ПравилаПоиска.Добавить();
		СтрокаПравила.Реквизит = "ВидНоменклатуры";
		СтрокаПравила.Правило  = "Равно";
		
	ИначеЕсли ДополнительныеПараметры.Режим = "ПоискПохожихПоНаименованию" Тогда
		// Ищем все похожие по наименованию.
		
		СтрокаПравила = ПравилаПоиска.Добавить();
		СтрокаПравила.Реквизит = "Наименование";
		СтрокаПравила.Правило  = "Подобно";
	КонецЕсли;
	
КонецПроцедуры

// Вызывается для определения дублей по прикладным правилам.
//
// Параметры:
//
//     ТаблицаКандидатов - ТаблицаЗначений - Описывает кандидатов в дубли. Содержит колонки:
//         - Ссылка1  - ЛюбаяСсылка - Ссылка на элемент первого кандидата.
//         - Ссылка2  - ЛюбаяСсылка - Ссылка на элемент второго кандидата.
//         - ЭтоДубли - Булево      - Флаг того, что кандидаты действительно являются дублями. По умолчанию содержит 
//                                    значение Ложь, может быть изменено на Истина, если кандидаты - действительно
//                                    дубли.
//         - Поля1    - Структура   - Содержит поля Код, Наименование и дополнительные поля первого кандидата,
//         указанные в ПараметрыПоискаДублей.
//         - Поля2    - Структура   - Содержит поля Код, Наименование и дополнительные поля второго кандидата,
//         указанные в ПараметрыПоискаДублей.
//
//     ДополнительныеПараметры - Произвольный - Значение, переданное при вызове программного интерфейса
//                                              ОбщегоНазначения.НайтиДублиЭлементов.
//                               При вызове пользователем из обработки "ПоискИЗаменаДублей" равно Неопределено.
//
Процедура ПриПоискеДублей(ТаблицаКандидатов, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДополнительныеПараметры = Неопределено Тогда
		
		// Общие проверки
		Для Каждого Вариант Из ТаблицаКандидатов Цикл
			Если Вариант.Поля1.ВидНоменклатуры = Вариант.Поля2.ВидНоменклатуры Тогда
				Вариант.ЭтоДубли = Истина;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ДополнительныеПараметры.Режим = "КонтрольПоНаименованию" Тогда
		
		// Исключим себя самого
		Для Каждого Вариант Из ТаблицаКандидатов Цикл
			Если Вариант.Ссылка1 <> ДополнительныеПараметры.Ссылка
				Или Вариант.Ссылка2 <> ДополнительныеПараметры.Ссылка Тогда
				Вариант.ЭтоДубли = Истина;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ДополнительныеПараметры.Режим = "ПоискПохожихПоНаименованию" Тогда
		
		// Общие проверки
		Для Каждого Вариант Из ТаблицаКандидатов Цикл
			Если Вариант.Поля1.ВидНоменклатуры = Вариант.Поля2.ВидНоменклатуры Тогда
				Вариант.ЭтоДубли = Истина;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли