&НаКлиенте
Перем ИтерацияПроверки;

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		ТекстЗаголовкаФормы = НСтр("ru = 'Выгрузить данные в локальную версию'");
		ТекстСообщения      = НСтр("ru = 'Данные из сервиса будут выгружены в файл для последующей их загрузки
			|и использования в локальной версии.'");
	Иначе
		ТекстЗаголовкаФормы = НСтр("ru = 'Выгрузить данные для перехода в сервис'");
		ТекстСообщения      = НСтр("ru = 'Данные из локальной версии будут выгружены в файл для последующей их загрузки
			|и использования в режиме сервиса.'");
	КонецЕсли;
	Элементы.ДекорацияПредупреждение.Заголовок = ТекстСообщения;
	Заголовок = ТекстЗаголовкаФормы;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ОткрытьФормуАктивныхПользователей(Команда)
	
	ОткрытьФорму("Обработка.АктивныеПользователи.Форма.АктивныеПользователи");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ВыгрузитьДанные(Команда)
	
	ЗапуститьВыгрузкуДанныхНаСервере();
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.Выгрузка;
	
	ИтерацияПроверки = 1;
	
	ПодключитьОбработчикОжидания("ПроверитьГотовностьВыгрузки", 15);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте 
Процедура СохранитьФайлВыгрузки()
	
	ИмяФайла = "data_dump.zip";
	
	ПараметрыДиалога = Новый Структура;
	ПараметрыДиалога.Вставить("Фильтр", "ZIP архив(*.zip)|*.zip");
	ПараметрыДиалога.Вставить("Расширение", "zip");
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяФайла", ИмяФайла);
	ДополнительныеПараметры.Вставить("ПараметрыДиалога", ПараметрыДиалога);
	
	ОповещениеПодключенияРасширенияРаботыСФайлами = Новый ОписаниеОповещения(
		"ВыбратьИСохранитьФайлПослеПодключенияРасширенияРаботыСФайлами",
		ЭтотОбъект, ДополнительныеПараметры);
	
	НачатьПодключениеРасширенияРаботыСФайлами(ОповещениеПодключенияРасширенияРаботыСФайлами);
	
КонецПроцедуры

&НаКлиенте 
Процедура ВыбратьИСохранитьФайлПослеПодключенияРасширенияРаботыСФайлами(Подключено, ДополнительныеПараметры) Экспорт
	
	Если Подключено Тогда
		
		ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		ЗаполнитьЗначенияСвойств(ДиалогВыбораФайла, ДополнительныеПараметры.ПараметрыДиалога);
		
		ПолучаемыеФайлы = Новый Массив;
		ПолучаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(ДополнительныеПараметры.ИмяФайла, АдресХранилища));
		
		ОписаниеОповещенияПолученияФайлов = Новый ОписаниеОповещения(
			"ВыбратьИСохранитьФайл",
			ЭтотОбъект, ДополнительныеПараметры);
		
		НачатьПолучениеФайлов(ОписаниеОповещенияПолученияФайлов, ПолучаемыеФайлы, ДиалогВыбораФайла, Истина);
		
	Иначе
		
		ПолучитьФайл(АдресХранилища, ДополнительныеПараметры.ИмяФайла, Истина);
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте 
Процедура ВыбратьИСохранитьФайл(ПолученныеФайлы, ДополнительныеПараметры) Экспорт
	
	Закрыть();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СнятьМонопольныйРежимПослеВыгрузки()
	
	УстановитьМонопольныйРежим(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьГотовностьВыгрузки()
	
	Попытка
		ГотовностьВыгрузки = ВыгрузкаГотова();
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ОтключитьОбработчикОжидания("ПроверитьГотовностьВыгрузки");
		СнятьМонопольныйРежимПослеВыгрузки();
		
		ОбработатьОшибку(
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		
	КонецПопытки;
	
	Если ГотовностьВыгрузки Тогда
		СнятьМонопольныйРежимПослеВыгрузки();
		ОтключитьОбработчикОжидания("ПроверитьГотовностьВыгрузки");
		СохранитьФайлВыгрузки();
	Иначе
		
		ИтерацияПроверки = ИтерацияПроверки + 1;
		
		Если ИтерацияПроверки = 3 Тогда
			ОтключитьОбработчикОжидания("ПроверитьГотовностьВыгрузки");
			ПодключитьОбработчикОжидания("ПроверитьГотовностьВыгрузки", 30);
		ИначеЕсли ИтерацияПроверки = 4 Тогда
			ОтключитьОбработчикОжидания("ПроверитьГотовностьВыгрузки");
			ПодключитьОбработчикОжидания("ПроверитьГотовностьВыгрузки", 60);
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиЗаданиеПоИдентификатору(Идентификатор)
	
	Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(Идентификатор);
	
	Возврат Задание;
	
КонецФункции

&НаСервере
Функция ВыгрузкаГотова()
	
	Задание = НайтиЗаданиеПоИдентификатору(ИдентификаторЗадания);
	
	Если Задание <> Неопределено
		И Задание.Состояние = СостояниеФоновогоЗадания.Активно Тогда
		
		Возврат Ложь;
	КонецЕсли;
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.Предупреждение;
	
	Если Задание = Неопределено Тогда
		ВызватьИсключение(НСтр("ru = 'При подготовке выгрузки произошла ошибка - не найдено задание подготавливающее выгрузку.'"));
	КонецЕсли;
	
	Если Задание.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда
		ОшибкаЗадания = Задание.ИнформацияОбОшибке;
		Если ОшибкаЗадания <> Неопределено Тогда
			ВызватьИсключение(ПодробноеПредставлениеОшибки(ОшибкаЗадания));
		Иначе
			ВызватьИсключение(НСтр("ru = 'При подготовке выгрузки произошла ошибка - задание подготавливающее выгрузку завершилось с неизвестной ошибкой.'"));
		КонецЕсли;
	ИначеЕсли Задание.Состояние = СостояниеФоновогоЗадания.Отменено Тогда
		ВызватьИсключение(НСтр("ru = 'При подготовке выгрузки произошла ошибка - задание подготавливающее выгрузку было отменено администратором.'"));
	Иначе
		ИдентификаторЗадания = Неопределено;
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗапуститьВыгрузкуДанныхНаСервере()
	
	УстановитьМонопольныйРежим(Истина);
	
	Попытка
		
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		
		ПараметрыЗадания = Новый Массив;
		ПараметрыЗадания.Добавить(АдресХранилища);
		
		Задание = ФоновыеЗадания.Выполнить("ВыгрузкаЗагрузкаОбластейДанных.ВыгрузитьТекущуюОбластьДанныхВоВременноеХранилище", 
			ПараметрыЗадания,
			,
			НСтр("ru = 'Подготовка выгрузки области данных'"));
			
		ИдентификаторЗадания = Задание.УникальныйИдентификатор;
		
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		УстановитьМонопольныйРежим(Ложь);
		ОбработатьОшибку(
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОтменитьЗаданиеПодготовки(ИдентификаторЗадания);
		СнятьМонопольныйРежимПослеВыгрузки();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОтменитьЗаданиеПодготовки(Знач ИдентификаторЗадания)
	
	Задание = НайтиЗаданиеПоИдентификатору(ИдентификаторЗадания);
	Если Задание = Неопределено
		ИЛИ Задание.Состояние <> СостояниеФоновогоЗадания.Активно Тогда
		
		Возврат;
	КонецЕсли;
	
	Попытка
		Задание.Отменить();
	Исключение
		// Возможно задание как раз в этот момент закончилось и ошибки нет
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Отмена выполнения задания подготовки выгрузки области данных'", 
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбработатьОшибку(Знач КраткоеПредставление, Знач ПодробноеПредставление)
	
	ШаблонЗаписиЖР = НСтр("ru = 'При выгрузке данных произошла ошибка:
                           |
                           |-----------------------------------------
                           |%1
                           |-----------------------------------------'");
	ТекстЗаписиЖР = СтрШаблон(ШаблонЗаписиЖР, ПодробноеПредставление);
	
	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Выгрузка данных'"),
		УровеньЖурналаРегистрации.Ошибка,
		,
		,
		ТекстЗаписиЖР);
	
	ШаблонИсключения = НСтр("ru = 'При выгрузке данных произошла ошибка: %1.
                             |
                             |Расширенная информация для службы поддержки записана в журнал регистрации. Если Вам неизвестна причина ошибки - рекомендуется обратиться в службу технической поддержки, предоставив для расследования информационную базу и выгрузку журнала регистрации.'");
	
	ВызватьИсключение СтрШаблон(ШаблонИсключения, КраткоеПредставление);
	
КонецПроцедуры
