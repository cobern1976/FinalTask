#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов


////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Печать.

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Счет на оплату
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СчетЗаказ";
	КомандаПечати.Представление = НСтр("ru = 'Счет на оплату'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Не Пользователи.РолиДоступны("_ДемоПечатьНепроведенныхДокументов");

	// Демо-пример ограничения доступности команд печати.
	Если Пользователи.РолиДоступны("_ДемоПечатьСчетаНаОплатуНаПринтер") Тогда
		// Счет на оплату (на принтер).
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор = "СчетЗаказ";
		КомандаПечати.Представление = НСтр("ru = 'Счет на оплату (на принтер)'");
		КомандаПечати.Картинка = БиблиотекаКартинок.ПечатьСразу;
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		КомандаПечати.СразуНаПринтер = Истина;
	КонецЕсли;
	
	Если НЕ ПользователиКлиентСервер.ЭтоСеансВнешнегоПользователя() Тогда
		// Комплект документов
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор = "СчетЗаказ,СчетЗаказ2,СчетЗаказ2,Обработка._ДемоПечатнаяФорма.ГарантийноеПисьмо,СчетЗаказ,СчетЗаказ,СчетЗаказ2";
		КомандаПечати.Представление = НСтр("ru = 'Комплект документов'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		КомандаПечати.ФиксированныйКомплект = Истина;
		КомандаПечати.ПереопределитьПользовательскиеНастройкиКоличества = Истина;
		КомандаПечати.Порядок = 75;
		
		// Комплект документов (на принтер).
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор = "СчетЗаказ,СчетЗаказ2,СчетЗаказ2,Обработка._ДемоПечатнаяФорма.ГарантийноеПисьмо,СчетЗаказ,СчетЗаказ,СчетЗаказ2";
		КомандаПечати.Представление = НСтр("ru = 'Комплект документов (на принтер)'");
		КомандаПечати.Картинка = БиблиотекаКартинок.ПечатьСразу;
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		КомандаПечати.ФиксированныйКомплект = Истина;
		КомандаПечати.ПереопределитьПользовательскиеНастройкиКоличества = Истина;
		КомандаПечати.СразуНаПринтер = Истина;
		КомандаПечати.Порядок = 75;
		
		// Настраиваемый комплект документов.
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор = "СчетЗаказ,СчетЗаказ2,СчетЗаказ2,Обработка._ДемоПечатнаяФорма.ГарантийноеПисьмо,СчетЗаказ,СчетЗаказ,СчетЗаказ2";
		КомандаПечати.Представление = НСтр("ru = 'Настраиваемый комплект документов'");
		КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка";
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Настраиваемый комплект'");
		КомандаПечати.ДополнитьКомплектВнешнимиПечатнымиФормами = Истина;
		КомандаПечати.Порядок = 75;
	КонецЕсли;
	
	// Счет на оплату в документ Adobe PDF.
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СчетЗаказ";
	КомандаПечати.Представление = НСтр("ru = 'Счет на оплату в документ Adobe PDF'");
	КомандаПечати.Картинка = БиблиотекаКартинок.ФорматPDF;
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.ФорматСохранения = ТипФайлаТабличногоДокумента.PDF;
	
	// Счет на оплату в Microsoft Word.
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СчетНаОплату(MSWord)";
	КомандаПечати.Представление = НСтр("ru = 'Счет на оплату в Microsoft Word'");
	КомандаПечати.Картинка = БиблиотекаКартинок.ФорматWord2007;
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.Обработчик = "_ДемоСтандартныеПодсистемыКлиент.ПечатьСчетовНаОплатуПокупателю";
	КомандаПечати.ТребуетсяРасширениеРаботыСФайлами = Истина;
	
	// Счет на оплату в OpenOffice.org Writer.
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СчетНаОплату(ODT)";
	КомандаПечати.Представление = НСтр("ru = 'Счет на оплату в OpenOffice.org Writer'");
	КомандаПечати.Картинка = БиблиотекаКартинок.ФорматOpenOfficeWriter;
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.Обработчик = "_ДемоСтандартныеПодсистемыКлиент.ПечатьСчетовНаОплатуПокупателю";
	КомандаПечати.ТребуетсяРасширениеРаботыСФайлами = Истина;
	
	// Квитанция на оплату с QR кодом.
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Квитанция";
	КомандаПечати.Представление = НСтр("ru = 'Квитанция (с QR кодом)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.ТребуетсяРасширениеРаботыСФайлами = Истина;
	КомандаПечати.Порядок = 85;
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр).
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной
//                                                            параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной
//                                            параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// печать счета на оплату
	ПечатнаяФорма = УправлениеПечатью.СведенияОПечатнойФорме(КоллекцияПечатныхФорм, "СчетЗаказ");
	Если ПечатнаяФорма <> Неопределено Тогда
		// имена файлов
		ИменаФайлов = Новый Соответствие;
		Шаблон = НСтр("ru = '[Организация]-[Контрагент] Счет №[Номер] от [Дата]'");
		ЗначенияРеквизитовДокументов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивОбъектов, "Организация,Контрагент,Номер,Дата,Ссылка");
		Для Каждого Ссылка Из МассивОбъектов Цикл
			ЗначенияРеквизитовДокумента = ЗначенияРеквизитовДокументов[Ссылка];
			ЗначенияРеквизитовДокумента.Дата = Формат(ЗначенияРеквизитовДокумента.Дата, "ДЛФ=D");
			ЗначенияРеквизитовДокумента.Номер = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ЗначенияРеквизитовДокумента.Номер);
			ИмяФайла = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(Шаблон, ЗначенияРеквизитовДокументов[Ссылка]);
			ИменаФайлов.Вставить(Ссылка, ИмяФайла);
		КонецЦикла;
		
		// описание печатной формы
		ПечатнаяФорма.ТабличныйДокумент = ПечатьСчетаЗаказа(МассивОбъектов, ОбъектыПечати, "СчетЗаказ");
		ПечатнаяФорма.СинонимМакета = НСтр("ru = 'Счет на оплату'");
		ПечатнаяФорма.ПолныйПутьКМакету = "Документ._ДемоСчетНаОплатуПокупателю.ПФ_MXL_СчетЗаказ";
		ПечатнаяФорма.ИмяФайлаПечатнойФормы = ИменаФайлов;
	КонецЕсли;
		
	// печать заказа покупателя
	НужноПечататьМакет = УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СчетЗаказ2");
	Если НужноПечататьМакет Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"СчетЗаказ2",
			НСтр("ru = 'Заказ покупателя'"),
			ПечатьСчетаЗаказа(МассивОбъектов, ОбъектыПечати, "СчетЗаказ2"),
			,
			"Документ._ДемоСчетНаОплатуПокупателю.ПФ_MXL_СчетЗаказ");
	КонецЕсли;
	
	// печать квитанции
	НужноПечататьМакет = УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Квитанция");
	Если НужноПечататьМакет Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"Квитанция",
			НСтр("ru = 'Квитанция (с QR кодом)'"),
			ПечатьКвитанции(МассивОбъектов),
			,
			"Документ._ДемоСчетНаОплатуПокупателю.ПФ_MXL_Квитанция");
	КонецЕсли;
	
	// Параметры отправки печатных форм по электронной почте.
	ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, МассивОбъектов, КоллекцияПечатныхФорм);
	
КонецПроцедуры

// Подготавливает данные объекта к выводу на печать.
// 
// Параметры:
//  МассивДокументов - Массив - ссылки на объекты, для которых запрашиваются данные для печати;
//  МассивИменМакетов - Массив - имена макетов, в которые подставляются данные для печати.
//
// Возвращаемое значение:
//  Соответствие:
//   * Ключ - ЛюбаяСсылка - ссылка на объект информационной базы;
//   * Значение - Структура: 
//       ** Ключ - Строка - имя макета,
//       ** Значение - Структура - данные объекта.
Функция ПолучитьДанныеПечати(Знач МассивДокументов, Знач МассивИменМакетов) Экспорт
	
	ДанныеПоВсемОбъектам = Новый Соответствие;
	
	Для Каждого ОбъектСсылка Из МассивДокументов Цикл
		ДанныеОбъектаПоМакетам = Новый Соответствие;
		Для Каждого ИмяМакета Из МассивИменМакетов Цикл
			ДанныеОбъектаПоМакетам.Вставить(ИмяМакета, ПолучитьДанныеОбъекта(ОбъектСсылка));
		КонецЦикла;
		ДанныеПоВсемОбъектам.Вставить(ОбъектСсылка, ДанныеОбъектаПоМакетам);
	КонецЦикла;
	
	ОписаниеОбластей = Новый Соответствие;
	ДвоичныеДанныеМакетов = Новый Соответствие;
	ТипыМакетов = Новый Соответствие;
	
	Для Каждого ИмяМакета Из МассивИменМакетов Цикл
		Если ИмяМакета = "СчетНаОплату(MSWord)" Тогда
			ДвоичныеДанныеМакетов.Вставить(ИмяМакета, 
				УправлениеПечатью.МакетПечатнойФормы("Документ._ДемоСчетНаОплатуПокупателю.ПФ_DOC_СчетНаОплату"));
			ТипыМакетов.Вставить(ИмяМакета, "DOC");
		ИначеЕсли ИмяМакета = "СчетНаОплату(ODT)" Тогда
			ДвоичныеДанныеМакетов.Вставить(ИмяМакета, УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет._ДемоПФ_ODT_СчетНаОплату"));
			ТипыМакетов.Вставить(ИмяМакета, "ODT");
		КонецЕсли;
		ОписаниеОбластей.Вставить(ИмяМакета, ПолучитьОписаниеОбластейМакетаОфисногоДокумента());
	КонецЦикла;
	
	Макеты = Новый Структура;
	Макеты.Вставить("ОписаниеОбластей", ОписаниеОбластей);
	Макеты.Вставить("ТипыМакетов", ТипыМакетов);
	Макеты.Вставить("ДвоичныеДанныеМакетов", ДвоичныеДанныеМакетов);
	
	Результат = Новый Структура;
	Результат.Вставить("Данные", ДанныеПоВсемОбъектам);
	Результат.Вставить("Макеты", Макеты);
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Интерфейс для вызова из дополнительной печатной формы.

// Процедура печати документа.
//
Функция ПечатьСчетаЗаказа(МассивОбъектов, ОбъектыПечати, ИмяМакета = "СчетЗаказ") Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СчетНаОплатуПокупателю.Ссылка КАК Ссылка,
	|	СчетНаОплатуПокупателю.Номер КАК Номер,
	|	СчетНаОплатуПокупателю.Дата КАК Дата,
	|	СчетНаОплатуПокупателю.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	СчетНаОплатуПокупателю.ВалютаДокумента КАК ВалютаДокумента,
	|	СчетНаОплатуПокупателю.Дата КАК ДатаДокумента,
	|	СчетНаОплатуПокупателю.БанковскийСчет КАК БанковскийСчет,
	|	СчетНаОплатуПокупателю.Контрагент КАК Контрагент,
	|	СчетНаОплатуПокупателю.Организация КАК Организация,
	|	СчетНаОплатуПокупателю.Товары.(
	|		Номенклатура.Наименование КАК Товар,
	|		Цена КАК Цена,
	|		Сумма КАК Сумма,
	|		СуммаНДС КАК СуммаНДС,
	|		Количество КАК Количество,
	|		НомерСтроки,
	|		Номенклатура
	|	),
	|	ВЫБОР
	|		КОГДА БанковскийСчетКонтрагента.РучноеИзменениеРеквизитовБанка
	|			ТОГДА БанковскийСчетКонтрагента.БИКБанка
	|		ИНАЧЕ КлассификаторБанковРФ.Код
	|	КОНЕЦ КАК БИКБанк,
	|	ВЫБОР
	|		КОГДА БанковскийСчетКонтрагента.РучноеИзменениеРеквизитовБанка
	|			ТОГДА БанковскийСчетКонтрагента.НаименованиеБанка
	|		ИНАЧЕ КлассификаторБанковРФ.Наименование
	|	КОНЕЦ КАК НаименованиеБанка,
	|	ВЫБОР
	|		КОГДА БанковскийСчетКонтрагента.РучноеИзменениеРеквизитовБанка
	|			ТОГДА БанковскийСчетКонтрагента.КоррСчетБанка
	|		ИНАЧЕ КлассификаторБанковРФ.КоррСчет
	|	КОНЕЦ КАК КоррСчетБанка,
	|	ВЫБОР
	|		КОГДА БанковскийСчетКонтрагента.РучноеИзменениеРеквизитовБанка
	|			ТОГДА БанковскийСчетКонтрагента.ГородБанка
	|		ИНАЧЕ КлассификаторБанковРФ.Город
	|	КОНЕЦ КАК ГородБанка,
	|	ВЫБОР
	|		КОГДА БанковскийСчетКонтрагента.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА БанковскийСчетКонтрагента.БИКБанкаДляРасчетов
	|		ИНАЧЕ КлассификаторБанковКорреспондентовРФ.Код
	|	КОНЕЦ КАК БИКБанкаДляРасчетов,
	|	ВЫБОР
	|		КОГДА БанковскийСчетКонтрагента.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА БанковскийСчетКонтрагента.НаименованиеБанкаДляРасчетов
	|		ИНАЧЕ КлассификаторБанковКорреспондентовРФ.Наименование
	|	КОНЕЦ КАК НаименованиеБанкаДляРасчетов,
	|	ВЫБОР
	|		КОГДА БанковскийСчетКонтрагента.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА БанковскийСчетКонтрагента.КоррСчетБанкаДляРасчетов
	|		ИНАЧЕ КлассификаторБанковКорреспондентовРФ.КоррСчет
	|	КОНЕЦ КАК КоррСчетБанкаДляРасчетов,
	|	ВЫБОР
	|		КОГДА БанковскийСчетКонтрагента.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА БанковскийСчетКонтрагента.ГородБанкаДляРасчетов
	|		ИНАЧЕ КлассификаторБанковКорреспондентовРФ.Город
	|	КОНЕЦ КАК ГородБанкаДляРасчетов,
	|	СчетНаОплатуПокупателю.Контрагент.НаименованиеПолное КАК ПолучательНаименованиеПолное,
	|	БанковскийСчетКонтрагента.НомерСчета КАК ПолучательНомерСчета
	|ИЗ
	|	Документ._ДемоСчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторБанковРФ КАК КлассификаторБанковРФ
	|		ПО СчетНаОплатуПокупателю.БанковскийСчет.Банк = КлассификаторБанковРФ.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторБанковРФ КАК КлассификаторБанковКорреспондентовРФ
	|		ПО СчетНаОплатуПокупателю.БанковскийСчет.БанкДляРасчетов = КлассификаторБанковКорреспондентовРФ.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник._ДемоБанковскиеСчета КАК БанковскийСчетКонтрагента
	|		ПО СчетНаОплатуПокупателю.БанковскийСчет = БанковскийСчетКонтрагента.Ссылка
	|ГДЕ
	|	СчетНаОплатуПокупателю.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетНаОплатуПокупателю.МоментВремени";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Шапка = Запрос.Выполнить().Выбрать();
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "СчетНаОплату_СчетЗаказ";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ._ДемоСчетНаОплатуПокупателю.ПФ_MXL_СчетЗаказ");
	
	Пока Шапка.Следующий() Цикл
		
		КонтактнаяИнформация = КонтактнаяИнформацияДляСчета(Шапка.Организация, Шапка.Дата);
		
		Если ТабличныйДокумент.ВысотаТаблицы > 0 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ДанныеПечати = Новый Структура;
		
		ДанныеПечати.Вставить("ИНН", "0000000000");
		ДанныеПечати.Вставить("КПП", "000000000");
		
		Если ПустаяСтрока(Шапка.БИКБанкаДляРасчетов) Тогда
			ДанныеПечати.Вставить("БанкПолучателяПредставление", СокрЛП(Шапка.НаименованиеБанка) + " " + СокрЛП(Шапка.ГородБанка));
			ДанныеПечати.Вставить("ПредставлениеПоставщика", СокрЛП(Шапка.ПолучательНаименованиеПолное));
			ДанныеПечати.Вставить("БИКБанкаПолучателя", СокрЛП(Шапка.БИКБанк));
			ДанныеПечати.Вставить("СчетБанкаПолучателяПредставление", СокрЛП(Шапка.КоррСчетБанка));
			ДанныеПечати.Вставить("СчетПолучателяПредставление", СокрЛП(Шапка.ПолучательНомерСчета));
		Иначе
			ДанныеПечати.Вставить("БанкПолучателяПредставление", СокрЛП(Шапка.НаименованиеБанкаДляРасчетов) + " " 
			+ СокрЛП(Шапка.ГородБанкаДляРасчетов));
			ДанныеПечати.Вставить("ПредставлениеПоставщика", 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 р/с %2 в %3'"),
			СокрЛП(Шапка.ПолучательНаименованиеПолное),
			СокрЛП(Шапка.ПолучательНомерСчета),
			СокрЛП(Шапка.ГородБанка)));
			ДанныеПечати.Вставить("БИКБанкаПолучателя", СокрЛП(Шапка.БИКБанкаДляРасчетов));
			ДанныеПечати.Вставить("СчетБанкаПолучателяПредставление", СокрЛП(Шапка.КоррСчетБанкаДляРасчетов));
			ДанныеПечати.Вставить("СчетПолучателяПредставление", СокрЛП(Шапка.КоррСчетБанка));
		КонецЕсли;	
		
		ТекстЗаголовка = СформироватьЗаголовокДокумента(
		Шапка, ?(ИмяМакета = "СчетЗаказ", 
		НСтр("ru = 'Демо: Счет на оплату'"),
		НСтр("ru = 'Демо: Заказ покупателя'")));
		ДанныеПечати.Вставить("ТекстЗаголовка", ТекстЗаголовка);
		ДанныеПечати.Вставить("Поставщик", Строка(Шапка.Организация) + " " + КонтактнаяИнформация.ЮридическийАдрес);
		ДанныеПечати.Вставить("ПредставлениеПоставщика", Строка(Шапка.Организация) + " " + КонтактнаяИнформация.ЮридическийАдрес);
		ДанныеПечати.Вставить("Получатель", Шапка.Контрагент );
		ДанныеПечати.Вставить("ПредставлениеПолучателя", Шапка.Контрагент );
		
		ТаблицаТовары = Шапка.Товары.Выгрузить();
		ДанныеПечати.Вставить("Всего", ТаблицаТовары.Итог("Сумма"));
		ДанныеПечати.Вставить("ВсегоНДС", ТаблицаТовары.Итог("СуммаНДС"));
		
		ДанныеПечати.Вставить("ИтоговаяСумма", ДанныеПечати.Всего + ?(Шапка.СуммаВключаетНДС, 0, ДанныеПечати.ВсегоНДС));
		ДанныеПечати.Вставить("СуммаПрописью", ЧислоПрописью(ДанныеПечати.ИтоговаяСумма, , 
		Шапка.ВалютаДокумента.ПараметрыПрописиНаРусском));
		ДанныеПечати.Вставить("ИтоговаяСтрока", 
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Всего наименований %1, на сумму %2'"),
		Формат(ТаблицаТовары.Количество(), "ЧН=0; ЧГ=0"),
		ДанныеПечати.СуммаПрописью));
		ДанныеПечати.Вставить("НДС", ?(Шапка.СуммаВключаетНДС, НСтр("ru = 'В том числе НДС:'"), НСтр("ru = 'Сумма НДС:'")));
		
		ДанныеПечати.Вставить("ФИОРуководителя", НСтр("ru = 'Иванов'"));
		ДанныеПечати.Вставить("ФИОБухгалтера",   НСтр("ru = 'Петрова'"));
		
		МассивОбластейМакета = Новый Массив;
		
		Если ИмяМакета = "СчетЗаказ" Тогда
			МассивОбластейМакета.Добавить("ЗаголовокСчета");
		КонецЕсли;
		МассивОбластейМакета.Добавить("Заголовок");
		МассивОбластейМакета.Добавить("Поставщик");
		МассивОбластейМакета.Добавить("Покупатель");
		МассивОбластейМакета.Добавить("ШапкаТаблицы");
		МассивОбластейМакета.Добавить("Строка");
		МассивОбластейМакета.Добавить("Итого");
		МассивОбластейМакета.Добавить("ИтогоНДС");
		МассивОбластейМакета.Добавить("СуммаПрописью");
		МассивОбластейМакета.Добавить("ПодвалСчета");
		
		Для Каждого ИмяОбласти Из МассивОбластейМакета Цикл
			ОбластьМакета = Макет.ПолучитьОбласть(ИмяОбласти);
			Если ИмяОбласти <> "Строка" Тогда
				ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, ДанныеПечати);
				ТабличныйДокумент.Вывести(ОбластьМакета);
			Иначе
				Для Каждого СтрокаТаблицы Из ТаблицаТовары Цикл
					ОбластьМакета.Параметры.Заполнить(СтрокаТаблицы);
					ТабличныйДокумент.Вывести(ОбластьМакета);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Для демонстрации обращения к внешней печатной форме.
Функция ПечатьГарантийногоПисьма(МассивОбъектов, ОбъектыПечати) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	_ДемоСчетНаОплатуПокупателю.Ссылка КАК Ссылка,
	|	_ДемоСчетНаОплатуПокупателю.Номер КАК Номер,
	|	_ДемоСчетНаОплатуПокупателю.Дата КАК Дата,
	|	_ДемоСчетНаОплатуПокупателю.Организация КАК Организация,
	|	_ДемоСчетНаОплатуПокупателю.Контрагент КАК Контрагент,
	|	_ДемоСчетНаОплатуПокупателю.СуммаОплаты КАК СуммаОплаты,
	|	ДОБАВИТЬКДАТЕ(_ДемоСчетНаОплатуПокупателю.Дата, ДЕНЬ, 5) КАК СрокОплаты
	|ИЗ
	|	Документ._ДемоСчетНаОплатуПокупателю КАК _ДемоСчетНаОплатуПокупателю
	|ГДЕ
	|	_ДемоСчетНаОплатуПокупателю.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	_ДемоСчетНаОплатуПокупателю.МоментВремени";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "СчетНаОплату_ГарантийноеПисьмо";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ._ДемоСчетНаОплатуПокупателю.ПФ_MXL_ГарантийноеПисьмо");
	
	Пока Выборка.Следующий() Цикл
		Если ТабличныйДокумент.ВысотаТаблицы > 0 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ОбластьМакета = Макет.ПолучитьОбласть("ТекстПисьма");
		ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, Выборка);
		ОбластьМакета.Параметры.СрокОплаты = Формат(Выборка.СрокОплаты, "ДЛФ=DD");
		ОбластьМакета.Параметры.ПредставлениеЗаявки = СформироватьЗаголовокДокумента(Выборка, "");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Выборка.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Для демонстрации печати QR-кода.
//
Функция ПечатьКвитанции(МассивОбъектов) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ДанныеДокументов = ДанныеДокументов(МассивОбъектов);
	
	МакетПП = УправлениеПечатью.МакетПечатнойФормы("Документ._ДемоСчетНаОплатуПокупателю.ПФ_MXL_Квитанция");

	ПервыйДокумент = Истина;
	Для Каждого РеквизитыПлатежа Из ДанныеДокументов Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		ОбластьПечатается = МакетПП.ПолучитьОбласть("Печатается");
		ЗаполнитьЗначенияСвойств(ОбластьПечатается.Параметры, РеквизитыПлатежа);
		ФИОПлательщика = РеквизитыПлатежа.ФамилияПлательщика + " " 
						+ РеквизитыПлатежа.ИмяПлательщика + " " 
						+ РеквизитыПлатежа.ОтчествоПлательщика;
		ОбластьПечатается.Параметры.ФИОПлательщика = ФИОПлательщика;
		Сумма = Окр(РеквизитыПлатежа.СуммаЧислом);
		ОбластьПечатается.Параметры.Сумма = Сумма;
		СуммаКопейки = (РеквизитыПлатежа.СуммаЧислом - Сумма) * 100;
		ОбластьПечатается.Параметры.СуммаКопейки = СуммаКопейки;
		
		QRСтрока = УправлениеПечатью.ФорматнаяСтрокаУФЭБС(РеквизитыПлатежа);
		
		Если ПустаяСтрока(QRСтрока) Тогда
			Продолжить;
		КонецЕсли;
		
			ДанныеQRКода = УправлениеПечатью.ДанныеQRКода(QRСтрока, 1, 120);
		
		Если НЕ ТипЗнч(ДанныеQRКода) = Тип("ДвоичныеДанные") Тогда
			
			Шаблон = НСтр("ru = 'Не удалось сформировать QR-код для документа %1.
					 |Технические подробности см. в журнале регистрации.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, РеквизитыПлатежа.Ссылка);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			Продолжить;
		КонецЕсли;
		
		КартинкаQRКода = Новый Картинка(ДанныеQRКода);
		
		ОбластьПечатается.Рисунки.QRКод.Картинка = КартинкаQRКода;
		
		ТабличныйДокумент.Вывести(ОбластьПечатается);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;

КонецФункции

// Добавляет сведения для отправки по электронной почте.
Процедура ЗаполнитьПараметрыОтправки(ПараметрыОтправки, МассивОбъектов, КоллекцияПечатныхФорм) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	_ДемоСчетНаОплатуПокупателю.Контрагент КАК Контрагент,
	|	_ДемоСчетНаОплатуПокупателю.Партнер КАК Партнер
	|ИЗ
	|	Документ._ДемоСчетНаОплатуПокупателю КАК _ДемоСчетНаОплатуПокупателю
	|ГДЕ
	|	_ДемоСчетНаОплатуПокупателю.Ссылка В(&МассивОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	_ДемоСчетНаОплатуПокупателю.Контрагент,
	|	_ДемоСчетНаОплатуПокупателю.Партнер";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	СведенияОПокупателе = Неопределено;
	Если РезультатЗапроса.Количество() = 1 Тогда
		СведенияОПокупателе = РезультатЗапроса[0];
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	_ДемоСчетНаОплатуПокупателю.Номер,
	|	_ДемоСчетНаОплатуПокупателю.Дата,
	|	_ДемоСчетНаОплатуПокупателю.Ссылка
	|ИЗ
	|	Документ._ДемоСчетНаОплатуПокупателю КАК _ДемоСчетНаОплатуПокупателю
	|ГДЕ
	|	_ДемоСчетНаОплатуПокупателю.Ссылка В(&МассивОбъектов)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	ВыборкаОбъектов = Запрос.Выполнить().Выбрать();
	
	Если КоллекцияПечатныхФорм.Количество() = 1 Тогда
		ПараметрыОтправки.Тема = КоллекцияПечатныхФорм[0].СинонимМакета;
		ПараметрыОтправки.Текст = НСтр("ru = 'Файл во вложении.'");
	Иначе 
		ПараметрыОтправки.Тема = НСтр("ru = 'Документы'");
		ПараметрыОтправки.Текст = НСтр("ru = 'Файлы во вложении.'");
	КонецЕсли;
	
	ПараметрыОтправки.Текст = ПараметрыОтправки.Текст + Символы.ПС;
	Для Каждого ПечатнаяФорма Из КоллекцияПечатныхФорм Цикл
		Пока ВыборкаОбъектов.Следующий() Цикл
			ПараметрыОтправки.Текст = ПараметрыОтправки.Текст + Символы.ПС + СформироватьЗаголовокДокумента(ВыборкаОбъектов, НазваниеДокумента(ПечатнаяФорма.ИмяМакета));
		КонецЦикла;
	КонецЦикла;
	
	// Получатель заполняется только в случае, если он один для всех документов.
	Если СведенияОПокупателе <> Неопределено Тогда
		ОбъектыКонтактнойИнформации = Новый Массив;
		ОбъектыКонтактнойИнформации.Добавить(СведенияОПокупателе.Партнер);
		ОбъектыКонтактнойИнформации.Добавить(СведенияОПокупателе.Контрагент);
		
		ТипыКонтактнойИнформации = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		АдресаПартнера = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(ОбъектыКонтактнойИнформации, ТипыКонтактнойИнформации);
		
		Получатели = Новый Массив;
		Для Каждого Адрес Из АдресаПартнера Цикл
			ПредставлениеАдреса = Адрес.Представление;
			Если Не ПустаяСтрока(ПредставлениеАдреса) Тогда
				ПредставлениеПолучателя = Строка(Адрес.Объект);
				Пояснение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Контактное лицо %1'"), Адрес.Объект);
				
				ОписаниеПолучателя = СоздатьОписаниеПолучателя();
				ОписаниеПолучателя.Адрес = ПредставлениеАдреса;
				ОписаниеПолучателя.Представление = ПредставлениеПолучателя;
				ОписаниеПолучателя.ИсточникКонтактнойИнформации = Адрес.Объект;
				ОписаниеПолучателя.ВидПочтовогоАдреса = Строка(Адрес.Вид);
				ОписаниеПолучателя.Пояснение = Пояснение;
				
				Получатели.Добавить(ОписаниеПолучателя);
			КонецЕсли;
			
		КонецЦикла;
		
		Если Получатели.Количество() = 0 Тогда
			ОписаниеПолучателя = СоздатьОписаниеПолучателя();
			ОписаниеПолучателя.ИсточникКонтактнойИнформации = СведенияОПокупателе.Партнер;
			Получатели.Добавить(ОписаниеПолучателя);
		КонецЕсли;
		
		ПараметрыОтправки.Получатель = Получатели;
	КонецЕсли;
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Загрузка из файла.

// Устанавливает параметры загрузки.
//
Процедура УстановитьПараметрыЗагрузкиИзФайлаВТЧ(Параметры) Экспорт
	
КонецПроцедуры

// Производит сопоставление данных, загружаемых в табличную часть ПолноеИмяТабличнойЧасти,
// с данными в ИБ, и заполняет параметры АдресТаблицыСопоставления и СписокНеоднозначностей.
//
// Параметры:
//   АдресЗагружаемыхДанных    - Строка - Адрес временного хранилища с таблицей значений, в которой
//                                        находятся загруженные данные из файла. Состав колонок:
//     * Идентификатор - Число - Порядковый номер строки;
//     * остальные колонки соответствуют колонкам макета ЗагрузкаИзФайла.
//   АдресТаблицыСопоставления - Строка - Адрес временного хранилища с пустой таблицей значений,
//                                        являющейся копией табличной части документа, 
//                                        которую необходимо заполнить из таблицы АдресЗагружаемыхДанных.
//   СписокНеоднозначностей - ТаблицаЗначений - Список неоднозначных значений, для которых в ИБ имеется несколько
//                                              подходящих вариантов.
//     * Колонка       - Строка - Имя колонки, в которой была обнаружена неоднозначность;
//     * Идентификатор - Число  - Идентификатор строки, в которой была обнаружена неоднозначность.
//   ПолноеИмяТабличнойЧасти   - Строка - Полное имя табличной части, в которую загружаются данные.
//   ДополнительныеПараметры   - ЛюбойТип - Любые дополнительные сведения.
//
Процедура СопоставитьЗагружаемыеДанные(АдресЗагружаемыхДанных, АдресТаблицыСопоставления, СписокНеоднозначностей, ПолноеИмяТабличнойЧасти, ДополнительныеПараметры) Экспорт
	
		
	Товары =  ПолучитьИзВременногоХранилища(АдресТаблицыСопоставления);
	ЗагружаемыеДанные = ПолучитьИзВременногоХранилища(АдресЗагружаемыхДанных);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеДляСопоставления.Штрихкод,
		|	ДанныеДляСопоставления.Номенклатура,
		|	ДанныеДляСопоставления.Идентификатор
		|ПОМЕСТИТЬ ДанныеДляСопоставления
		|ИЗ
		|	&ДанныеДляСопоставления КАК ДанныеДляСопоставления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	_ДемоНоменклатура.Ссылка,
		|	_ДемоНоменклатура.Штрихкод,
		|	ДанныеДляСопоставления.Идентификатор КАК Идентификатор
		|ПОМЕСТИТЬ СопоставленнаяНоменклатураПоШтрихкоду
		|ИЗ
		|	ДанныеДляСопоставления КАК ДанныеДляСопоставления
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник._ДемоНоменклатура КАК _ДемоНоменклатура
		|		ПО (_ДемоНоменклатура.Штрихкод ПОДОБНО ДанныеДляСопоставления.Штрихкод)
		|ГДЕ
		|	НЕ _ДемоНоменклатура.Ссылка ЕСТЬ NULL И НЕ ДанныеДляСопоставления.Штрихкод ПОДОБНО """"
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Идентификатор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеДляСопоставления.Номенклатура,
		|	ДанныеДляСопоставления.Идентификатор КАК Идентификатор
		|ПОМЕСТИТЬ ДанныеДляСопоставленияПоНаименованию
		|ИЗ
		|	ДанныеДляСопоставления КАК ДанныеДляСопоставления
		|		ЛЕВОЕ СОЕДИНЕНИЕ СопоставленнаяНоменклатураПоШтрихкоду КАК СопоставленнаяНоменклатураПоШтрихкоду
		|		ПО (ДанныеДляСопоставления.Штрихкод ПОДОБНО СопоставленнаяНоменклатураПоШтрихкоду.Штрихкод)
		|ГДЕ
		|	СопоставленнаяНоменклатураПоШтрихкоду.Штрихкод ЕСТЬ NULL 
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Идентификатор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(_ДемоНоменклатура.Ссылка) КАК Ссылка,
		|	ДанныеДляСопоставленияПоНаименованию.Идентификатор,
		|	КОЛИЧЕСТВО(ДанныеДляСопоставленияПоНаименованию.Идентификатор) КАК Количество
		|ИЗ
		|	ДанныеДляСопоставленияПоНаименованию КАК ДанныеДляСопоставленияПоНаименованию
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник._ДемоНоменклатура КАК _ДемоНоменклатура
		|		ПО (_ДемоНоменклатура.Наименование ПОДОБНО ДанныеДляСопоставленияПоНаименованию.Номенклатура)
		|ГДЕ
		|	НЕ _ДемоНоменклатура.Ссылка ЕСТЬ NULL 
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеДляСопоставленияПоНаименованию.Идентификатор
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	МАКСИМУМ(СопоставленнаяНоменклатураПоШтрихкоду.Ссылка),
		|	СопоставленнаяНоменклатураПоШтрихкоду.Идентификатор,
		|	КОЛИЧЕСТВО(СопоставленнаяНоменклатураПоШтрихкоду.Идентификатор) КАК Количество
		|ИЗ
		|	СопоставленнаяНоменклатураПоШтрихкоду КАК СопоставленнаяНоменклатураПоШтрихкоду
		|
		|СГРУППИРОВАТЬ ПО
		|	СопоставленнаяНоменклатураПоШтрихкоду.Идентификатор";

	Запрос.УстановитьПараметр("ДанныеДляСопоставления", ЗагружаемыеДанные);
	РезультатыЗапросов = Запрос.ВыполнитьПакет();
	
	ТаблицаНоменклатура = РезультатыЗапросов[3].Выгрузить();
	ФункциональнаяОпцияХарактеристика = ?(ЗагружаемыеДанные.Колонки.Найти("Характеристика") <> Неопределено, Истина, Ложь);
	Для каждого СтрокаТаблицы Из ЗагружаемыеДанные Цикл
		
		Товар = Товары.Добавить();
		Товар.Идентификатор = СтрокаТаблицы.Идентификатор;
		Товар.Количество = СтрокаТаблицы.Количество;
		Товар.Цена = СтрокаТаблицы.Цена;
		
		СтрокаНоменклатура = ТаблицаНоменклатура.Найти(СтрокаТаблицы.Идентификатор, "Идентификатор");
		Если СтрокаНоменклатура <> Неопределено Тогда 
			Если СтрокаНоменклатура.Количество = 1 Тогда 
				Товар.Номенклатура = СтрокаНоменклатура.Ссылка;
				Если ФункциональнаяОпцияХарактеристика Тогда
					Товар.Характеристика = Справочники._ДемоХарактеристики.НайтиПоНаименованию(СтрокаТаблицы.Характеристика, 
						Истина,, Товар.Номенклатура);
				КонецЕсли;
			ИначеЕсли СтрокаНоменклатура.Количество > 1 Тогда
				ЗаписьОНеоднозначности = СписокНеоднозначностей.Добавить();
				ЗаписьОНеоднозначности.Идентификатор = СтрокаТаблицы.Идентификатор; 
				ЗаписьОНеоднозначности.Колонка = "Номенклатура";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(Товары, АдресТаблицыСопоставления);
	
КонецПроцедуры

// Возвращает список подходящих объектов ИБ для неоднозначного значения ячейки.
// 
// Параметры:
//   ПолноеИмяТабличнойЧасти  - Строка - Полное имя табличной части, в которую загружаются данные.
//  ИмяКолонки                - Строка - Имя колонки, в который возникла неоднозначность.
//  СписокНеоднозначностей    - Массив - Массив для заполнения с неоднозначными данными.
//  ЗагружаемыеЗначенияСтрока - Строка - Загружаемые данные на основании которых возникла неоднозначность.
//  ДополнительныеПараметры   - ЛюбойТип - Любые дополнительные сведения.
//
Процедура ЗаполнитьСписокНеоднозначностей(ПолноеИмяТабличнойЧасти, СписокНеоднозначностей, ИмяКолонки, ЗагружаемыеЗначенияСтрока, ДополнительныеПараметры) Экспорт
	
	Если ИмяКолонки = "Номенклатура" Тогда

		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	_ДемоНоменклатура.Ссылка
			|ИЗ
			|	Справочник._ДемоНоменклатура КАК _ДемоНоменклатура
			|ГДЕ
			|	_ДемоНоменклатура.Наименование = &Наименование";
		Запрос.УстановитьПараметр("Наименование", ЗагружаемыеЗначенияСтрока.Номенклатура);
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СписокНеоднозначностей.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Текущие дела.

// Заполняет список текущих дел пользователя.
//
// Параметры:
//  ТекущиеДела - ТаблицаЗначений - таблица значений с колонками:
//    * Идентификатор - Строка - внутренний идентификатор дела, используемый механизмом "Текущие дела".
//    * ЕстьДела      - Булево - если Истина, дело выводится в списке текущих дел пользователя.
//    * Важное        - Булево - если Истина, дело будет выделено красным цветом.
//    * Представление - Строка - представление дела, выводимое пользователю.
//    * Количество    - Число  - количественный показатель дела, выводится в строке заголовка дела.
//    * Форма         - Строка - полный путь к форме, которую необходимо открыть при нажатии на гиперссылку
//                               дела на панели "Текущие дела".
//    * ПараметрыФормы- Структура - параметры, с которыми нужно открывать форму показателя.
//    * Владелец      - Строка, объект метаданных - строковый идентификатор дела, которое будет владельцем для текущего
//                      или объект метаданных подсистема.
//    * Подсказка     - Строка - текст подсказки.
//
Процедура ПриЗаполненииСпискаТекущихДел(ТекущиеДела) Экспорт
	
	Если Не ПравоДоступа("Чтение", Метаданные.Документы._ДемоСчетНаОплатуПокупателю) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПользователиКлиентСервер.ЭтоСеансВнешнегоПользователя() Тогда
		ТекущийВнешнийПользователь = ПользователиКлиентСервер.ТекущийВнешнийПользователь();
		ОбъектАвторизации = ТекущийВнешнийПользователь.ОбъектАвторизации;
		Если ТипЗнч(ОбъектАвторизации) = ТипЗнч(Справочники._ДемоКонтактныеЛицаПартнеров.ПустаяСсылка()) Тогда
			ОбъектАвторизации =ОбъектАвторизации.Владелец;
		КонецЕсли;
		КоличествоНеоплаченныхСчетовПокупателя = КоличествоНеоплаченныхСчетовПокупателя(ОбъектАвторизации);
		
		ИдентификаторЗаказыПокупателя = "СчетаНаОплатуНеОплачено";
		Дело = ТекущиеДела.Добавить();
		Дело.Идентификатор  = ИдентификаторЗаказыПокупателя;
		Дело.ЕстьДела       = КоличествоНеоплаченныхСчетовПокупателя > 0;
		Дело.Представление  = НСтр("ru = 'Неоплаченные счета'");
		Дело.Количество     = КоличествоНеоплаченныхСчетовПокупателя;
		Дело.Форма          = "Документ._ДемоСчетНаОплатуПокупателю.Форма.ФормаСписка";
		Дело.Владелец       = Метаданные.Подсистемы._ДемоОрганайзер;
		
	КонецЕсли;
КонецПроцедуры

Функция КоличествоНеоплаченныхСчетовПокупателя(Партнер)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(_ДемоСчетНаОплатуПокупателю.Ссылка) КАК Количество
	|ИЗ
	|	Документ._ДемоСчетНаОплатуПокупателю КАК _ДемоСчетНаОплатуПокупателю
	|ГДЕ
	|	ГОД(_ДемоСчетНаОплатуПокупателю.ДатаОплаты) = 1
	|	И _ДемоСчетНаОплатуПокупателю.Партнер = &Партнер";
	
	
	Запрос.УстановитьПараметр("Партнер", Партнер);
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Результат = РезультатЗапроса[0].Количество;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Подготовка табличных печатных документов.

// Возвращает заголовок документа для печатной формы.
//
// Параметры:
//  Шапка - любая структура с полями:
//           Номер         - Строка или Число - номер документа;
//           Дата          - Дата - дата документа;
//           Представление - Строка - (необязательный) платформенное представление ссылки на документ.
//                                    Если параметр НазваниеДокумента не задан, то название документа будет вычисляться
//                                    из этого параметра.
//  НазваниеДокумента - Строка - название документа (например, "Счет на оплату").
//
// Возвращаемое значение:
//  Строка - заголовок документа.
//
Функция СформироватьЗаголовокДокумента(Шапка, Знач НазваниеДокумента = "")
	
	ДанныеДокумента = Новый Структура("Номер,Дата,Представление");
	ЗаполнитьЗначенияСвойств(ДанныеДокумента, Шапка);
	
	// Если название документа не передано, получим название по представлению документа.
	Если ПустаяСтрока(НазваниеДокумента) И ЗначениеЗаполнено(ДанныеДокумента.Представление) Тогда
		ПоложениеНомера = СтрНайти(ДанныеДокумента.Представление, ДанныеДокумента.Номер);
		Если ПоложениеНомера > 0 Тогда
			НазваниеДокумента = СокрЛП(Лев(ДанныеДокумента.Представление, ПоложениеНомера - 1));
		КонецЕсли;
	КонецЕсли;

	НомерНаПечать = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ДанныеДокумента.Номер);
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 № %2 от %3'"),
		НазваниеДокумента, НомерНаПечать, Формат(ДанныеДокумента.Дата, "ДЛФ=DD"));
	
КонецФункции

Функция ДанныеДокументов(МассивОбъектов)
	
	МассивВозврата = Новый Массив;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации._ДемоАдресКонтрагента);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	_ДемоКонтрагентыКонтактнаяИнформация.Представление КАК АдресПлательщика,
	|	_ДемоКонтрагентыКонтактнаяИнформация.Ссылка КАК Контрагент
	|ПОМЕСТИТЬ втАдрес
	|ИЗ
	|	Документ._ДемоСчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник._ДемоКонтрагенты.КонтактнаяИнформация КАК _ДемоКонтрагентыКонтактнаяИнформация
	|		ПО СчетНаОплатуПокупателю.Контрагент = _ДемоКонтрагентыКонтактнаяИнформация.Ссылка
	|ГДЕ
	|	СчетНаОплатуПокупателю.Ссылка В(&МассивОбъектов)
	|	И ЕСТЬNULL(_ДемоКонтрагентыКонтактнаяИнформация.Вид, """") = &Вид
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетНаОплатуПокупателю.СуммаОплаты КАК СуммаЧислом,
	|	СчетНаОплатуПокупателю.Организация.Наименование КАК ТекстПолучателя,
	|	СчетНаОплатуПокупателю.Контрагент.НаименованиеПолное КАК ФИОПлательщика,
	|	СчетНаОплатуПокупателю.БанковскийСчет КАК БанковскийСчет,
	|	ВЫБОР
	|		КОГДА СчетНаОплатуПокупателю.БанковскийСчет.РучноеИзменениеРеквизитовБанка
	|			ТОГДА СчетНаОплатуПокупателю.БанковскийСчет.НаименованиеБанка
	|		ИНАЧЕ СчетНаОплатуПокупателю.БанковскийСчет.Банк.Наименование
	|	КОНЕЦ КАК НаименованиеБанкаПолучателя,
	|	ВЫБОР
	|		КОГДА СчетНаОплатуПокупателю.БанковскийСчет.РучноеИзменениеРеквизитовБанка
	|			ТОГДА СчетНаОплатуПокупателю.БанковскийСчет.БИКБанка
	|		ИНАЧЕ СчетНаОплатуПокупателю.БанковскийСчет.Банк.Код
	|	КОНЕЦ КАК БИКБанкаПолучателя,
	|	ВЫБОР
	|		КОГДА СчетНаОплатуПокупателю.БанковскийСчет.РучноеИзменениеРеквизитовБанка
	|			ТОГДА СчетНаОплатуПокупателю.БанковскийСчет.КоррСчетБанка
	|		ИНАЧЕ СчетНаОплатуПокупателю.БанковскийСчет.Банк.КоррСчет
	|	КОНЕЦ КАК СчетБанкаПолучателя,
	|	СчетНаОплатуПокупателю.БанковскийСчет.НомерСчета КАК НомерСчетаПолучателя,
	|	СчетНаОплатуПокупателю.Контрагент.ИНН КАК ИННПолучателя,
	|	СчетНаОплатуПокупателю.Номер КАК Номер,
	|	СчетНаОплатуПокупателю.Ссылка КАК Ссылка,
	|	СчетНаОплатуПокупателю.Дата КАК Дата,
	|	ЕСТЬNULL(втАдрес.АдресПлательщика, """") КАК АдресПлательщика
	|ИЗ
	|	Документ._ДемоСчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
	|		ЛЕВОЕ СОЕДИНЕНИЕ втАдрес КАК втАдрес
	|		ПО СчетНаОплатуПокупателю.Контрагент = втАдрес.Контрагент
	|ГДЕ
	|	СчетНаОплатуПокупателю.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетНаОплатуПокупателю.МоментВремени
	|ИТОГИ ПО
	|	Ссылка";

	Результат = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ТекстСообщения = "";
	
	Пока Результат.Следующий() Цикл
		
		ОшибкаЗаполнения = Ложь;
		Если Не ЗначениеЗаполнено(Результат.БанковскийСчет) Тогда
			ТекстСообщения = НСтр("ru = 'Не заполнен обязательный реквизит: ""Банковский счет""'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,Результат.Ссылка);
			ОшибкаЗаполнения = Истина;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Результат.НаименованиеБанкаПолучателя) Тогда
			ТекстСообщения = НСтр("ru = 'В банковском счете не заполнен реквизит: ""Наименование банка""'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,Результат.Ссылка);
			ОшибкаЗаполнения = Истина;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Результат.БИКБанкаПолучателя) Тогда
			ТекстСообщения = НСтр("ru = 'В банковском счете не заполнен реквизит: ""БИК банка""'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,Результат.Ссылка);
			ОшибкаЗаполнения = Истина;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Результат.НомерСчетаПолучателя) Тогда
			ТекстСообщения = НСтр("ru = 'В банковском счете не заполнен реквизит: ""Номер счета""'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,Результат.Ссылка);
			ОшибкаЗаполнения = Истина;
		КонецЕсли;

		
		Если ОшибкаЗаполнения Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураДанных = СтруктураПлатежногоДокумента();
		РеквизитыПлатежа = Результат.Выбрать();
		РеквизитыПлатежа.Следующий();
		ЗаполнитьЗначенияСвойств(СтруктураДанных, РеквизитыПлатежа);
		СтруктураДанных.НазначениеПлатежа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Оплата по счету №%1 от %2'"),
			ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(РеквизитыПлатежа.Номер), Формат(РеквизитыПлатежа.Дата, "ДЛФ=D"));
		СтруктураФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(РеквизитыПлатежа.ФИОПлательщика);
		СтруктураДанных.ФамилияПлательщика = ?(СтруктураФИО.Фамилия <> Неопределено, СтруктураФИО.Фамилия, "");
		СтруктураДанных.ИмяПлательщика = ?(СтруктураФИО.Имя <> Неопределено, СтруктураФИО.Имя, "");
		СтруктураДанных.ОтчествоПлательщика = ?(СтруктураФИО.Отчество <> Неопределено, СтруктураФИО.Отчество, "");
		МассивВозврата.Добавить(СтруктураДанных);
	КонецЦикла;
	
	Возврат МассивВозврата;
	
КонецФункции

Функция СтруктураПлатежногоДокумента()
	
	СтруктураВозврата = Новый Структура;
	
	СтруктураВозврата.Вставить("Ссылка");
	СтруктураВозврата.Вставить("ТекстПолучателя");
	СтруктураВозврата.Вставить("НомерСчетаПолучателя");
	СтруктураВозврата.Вставить("НаименованиеБанкаПолучателя");
	СтруктураВозврата.Вставить("БИКБанкаПолучателя");
	СтруктураВозврата.Вставить("СчетБанкаПолучателя");
	
	СтруктураВозврата.Вставить("СуммаЧислом");
	СтруктураВозврата.Вставить("НазначениеПлатежа");
	
	СтруктураВозврата.Вставить("ФамилияПлательщика");
	СтруктураВозврата.Вставить("ИмяПлательщика");
	СтруктураВозврата.Вставить("ОтчествоПлательщика");
	СтруктураВозврата.Вставить("АдресПлательщика");
	
	Возврат СтруктураВозврата;
	
КонецФункции



Функция КонтактнаяИнформацияДляСчета(Организация, Дата)
	
	Перем ГородНаселенныйПункт, МассивВидовКИ, МассивОбъектовКИ, Сведения, СтрокаТаблицыКИ, СтруктураПолейАдреса, ТаблицаКИ;
	
	МассивОбъектовКИ = Новый Массив;
	МассивОбъектовКИ.Добавить(Организация);
	
	МассивВидовКИ = Новый Массив;
	МассивВидовКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
	Сведения = СведенияКонтактнойИнформации();
	
	ТаблицаКИ = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(МассивОбъектовКИ, Неопределено, МассивВидовКИ, Дата);
	Для Каждого СтрокаТаблицыКИ Из ТаблицаКИ Цикл
		
		// Определяем нижний уровень населенного пункта в адресе.
		ГородНаселенныйПункт = "";
		Если СтрокаТаблицыКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
			СтруктураПолейАдреса = УправлениеКонтактнойИнформацией.ПредыдущаяСтруктураКонтактнойИнформацииXML(
			СтрокаТаблицыКИ.ЗначенияПолей, СтрокаТаблицыКИ.Вид);
			
			Если СтруктураПолейАдреса.Свойство("Город") 
				И ЗначениеЗаполнено(СтруктураПолейАдреса.Город) Тогда
				ГородНаселенныйПункт = СтруктураПолейАдреса.Город;
				
			ИначеЕсли СтруктураПолейАдреса.Свойство("НаселенныйПункт") 
				И ЗначениеЗаполнено(СтруктураПолейАдреса.НаселенныйПункт) Тогда
				ГородНаселенныйПункт = СтруктураПолейАдреса.НаселенныйПункт;
				
			ИначеЕсли СтруктураПолейАдреса.Свойство("КодРегиона")
				И СтруктураПолейАдреса.Свойство("Регион")
				И (СтруктураПолейАдреса.КодРегиона =  "77" // Москва
				ИЛИ СтруктураПолейАдреса.КодРегиона = "78" // Санкт-Петербург
				ИЛИ СтруктураПолейАдреса.КодРегиона = "92" // Севастополь и Байконур
				ИЛИ СтруктураПолейАдреса.КодРегиона = "99") Тогда
				// Города федерального значения и приравненные к ним
					ГородНаселенныйПункт = СтруктураПолейАдреса.Регион;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаТаблицыКИ.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации Тогда
			Сведения.ЮридическийАдрес = СтрокаТаблицыКИ.Представление;
			Сведения.ГородПоЮридическомуАдресу = ГородНаселенныйПункт;
			Сведения.ЮридическийАдрес = СтрокаТаблицыКИ.Представление;
			Сведения.ЗначенияПолейЮридическийАдрес = СтрокаТаблицыКИ.ЗначенияПолей;
			Сведения.ГородПоЮридическомуАдресу = ГородНаселенныйПункт;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Сведения;
КонецФункции

Функция СведенияКонтактнойИнформации()
	
	Сведения = Новый Структура;
	Сведения.Вставить("ЮридическийАдрес", "");
	Сведения.Вставить("ГородПоЮридическомуАдресу", "");
	Сведения.Вставить("ЮридическийАдрес", "");
	Сведения.Вставить("ЗначенияПолейЮридическийАдрес", "");
	Сведения.Вставить("ГородПоЮридическомуАдресу", "");
	
	Возврат Сведения;
КонецФункции

Функция СоздатьОписаниеПолучателя()
	ОписаниеПолучателя = Новый Структура;
	ОписаниеПолучателя.Вставить("Адрес", "");
	ОписаниеПолучателя.Вставить("Представление", "");
	ОписаниеПолучателя.Вставить("ИсточникКонтактнойИнформации");
	ОписаниеПолучателя.Вставить("ВидПочтовогоАдреса", "");
	ОписаниеПолучателя.Вставить("Пояснение", "");
	
	Возврат ОписаниеПолучателя;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с макетами офисных документов.

Функция ПолучитьДанныеОбъекта(СсылкаНаОбъект)
	
	Объект = СсылкаНаОбъект.ПолучитьОбъект();
	
	ДанныеОбъекта = Новый Структура;
	
	ДанныеОбъекта.Вставить("Комментарий",	Объект.Комментарий);
	ДанныеОбъекта.Вставить("Контрагент",	Объект.Контрагент.Наименование);
	ДанныеОбъекта.Вставить("СуммаОплаты",	Объект.СуммаОплаты);
	ДанныеОбъекта.Вставить("Организация",	Объект.Организация.Наименование);
	ДанныеОбъекта.Вставить("Дата",			Строка(ТекущаяДатаСеанса()));
	
	ДанныеОбъекта.Вставить("Товары", Новый Массив);
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		СтрокаТаблицыТовары = Новый Структура;
		СтрокаТаблицыТовары.Вставить("Номенклатура",СтрокаТабличнойЧасти.Номенклатура);
		СтрокаТаблицыТовары.Вставить("Количество",	СтрокаТабличнойЧасти.Количество);
		СтрокаТаблицыТовары.Вставить("Цена",		СтрокаТабличнойЧасти.Цена);
		СтрокаТаблицыТовары.Вставить("Сумма",		СтрокаТабличнойЧасти.Сумма);
		СтрокаТаблицыТовары.Вставить("Всего",		СтрокаТабличнойЧасти.Всего);
		
		Если Не СтрокаТабличнойЧасти.Номенклатура.ФайлКартинки.Пустая() Тогда
			Рисунок = ПрисоединенныеФайлы.ПолучитьДанныеФайла(СтрокаТабличнойЧасти.Номенклатура.ФайлКартинки).СсылкаНаДвоичныеДанныеФайла;
		Иначе
			Рисунок = Неопределено;
		КонецЕсли;
		СтрокаТаблицыТовары.Вставить("Рисунок", Рисунок);
		
		ДанныеОбъекта.Товары.Добавить(СтрокаТаблицыТовары);
	КонецЦикла;
	
	Возврат ДанныеОбъекта;
	
КонецФункции

Функция ПолучитьОписаниеОбластейМакетаОфисногоДокумента()
	
	ОписаниеОбластей = Новый Структура;
	
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "ВерхнийКолонтитул",	"ВерхнийКолонтитул");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "НижнийКолонтитул",		"НижнийКолонтитул");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "Заголовок",			"Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "НижняяЧасть",			"Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "ШапкаТаблицыТовары",	"СтрокаТаблицы");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "СтрокаТаблицаТовары",	"СтрокаТаблицы");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "ШапкаТаблицыТоварыТекст",	"Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "ШапкаТоварыНоменклатура",	"Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "ТоварыНоменклатура",		"Список");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "ШапкаТоварыВсего",		"Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "ТоварыВсего",			"Список");
	
	Возврат ОписаниеОбластей;
	
КонецФункции

Функция НазваниеДокумента(Идентификатор)
	Результат = "";
	Если Идентификатор = "СчетЗаказ" Тогда
		Результат = НСтр("ru = 'Демо: Счет на оплату'")
	ИначеЕсли Идентификатор = "СчетЗаказ2" Тогда
		Результат = НСтр("ru = 'Демо: Заказ покупателя'")
	КонецЕсли;
	Возврат Результат;
КонецФункции

#КонецОбласти

#КонецЕсли
