#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем ВидыСвойств;
Перем СвязиМеждуОбъектамиПодсистем;
Перем ЗависимостиПодсистем;
Перем КоллекцияКартинок;
Перем ПоискПоПолномуИмени;
Перем ТаблицаИсключений;
Перем ПроверяемыеНаАвтономностьОбъекты;

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Настройки общей формы отчета подсистемы "Варианты отчетов".
//
// Параметры:
//   Форма - УправляемаяФорма, Неопределено - Форма отчета или форма настроек отчета.
//       Неопределено когда вызов без контекста.
//   КлючВарианта - Строка, Неопределено - Имя предопределенного
//       или уникальный идентификатор пользовательского варианта отчета.
//       Неопределено когда вызов без контекста.
//   Настройки - Структура - см. возвращаемое значение
//       ОтчетыКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию().
//
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	Настройки.События.ПриСозданииНаСервере = Истина;
	Настройки.События.ПриЗагрузкеПользовательскихНастроекНаСервере = Истина;
КонецПроцедуры

// Для общей формы отчета подсистемы "Варианты отчетов".
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	Если ОткрытКонфигуратор() Тогда
		ОтображениеСостояния = Форма.Элементы.ОтчетТабличныйДокумент.ОтображениеСостояния;
		ОтображениеСостояния.Видимость = Истина;
		ОтображениеСостояния.Картинка = БиблиотекаКартинок.Предупреждение32;
		ОтображениеСостояния.Текст = ТекстСообщенияНеобходимоЗакрытьКонфигуратор();
	КонецЕсли;
КонецПроцедуры

// Для общей формы отчета подсистемы "Варианты отчетов".
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(Форма, НовыеПользовательскиеНастройкиКД) Экспорт
	Если ОткрытКонфигуратор() Тогда
		ОтображениеСостояния = Форма.Элементы.ОтчетТабличныйДокумент.ОтображениеСостояния;
		ОтображениеСостояния.Видимость = Истина;
		ОтображениеСостояния.Картинка = БиблиотекаКартинок.Предупреждение32;
		ОтображениеСостояния.Текст = ТекстСообщенияНеобходимоЗакрытьКонфигуратор();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	Если ОткрытКонфигуратор() Тогда
		Отказ = Истина;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщенияНеобходимоЗакрытьКонфигуратор());
	КонецЕсли;
КонецПроцедуры

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	Если Не ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		ВызватьИсключение НСтр("ru = 'Отчет предназначен для работы в файловом режиме работы.'");
		Возврат;
	КонецЕсли;
	
	ОтчетПоЗависимостям();
	
	// Вывод зависимостей в отчет
	СтандартнаяОбработка = Ложь;
	НастройкиКД = КомпоновщикНастроек.ПолучитьНастройки();
	ВнешниеНаборыДанных = Новый Структура("СвязиМеждуОбъектамиПодсистем", СвязиМеждуОбъектамиПодсистем);
	
	КомпоновщикМакетаКД = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКД = КомпоновщикМакетаКД.Выполнить(СхемаКомпоновкиДанных, НастройкиКД);
	
	ПроцессорКД = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКД.Инициализировать(МакетКД, ВнешниеНаборыДанных);
	
	ПроцессорВыводаРезультатаКД = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВыводаРезультатаКД.УстановитьДокумент(ДокументРезультат);
	ПроцессорВыводаРезультатаКД.Вывести(ПроцессорКД);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Только для внутреннего использования.
Функция ОтчетПоЗависимостям(ПереданныйКаталогВыгрузкиМодулей = "") Экспорт
	
	КаталогВыгрузкиМодулей = ПереданныйКаталогВыгрузкиМодулей;
	// Подготовительные действия
	ВыполнитьПодготовительныеДействия();
	Если ПереданныйКаталогВыгрузкиМодулей = "" Тогда
		ВыгрузитьМодулиВФайлы();
	КонецЕсли;
	ЗаполнитьКоллекциюКартинок();
	ПринадлежностьОбъектаПодсистеме = СоответствиеОбъектовПодсистемам();
	ПроверяемыеСвойстваОбъектовМетаданных = ПроверяемыеСвойстваОбъектовМетаданных();
	
	// Поиск вызовов в модулях конфигурации.
	ПоискВызововВКодеМодулей(ПринадлежностьОбъектаПодсистеме);
	
	// Поиск вызовов в метаданных конфигурации.
	ПоискВызововВМетаданныхКонфигурации(ПроверяемыеСвойстваОбъектовМетаданных, ПринадлежностьОбъектаПодсистеме);
	СвязиМеждуОбъектамиПодсистем.Сортировать("ВызывающаяПодсистема, ВызываемаяПодсистема");
	
	ПрименитьСписокИсключений();
	
	Возврат СвязиМеждуОбъектамиПодсистем;
	
КонецФункции

// Подготовительные действия

Процедура ВыполнитьПодготовительныеДействия()
	
	Если КаталогВыгрузкиМодулей = "" Тогда
		ЗаполнитьПараметрыЗапуска();
	КонецЕсли;
	ЗаполнитьПроверяемыеНаАвтономностьОбъекты();
	ВыполнитьСозданиеТаблиц();
	ЗависимостиПодсистем = Обработки.ПервоеВнедрениеБСП.Создать().ЗависимостиПодсистем();
	ПолучитьСписокИсключений();
	
КонецПроцедуры

Функция СоответствиеОбъектовПодсистемам()
	
	ПринадлежностьОбъектаПодсистеме = Новый ТаблицаЗначений;
	ПринадлежностьОбъектаПодсистеме.Колонки.Добавить("ПолноеИмяОМД");
	ПринадлежностьОбъектаПодсистеме.Колонки.Добавить("Подсистема");
	ПринадлежностьОбъектаПодсистеме.Колонки.Добавить("СтрокаОбращенияИзКода");
	ПринадлежностьОбъектаПодсистеме.Колонки.Добавить("ВозможенВызовПоПолномуИмени");
	ПринадлежностьОбъектаПодсистеме.Колонки.Добавить("СтрокаОбращенияКМетаданным");
	ПринадлежностьОбъектаПодсистеме.Колонки.Добавить("АльтернативнаяСтрокаОбращенияКМетаданным");
	
	Для Каждого СтандартнаяПодсистема Из Метаданные.Подсистемы.СтандартныеПодсистемы.Подсистемы Цикл
		
		Если СтандартнаяПодсистема.Имя = "РаботаВМоделиСервиса" Тогда
			// Перебор всех подсистем ВМоделиСервиса.
			Для Каждого ПодсистемаВМоделиСервиса Из СтандартнаяПодсистема.Подсистемы Цикл
				СоставПодсистемы = ПодсистемаВМоделиСервиса.Состав;
				Для Каждого ОбъектМетаданных Из СоставПодсистемы Цикл
					ПолноеИмяОМД = ОбъектМетаданных.ПолноеИмя();
					Подсистема   = СтандартнаяПодсистема.Имя;
					ЗаполнитьПринадлежностьОбъектаПодсистеме(ПринадлежностьОбъектаПодсистеме, ПолноеИмяОМД, Подсистема);
				КонецЦикла;
			КонецЦикла;
			
			Продолжить;
		КонецЕсли;
		
		СоставПодсистемы = СтандартнаяПодсистема.Состав;
		Для Каждого ОбъектМетаданных Из СоставПодсистемы Цикл
			ПолноеИмяОМД = ОбъектМетаданных.ПолноеИмя();
			Подсистема   = СтандартнаяПодсистема.Имя;
			ЗаполнитьПринадлежностьОбъектаПодсистеме(ПринадлежностьОбъектаПодсистеме, ПолноеИмяОМД, Подсистема);
		КонецЦикла;
		
	КонецЦикла;
	
	ПринадлежностьОбъектаПодсистеме.Сортировать("ПолноеИмяОМД");
	Возврат ПринадлежностьОбъектаПодсистеме;
	
КонецФункции

Процедура ЗаполнитьПринадлежностьОбъектаПодсистеме(ПринадлежностьОбъектаПодсистеме, ПолноеИмяОМД, Подсистема)
	
	ЭтоОбщийМодульИлиКартинка                = Ложь;
	ЭтоЭлементСтиля                          = Ложь;
	СтрокаОбращенияКМетаданным               = "";
	АльтернативнаяСтрокаОбращенияКМетаданным = "";
	
	Если СтрНайти(ПолноеИмяОМД, "Подсистема.СтандартныеПодсистемы.") > 0 Тогда
		
		Возврат;
		
	ИначеЕсли СтрНайти(ПолноеИмяОМД, "ОбщийМодуль.") > 0 Тогда
		
		ИмяОбъекта                  = СтрЗаменить(ПолноеИмяОМД, "ОбщийМодуль.", "");
		ТипОбъекта                  = "";
		ВозможенВызовПоПолномуИмени = Ложь;
		МожноВызватьНапрямуюИзКода  = Истина;
		ЭтоОбщийМодульИлиКартинка   = Истина;
		
	ИначеЕсли СтрНайти(ПолноеИмяОМД, "ПараметрСеанса.") > 0 Тогда
		
		ИмяОбъекта                  = СтрЗаменить(ПолноеИмяОМД, "ПараметрСеанса.", "");
		ТипОбъекта                  = "ПараметрыСеанса";
		ВозможенВызовПоПолномуИмени = Ложь;
		МожноВызватьНапрямуюИзКода  = Истина;
		
	ИначеЕсли СтрНайти(ПолноеИмяОМД, "Роль.") > 0 Тогда
		
		ИмяОбъекта                  = СтрЗаменить(ПолноеИмяОМД, "Роль.", "");
		ТипОбъекта                  = "Роли";
		ВозможенВызовПоПолномуИмени = Ложь;
		МожноВызватьНапрямуюИзКода  = Ложь;
		
	ИначеЕсли СтрНайти(ПолноеИмяОМД, "ОбщийРеквизит.") > 0 Тогда
		
		ИмяОбъекта                  = СтрЗаменить(ПолноеИмяОМД, "ОбщийРеквизит.", "");
		ТипОбъекта                  = "ОбщиеРеквизиты";
		ВозможенВызовПоПолномуИмени = Ложь;
		МожноВызватьНапрямуюИзКода  = Ложь;
		
	ИначеЕсли СтрНайти(ПолноеИмяОМД, "ПланОбмена.") > 0 Тогда
		
		ИмяОбъекта                  = СтрЗаменить(ПолноеИмяОМД, "ПланОбмена.", "");
		ТипОбъекта                  = "ПланыОбмена";
		ВозможенВызовПоПолномуИмени = Истина;
		МожноВызватьНапрямуюИзКода  = Истина;
		
	ИначеЕсли СтрНайти(ПолноеИмяОМД, "КритерийОтбора.") > 0 Тогда
		
		ИмяОбъекта                  = СтрЗаменить(ПолноеИмяОМД, "КритерийОтбора.", "");
		ТипОбъекта                  = "КритерииОтбора";
		ВозможенВызовПоПолномуИмени = Истина;
		МожноВызватьНапрямуюИзКода  = Истина;
		
	ИначеЕсли СтрНайти(ПолноеИмяОМД, "ПодпискаНаСобытие.") > 0 Тогда
		
		ИмяОбъекта                  = СтрЗаменить(ПолноеИмяОМД, "ПодпискаНаСобытие.", "");
		ТипОбъекта                  = "ПодпискиНаСобытия";
		ВозможенВызовПоПолномуИмени = Ложь;
		МожноВызватьНапрямуюИзКода  = Ложь;
		
	ИначеЕсли СтрНайти(ПолноеИмяОМД, "РегламентноеЗадание.") > 0 Тогда
		
		ИмяОбъекта                  = СтрЗаменить(ПолноеИмяОМД, "РегламентноеЗадание.", "");
		ТипОбъекта                  = "РегламентныеЗадания";
		ВозможенВызовПоПолномуИмени = Ложь;
		МожноВызватьНапрямуюИзКода  = Ложь;
		
	ИначеЕсли СтрНайти(ПолноеИмяОМД, "ФункциональнаяОпция.") > 0 Тогда
		
		ИмяОбъекта                  = СтрЗаменить(ПолноеИмяОМД, "ФункциональнаяОпция.", "");
		ТипОбъекта                  = "ФункциональныеОпции";
		ВозможенВызовПоПолномуИмени = Ложь;
		МожноВызватьНапрямуюИзКода  = Ложь;
		
	ИначеЕсли СтрНайти(ПолноеИмяОМД, "ПараметрФункциональныхОпций.") > 0 Тогда
		
		ИмяОбъекта                  = СтрЗаменить(ПолноеИмяОМД, "ПараметрФункциональныхОпций.", "");
		ТипОбъекта                  = "ПараметрыФункциональныхОпций";
		ВозможенВызовПоПолномуИмени = Ложь;
		МожноВызватьНапрямуюИзКода  = Ложь;
		
	ИначеЕсли СтрНайти(ПолноеИмяОМД, "ОпределяемыйТип.") > 0 Тогда
		
		ИмяОбъекта                  = СтрЗаменить(ПолноеИмяОМД, "ОпределяемыйТип.", "");
		ТипОбъекта                  = "ОпределяемыеТипы";
		ВозможенВызовПоПолномуИмени = Ложь;
		МожноВызватьНапрямуюИзКода  = Ложь;
		
	ИначеЕсли СтрНайти(ПолноеИмяОМД, "ХранилищеНастроек.") > 0 Тогда
		
		ИмяОбъекта                  = СтрЗаменить(ПолноеИмяОМД, "ХранилищеНастроек.", "");
		ТипОбъекта                  = "ХранилищаНастроек";
		ВозможенВызовПоПолномуИмени = Ложь;
		МожноВызватьНапрямуюИзКода  = Истина;
		
	ИначеЕсли СтрНайти(ПолноеИмяОМД, "ОбщаяФорма.") > 0 Тогда
		
		ИмяОбъекта                  = СтрЗаменить(ПолноеИмяОМД, "ОбщаяФорма.", "");
		ТипОбъекта                  = "ОбщиеФормы";
		ВозможенВызовПоПолномуИмени = Истина;
		МожноВызватьНапрямуюИзКода  = Ложь;
		
	ИначеЕсли СтрНайти(ПолноеИмяОМД, "ОбщаяКоманда.") > 0 Тогда
		
		ИмяОбъекта                  = СтрЗаменить(ПолноеИмяОМД, "ОбщаяКоманда.", "");
		ТипОбъекта                  = "ОбщиеКоманды";
		ВозможенВызовПоПолномуИмени = Ложь;
		МожноВызватьНапрямуюИзКода  = Ложь;
		
	ИначеЕсли СтрНайти(ПолноеИмяОМД, "ГруппаКоманд.") > 0 Тогда
		
		ИмяОбъекта                  = СтрЗаменить(ПолноеИмяОМД, "ГруппаКоманд.", "");
		ТипОбъекта                  = "ГруппыКоманд";
		ВозможенВызовПоПолномуИмени = Ложь;
		МожноВызватьНапрямуюИзКода  = Ложь;
		
	ИначеЕсли СтрНайти(ПолноеИмяОМД, "ОбщийМакет.") > 0 Тогда
		
		ИмяОбъекта                  = СтрЗаменить(ПолноеИмяОМД, "ОбщийМакет.", "");
		ТипОбъекта                  = "ОбщиеМакеты";
		ВозможенВызовПоПолномуИмени = Истина;
		МожноВызватьНапрямуюИзКода  = Ложь;
		
	ИначеЕсли СтрНайти(ПолноеИмяОМД, "ОбщаяКартинка.") > 0 Тогда
		
		ИмяОбъекта                  = СтрЗаменить(ПолноеИмяОМД, "ОбщаяКартинка.", "");
		ТипОбъекта                  = "БиблиотекаКартинок";
		ВозможенВызовПоПолномуИмени = Ложь;
		МожноВызватьНапрямуюИзКода  = Истина;
		ЭтоОбщийМодульИлиКартинка   = Истина;
		
	ИначеЕсли СтрНайти(ПолноеИмяОМД, "ПакетXDTO.") > 0 Тогда
		
		ИмяОбъекта                  = СтрЗаменить(ПолноеИмяОМД, "ПакетXDTO.", "");
		ТипОбъекта                  = "ПакетыXDTO";
		ВозможенВызовПоПолномуИмени = Ложь;
		МожноВызватьНапрямуюИзКода  = Ложь;
		
	ИначеЕсли СтрНайти(ПолноеИмяОМД, "WebСервис.") > 0 Тогда
		
		ИмяОбъекта                  = СтрЗаменить(ПолноеИмяОМД, "WebСервис.", "");
		ТипОбъекта                  = "WebСервисы";
		ВозможенВызовПоПолномуИмени = Ложь;
		МожноВызватьНапрямуюИзКода  = Ложь;
		
	ИначеЕсли СтрНайти(ПолноеИмяОМД, "WSСсылка.") > 0 Тогда
		
		ИмяОбъекта                  = СтрЗаменить(ПолноеИмяОМД, "WSСсылка.", "");
		ТипОбъекта                  = "WSСсылки";
		ВозможенВызовПоПолномуИмени = Ложь;
		МожноВызватьНапрямуюИзКода  = Ложь;
		
	ИначеЕсли СтрНайти(ПолноеИмяОМД, "ЭлементСтиля.") > 0 Тогда
		
		ИмяОбъекта                  = СтрЗаменить(ПолноеИмяОМД, "ЭлементСтиля.", "");
		ТипОбъекта                  = "ЭлементыСтиля";
		
		ВозможенВызовПоПолномуИмени = Истина;
		МожноВызватьНапрямуюИзКода  = Истина;
		ЭтоЭлементСтиля             = Истина;
		
	ИначеЕсли СтрНайти(ПолноеИмяОМД, "Константа.") > 0 Тогда
		
		ИмяОбъекта                  = СтрЗаменить(ПолноеИмяОМД, "Константа.", "");
		ТипОбъекта                  = "Константы";
		ВозможенВызовПоПолномуИмени = Истина;
		МожноВызватьНапрямуюИзКода  = Истина;
		
	ИначеЕсли СтрНайти(ПолноеИмяОМД, "Справочник.") > 0 Тогда
		
		ИмяОбъекта                  = СтрЗаменить(ПолноеИмяОМД, "Справочник.", "");
		ТипОбъекта                  = "Справочники";
		ВозможенВызовПоПолномуИмени = Истина;
		МожноВызватьНапрямуюИзКода  = Истина;
		
	ИначеЕсли СтрНайти(ПолноеИмяОМД, "Документ.") > 0 Тогда
		
		ИмяОбъекта                  = СтрЗаменить(ПолноеИмяОМД, "Документ.", "");
		ТипОбъекта                  = "Документы";
		ВозможенВызовПоПолномуИмени = Истина;
		МожноВызватьНапрямуюИзКода  = Истина;
		
	ИначеЕсли СтрНайти(ПолноеИмяОМД, "ЖурналДокументов.") > 0 Тогда
		
		ИмяОбъекта                  = СтрЗаменить(ПолноеИмяОМД, "ЖурналДокументов.", "");
		ТипОбъекта                  = "ЖурналыДокументов";
		ВозможенВызовПоПолномуИмени = Истина;
		МожноВызватьНапрямуюИзКода  = Истина;
		
	ИначеЕсли СтрНайти(ПолноеИмяОМД, "Перечисление.") > 0 Тогда
		
		ИмяОбъекта                  = СтрЗаменить(ПолноеИмяОМД, "Перечисление.", "");
		ТипОбъекта                  = "Перечисления";
		ВозможенВызовПоПолномуИмени = Истина;
		МожноВызватьНапрямуюИзКода  = Истина;
		
	ИначеЕсли СтрНайти(ПолноеИмяОМД, "Отчет.") > 0 Тогда
		
		ИмяОбъекта                  = СтрЗаменить(ПолноеИмяОМД, "Отчет.", "");
		ТипОбъекта                  = "Отчеты";
		ВозможенВызовПоПолномуИмени = Истина;
		МожноВызватьНапрямуюИзКода  = Истина;
		
	ИначеЕсли СтрНайти(ПолноеИмяОМД, "Обработка.") > 0 Тогда
		
		ИмяОбъекта                  = СтрЗаменить(ПолноеИмяОМД, "Обработка.", "");
		ТипОбъекта                  = "Обработки";
		ВозможенВызовПоПолномуИмени = Истина;
		МожноВызватьНапрямуюИзКода  = Истина;
		
	ИначеЕсли СтрНайти(ПолноеИмяОМД, "ПланВидовХарактеристик.") > 0 Тогда
		
		ИмяОбъекта                  = СтрЗаменить(ПолноеИмяОМД, "ПланВидовХарактеристик.", "");
		ТипОбъекта                  = "ПланыВидовХарактеристик";
		ВозможенВызовПоПолномуИмени = Истина;
		МожноВызватьНапрямуюИзКода  = Истина;
		
	ИначеЕсли СтрНайти(ПолноеИмяОМД, "ПланСчетов.") > 0 Тогда
		
		ИмяОбъекта                  = СтрЗаменить(ПолноеИмяОМД, "ПланСчетов.", "");
		ТипОбъекта                  = "ПланыСчетов";
		ВозможенВызовПоПолномуИмени = Истина;
		МожноВызватьНапрямуюИзКода  = Истина;
		
	ИначеЕсли СтрНайти(ПолноеИмяОМД, "ПланВидовРасчета.") > 0 Тогда
		
		ИмяОбъекта                  = СтрЗаменить(ПолноеИмяОМД, "ПланВидовРасчета.", "");
		ТипОбъекта                  = "ПланыВидовРасчета";
		ВозможенВызовПоПолномуИмени = Истина;
		МожноВызватьНапрямуюИзКода  = Истина;
		
	ИначеЕсли СтрНайти(ПолноеИмяОМД, "РегистрСведений.") > 0 Тогда
		
		ИмяОбъекта                  = СтрЗаменить(ПолноеИмяОМД, "РегистрСведений.", "");
		ТипОбъекта                  = "РегистрыСведений";
		ВозможенВызовПоПолномуИмени = Истина;
		МожноВызватьНапрямуюИзКода  = Истина;
		
	ИначеЕсли СтрНайти(ПолноеИмяОМД, "РегистрНакопления.") > 0 Тогда
		
		ИмяОбъекта                  = СтрЗаменить(ПолноеИмяОМД, "РегистрНакопления.", "");
		ТипОбъекта                  = "РегистрыНакопления";
		ВозможенВызовПоПолномуИмени = Истина;
		МожноВызватьНапрямуюИзКода  = Истина;
		
	ИначеЕсли СтрНайти(ПолноеИмяОМД, "РегистрБухгалтерии.") > 0 Тогда
		
		ИмяОбъекта                  = СтрЗаменить(ПолноеИмяОМД, "РегистрБухгалтерии.", "");
		ТипОбъекта                  = "РегистрыБухгалтерии";
		ВозможенВызовПоПолномуИмени = Истина;
		МожноВызватьНапрямуюИзКода  = Истина;
		
	ИначеЕсли СтрНайти(ПолноеИмяОМД, "РегистрРасчета.") > 0 Тогда
		
		ИмяОбъекта                  = СтрЗаменить(ПолноеИмяОМД, "РегистрРасчета.", "");
		ТипОбъекта                  = "РегистрыРасчета";
		ВозможенВызовПоПолномуИмени = Истина;
		МожноВызватьНапрямуюИзКода  = Истина;
		
	ИначеЕсли СтрНайти(ПолноеИмяОМД, "БизнесПроцесс.") > 0 Тогда
		
		ИмяОбъекта                  = СтрЗаменить(ПолноеИмяОМД, "БизнесПроцесс.", "");
		ТипОбъекта                  = "БизнесПроцессы";
		ВозможенВызовПоПолномуИмени = Истина;
		МожноВызватьНапрямуюИзКода  = Истина;
		
	ИначеЕсли СтрНайти(ПолноеИмяОМД, "Задача.") > 0 Тогда
		
		ИмяОбъекта                  = СтрЗаменить(ПолноеИмяОМД, "Задача.", "");
		ТипОбъекта                  = "Задачи";
		ВозможенВызовПоПолномуИмени = Истина;
		МожноВызватьНапрямуюИзКода  = Истина;
		
	КонецЕсли;
	
	// Подготовка параметров.
	Если МожноВызватьНапрямуюИзКода И Не ЭтоЭлементСтиля Тогда
		СтрокаОбращенияИзКода = ?(ТипОбъекта <> "", ТипОбъекта + ".","") + ИмяОбъекта;
	ИначеЕсли ЭтоЭлементСтиля Тогда
		ЭтоЦвет = (Метаданные.ЭлементыСтиля[ИмяОбъекта].Вид = Метаданные.СвойстваОбъектов.ВидЭлементаСтиля.Цвет);
		СтрокаОбращенияИзКода = ?(ЭтоЦвет, "ЦветаСтиля.", "ШрифтыСтиля.") + ИмяОбъекта;
	Иначе
		СтрокаОбращенияИзКода = "";
	КонецЕсли;
	
	Если Не ЭтоОбщийМодульИлиКартинка Тогда
		СтрокаОбращенияКМетаданным               = "Метаданные." + ТипОбъекта + "." + ИмяОбъекта;
		АльтернативнаяСтрокаОбращенияКМетаданным = "Метаданные." + ТипОбъекта + "[""" + ИмяОбъекта + """]";
	КонецЕсли;
	
	// Заполнение таблицы.
	СтрокаТаблицы                                          = ПринадлежностьОбъектаПодсистеме.Добавить();
	СтрокаТаблицы.ПолноеИмяОМД                             = ПолноеИмяОМД;
	СтрокаТаблицы.Подсистема                               = Подсистема;
	СтрокаТаблицы.СтрокаОбращенияИзКода                    = СтрокаОбращенияИзКода;
	СтрокаТаблицы.ВозможенВызовПоПолномуИмени              = ВозможенВызовПоПолномуИмени;
	СтрокаТаблицы.СтрокаОбращенияКМетаданным               = СтрокаОбращенияКМетаданным;
	СтрокаТаблицы.АльтернативнаяСтрокаОбращенияКМетаданным = АльтернативнаяСтрокаОбращенияКМетаданным;
	
КонецПроцедуры

Функция КаталогИнформационнойБазы(СтрокаСоединения)
	
	ФайловаяБаза = СтрНайти(СтрокаСоединения, "File=");
	ПервыйСимволПути = ФайловаяБаза + 6;
	СтрокаСоединения = Сред(СтрокаСоединения, ПервыйСимволПути);
	ПоследнийСимволПути = СтрНайти(СтрокаСоединения, ";");
	СтрокаСоединения = Лев(СтрокаСоединения, ПоследнийСимволПути - 2);
	
	Возврат СтрокаСоединения;
	
КонецФункции

Функция ПроверяемыеСвойстваОбъектовМетаданных()
	
	ЗаполнитьВидыСвойств();
	
	ДеревоСвойствОбъектовМетаданных = Новый ДеревоЗначений;
	ДеревоСвойствОбъектовМетаданных.Колонки.Добавить("ОбъектМетаданных");
	ДеревоСвойствОбъектовМетаданных.Колонки.Добавить("ВидСвойства");
	ДеревоСвойствОбъектовМетаданных.Колонки.Добавить("Свойство");
	ДеревоСвойствОбъектовМетаданных.Колонки.Добавить("Тип" );
	
	ТабличныйДокумент = Отчеты.ИнструментыРазработчикаЗависимостиПодсистем.ПолучитьМакет("ПроверяемыеСвойства");
	ТекстСтроки = Неопределено;
	НомерСтроки   = 0;
	
	Пока ТекстСтроки <> "КонецТаблицы" Цикл
		
		ТекстСтроки = ТабличныйДокумент.Область(НомерСтроки,1).Текст;
		
		Если ПустаяСтрока(ТекстСтроки) Или ТекстСтроки = "ОМД / свойство" Тогда
			НомерСтроки = НомерСтроки+1;
			Продолжить;
		КонецЕсли;
		
		Если НачалоНовогоБлока(ТекстСтроки) Тогда
			
			Если СтрНайти(ТекстСтроки, "ОбъектМетаданных: ") > 0 Тогда
				ОбъектМетаданных = СтрЗаменить(ТекстСтроки, "ОбъектМетаданных: ", "");
				СтрокаОбъектыМетаданных = ДеревоСвойствОбъектовМетаданных.Строки.Добавить();
				СтрокаОбъектыМетаданных.ОбъектМетаданных = ОбъектМетаданных;
			Иначе
				ВидСвойства = СтрЗаменить(ТекстСтроки, ":", "");
				СтрокаТипСвойства = СтрокаОбъектыМетаданных.Строки.Добавить();
				СтрокаТипСвойства.ВидСвойства = ВидСвойства;
			КонецЕсли;
			
			НомерСтроки = НомерСтроки+1;
			Продолжить;
			
		КонецЕсли;
		
		СвойствоОбъекта         = СтрЗаменить(ТекстСтроки, ":", "");
		СтрокаСвойство          = СтрокаТипСвойства.Строки.Добавить();
		СтрокаСвойство.Свойство = СвойствоОбъекта;
		СтрокаСвойство.Тип      = ТабличныйДокумент.Область(НомерСтроки,2).Текст;
		
		НомерСтроки = НомерСтроки+1;
	КонецЦикла;
	
	Возврат ДеревоСвойствОбъектовМетаданных;
	
КонецФункции

Процедура ЗаполнитьКоллекциюКартинок()
	КоллекцияКартинок = Новый Соответствие;
	
	// картинки конфигурации
	Для Каждого Картинка Из Метаданные.ОбщиеКартинки Цикл
		ИмяКартинки = Картинка.Имя;
		КоллекцияКартинок.Вставить(XMLСтрока(БиблиотекаКартинок[ИмяКартинки].ПолучитьДвоичныеДанные()), Картинка.ПолноеИмя());
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьСписокИсключений()
	
	ТаблицаИсключений = Новый ТаблицаЗначений;
	ТаблицаИсключений.Колонки.Добавить("ИсключаемыйОбъект");
	ТаблицаИсключений.Колонки.Добавить("ВызывающаяПодсистема");
	ТаблицаИсключений.Колонки.Добавить("ВызываемаяПодсистема");
	ТаблицаИсключений.Колонки.Добавить("ВызывающийОбъект");
	
	ТабличныйДокумент = Отчеты.ИнструментыРазработчикаЗависимостиПодсистем.ПолучитьМакет("ОбъектыИсключения");
	ТекстСтроки = Неопределено;
	НомерСтроки   = 0;
	
	Пока ТекстСтроки <> "КонецТаблицы" Цикл
		
		ТекстСтроки = ТабличныйДокумент.Область(НомерСтроки,1).Текст;
		
		Если ПустаяСтрока(ТекстСтроки) Или ТекстСтроки = "Список исключений при проверке:"
			Или ТекстСтроки = "КонецТаблицы" Тогда
			НомерСтроки = НомерСтроки+1;
			Продолжить;
		КонецЕсли;
		
		Если СтрНайти(ТекстСтроки, "ИсключаемыеОбъекты:") > 0 Тогда
			ТекущийБлокИсключений = "ИсключаемыеОбъекты";
			НомерСтроки = НомерСтроки+1;
			Продолжить;
		ИначеЕсли СтрНайти(ТекстСтроки, "ИсключаемыеСвязи:") > 0 Тогда
			ТекущийБлокИсключений = "ИсключаемыеСвязи";
			НомерСтроки = НомерСтроки+1;
			Продолжить;
		КонецЕсли;
		
		СтрокаИсключений = ТаблицаИсключений.Добавить();
		Если ТекущийБлокИсключений = "ИсключаемыеОбъекты" Тогда
			СтрокаИсключений.ИсключаемыйОбъект = ТекстСтроки;
		Иначе
			ИсключениеМассив = СтрРазделить(ТекстСтроки, "-", Ложь);
			СтрокаИсключений.ВызывающаяПодсистема = ИсключениеМассив[0];
			СтрокаИсключений.ВызываемаяПодсистема = ИсключениеМассив[1];
			СтрокаИсключений.ВызывающийОбъект     = ИсключениеМассив[2];
		КонецЕсли;
		
		НомерСтроки = НомерСтроки+1;
	КонецЦикла;
	
КонецПроцедуры

// Проверки

Процедура ПоискВызововВКодеМодулей(ПринадлежностьОбъектаПодсистеме)
	
	МассивФайлов = НайтиФайлы(КаталогВыгрузкиМодулей, "*.txt");
	
	Для Каждого Файл Из МассивФайлов Цикл
		
		// Пропускаем демо-объекты.
		Если СтрНайти(Файл.Имя, "_Демо") <> 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// Получение вызывающей подсистемы.
		ВызывающийОбъектМассив = СтрРазделить(Файл.Имя, ".", Ложь);
		ВызывающийОбъект = ВызывающийОбъектМассив[0] + "." + ВызывающийОбъектМассив[1];
		НайденнаяСтрока = ПринадлежностьОбъектаПодсистеме.Найти(ВызывающийОбъект, "ПолноеИмяОМД");
		ПолноеИмяВызывающегоОбъекта = СтрЗаменить(Файл.Имя, ".txt", "");
		
		ПроверкаАвтономногоОбъекта = (ПроверяемыеНаАвтономностьОбъекты.Найти(ВызывающийОбъект) <> Неопределено);
		
		Если НайденнаяСтрока = Неопределено И Не ПроверкаАвтономногоОбъекта Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ПроверкаАвтономногоОбъекта Тогда
			ЭтоОбъектПодсистемыВМоделиСервиса = (СтрНайти(НайденнаяСтрока.Подсистема, "ВМоделиСервиса") > 0);
			// Зависимости объектов подсистем ВМоделиСервиса не проверяются.
			Если ЭтоОбъектПодсистемыВМоделиСервиса Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если ПроверкаАвтономногоОбъекта Тогда
			СтрокаВызывающаяПодсистема = Неопределено;
			ВызывающаяПодсистема = "УниверсальныеОбработки";
		Иначе
			ВызывающаяПодсистема = НайденнаяСтрока.Подсистема;
			// Данные объекта вызывающей подсистемы.
			СтрокаВызывающаяПодсистема = ЗависимостиПодсистем.Найти(ВызывающаяПодсистема, "Имя");
		КонецЕсли;
		
		ТекстФайла = Новый ЧтениеТекста(Файл.ПолноеИмя);
		СтрокаТекста = ТекстФайла.Прочитать();
		// Блоки демо-примеров не анализируются.
		ВырезатьДемоПримерыИзКода(СтрокаТекста);
		
		Для Каждого ЭлементСоответствия Из ПринадлежностьОбъектаПодсистеме Цикл
			
			ВызываемаяПодсистема = ЭлементСоответствия.Подсистема;
			Если ВызывающаяПодсистема = ВызываемаяПодсистема Тогда
				Продолжить; // Вызов в пределах одной подсистемы.
			КонецЕсли;
			
			СтрокаВызываемаяПодсистема = ЗависимостиПодсистем.Найти(ВызываемаяПодсистема, "Имя");
			Если СтрокаВызываемаяПодсистема <> Неопределено
				И Не ПроверкаАвтономногоОбъекта И СтрокаВызываемаяПодсистема.Обязательная Тогда
				Продолжить; // Вызываемая подсистема обязательная.
			КонецЕсли;
			
			Если СтрокаВызывающаяПодсистема <> Неопределено
				И СтрокаВызывающаяПодсистема.УсловноЗависитОтПодсистем.Найти("*") <> Неопределено Тогда
				Прервать; // Зависимости для данной подсистемы не проверяются.
			КонецЕсли;
			
			Если СтрокаВызывающаяПодсистема <> Неопределено
				И СтрокаВызывающаяПодсистема.ЗависитОтПодсистем.Найти(ВызываемаяПодсистема) <> Неопределено Тогда
				Продолжить; // Зависимость между данными подсистемами документирована.
			КонецЕсли;
			
			ВыполнитьПоискВызововВДругиеПодсистемы(ВызывающаяПодсистема, ВызываемаяПодсистема, ПолноеИмяВызывающегоОбъекта, СтрокаТекста, ЭлементСоответствия);
			Если Не ПроверкаАвтономногоОбъекта Тогда
				НайтиОбращениеКМетаданнымВКодеМодулей(ВызывающаяПодсистема, ВызываемаяПодсистема, ПолноеИмяВызывающегоОбъекта, СтрокаТекста, ЭлементСоответствия);
				ВыполнитьПоискПоПолномуИмениОбъекта(ВызывающаяПодсистема, ВызываемаяПодсистема, ПолноеИмяВызывающегоОбъекта, СтрокаТекста, ЭлементСоответствия);
			КонецЕсли;
			
		КонецЦикла;
		
		ТекстФайла.Закрыть();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьПоискВызововВДругиеПодсистемы(ВызывающаяПодсистема, ВызываемаяПодсистема, ПолноеИмяВызывающегоОбъекта, ИсходнаяСтрока, ЭлементСоответствия)
	
	СтрокаТекста      = ИсходнаяСтрока;
	НачалоВызова      = 0;
	КонецВызова       = 0;
	НоваяСтрокаТекста = "";
	ОпорныйСимвол     = " ";
	НомерСтроки       = 0;
	СтрокаОбращенияИзКода = ЭлементСоответствия.СтрокаОбращенияИзКода;
	
	Если СтрокаОбращенияИзКода = "" Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрНайти(СтрокаОбращенияИзКода, "БиблиотекаКартинок") > 0
		Или СтрНайти(СтрокаОбращенияИзКода, "ЦветаСтиля") > 0
		Или СтрНайти(СтрокаОбращенияИзКода, "ШрифтыСтиля") > 0
		Или СтрНайти(СтрокаОбращенияИзКода, "ПараметрыСеанса") > 0 Тогда
		СтрокаПоиска = СтрокаОбращенияИзКода;
	Иначе
		СтрокаПоиска = СтрокаОбращенияИзКода + ".";
	КонецЕсли;
	ПолучитьНачалоИКонецВызова(СтрокаТекста, СтрокаПоиска, НоваяСтрокаТекста, НачалоВызова, КонецВызова, ОпорныйСимвол);
	
	Если НачалоВызова = 0 Или КонецВызова = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Пока Истина Цикл
		
		ТекстВызова = Лев(НоваяСтрокаТекста, КонецВызова);
		
		Если НомерСтроки = 0 Тогда
			НомерСтроки = НомерСтроки(ИсходнаяСтрока, НачалоВызова, НомерСтроки);
		Иначе
			НомерСтроки = НомерСтроки(СтрокаТекста, НачалоВызова, НомерСтроки);
		КонецЕсли;
		
		Если Не ЭтоКомментарий(СтрокаТекста, НачалоВызова)
			И Не ЭтоСтрока(СтрокаТекста, НачалоВызова)
			И СтрНайти(ТекстВызова, Символы.ПС) = 0
			И СтрНайти(Сред(НоваяСтрокаТекста, 0, КонецВызова), " ") = 0
			И (СокрЛП(ОпорныйСимвол) <> ОпорныйСимвол
			Или ОпорныйСимвол = "(") Тогда
			
			СтрокаСвязиМеждуОбъектамиПодсистем = СвязиМеждуОбъектамиПодсистем.Добавить();
			СтрокаСвязиМеждуОбъектамиПодсистем.МестоВызова = "строка " + НомерСтроки + ": " + ТекстВызова;
			СтрокаСвязиМеждуОбъектамиПодсистем.ВызываемаяПодсистема = ВызываемаяПодсистема;
			СтрокаСвязиМеждуОбъектамиПодсистем.ВызывающаяПодсистема = ВызывающаяПодсистема;
			СтрокаСвязиМеждуОбъектамиПодсистем.ВызывающийОбъект     = ПолноеИмяВызывающегоОбъекта;
		КонецЕсли;
		
		СтрокаТекста = Сред(НоваяСтрокаТекста, КонецВызова);
		НоваяСтрокаТекста = "";
		ПолучитьНачалоИКонецВызова(СтрокаТекста, СтрокаПоиска, НоваяСтрокаТекста, НачалоВызова, КонецВызова, ОпорныйСимвол);
		Если НачалоВызова = 0 Или КонецВызова = 0 Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьПоискПоПолномуИмениОбъекта(ВызывающаяПодсистема, ВызываемаяПодсистема, ПолноеИмяВызывающегоОбъекта, ИсходнаяСтрока, ЭлементСоответствия)
	
	СтрокаТекста = ИсходнаяСтрока;
	Если Не ЭлементСоответствия.ВозможенВызовПоПолномуИмени Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаПоиска = ЭлементСоответствия.ПолноеИмяОМД;
	
	НачалоВызова = 0;
	КонецВызова = 0;
	НоваяСтрокаТекста = "";
	ОпорныйСимвол = " ";
	НомерСтроки = 0;
	
	Если СтрокаПоиска = "" Тогда
		Возврат;
	КонецЕсли;
	
	ПоискПоПолномуИмени = Истина;
	ПолучитьНачалоИКонецВызова(СтрокаТекста, СтрокаПоиска, НоваяСтрокаТекста, НачалоВызова, КонецВызова, ОпорныйСимвол);
	
	Если НачалоВызова = 0 Или КонецВызова = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Пока Истина Цикл
		
		ТекстВызова = Лев(НоваяСтрокаТекста, КонецВызова);
		
		Если Не ЭтоКомментарий(СтрокаТекста, НачалоВызова) 
			И (ОпорныйСимвол = " " Или ОпорныйСимвол = "." Или ОпорныйСимвол = """") Тогда
			
			Если НомерСтроки = 0 Тогда
				НомерСтроки = НомерСтроки(ИсходнаяСтрока, НачалоВызова, НомерСтроки);
			Иначе
				НомерСтроки = НомерСтроки(СтрокаТекста, НачалоВызова, НомерСтроки);
			КонецЕсли;
			
			СтрокаСвязиМеждуОбъектамиПодсистем = СвязиМеждуОбъектамиПодсистем.Добавить();
			СтрокаСвязиМеждуОбъектамиПодсистем.МестоВызова = "строка " + НомерСтроки + ": " + ТекстВызова;
			СтрокаСвязиМеждуОбъектамиПодсистем.ВызываемаяПодсистема = ВызываемаяПодсистема;
			СтрокаСвязиМеждуОбъектамиПодсистем.ВызывающаяПодсистема = ВызывающаяПодсистема;
			СтрокаСвязиМеждуОбъектамиПодсистем.ВызывающийОбъект     = ПолноеИмяВызывающегоОбъекта;
		КонецЕсли;
		
		СтрокаТекста = Сред(НоваяСтрокаТекста, КонецВызова);
		НоваяСтрокаТекста = "";
		ПоискПоПолномуИмени = Истина;
		ПолучитьНачалоИКонецВызова(СтрокаТекста, СтрокаПоиска, НоваяСтрокаТекста, НачалоВызова, КонецВызова, ОпорныйСимвол);
		Если НачалоВызова = 0 Или КонецВызова = 0 Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура НайтиОбращениеКМетаданнымВКодеМодулей(ВызывающаяПодсистема, ВызываемаяПодсистема, ПолноеИмяВызывающегоОбъекта, ИсходнаяСтрока, ЭлементСоответствия)
	
	МассивСтрокПоиска = Новый Массив;
	МассивСтрокПоиска.Добавить(ЭлементСоответствия.СтрокаОбращенияКМетаданным);
	МассивСтрокПоиска.Добавить(ЭлементСоответствия.АльтернативнаяСтрокаОбращенияКМетаданным);
	
	Для Каждого СтрокаПоиска Из МассивСтрокПоиска Цикл
		
		СтрокаТекста = ИсходнаяСтрока;
		НачалоВызова = 0;
		КонецВызова = 0;
		НоваяСтрокаТекста = "";
		ОпорныйСимвол = " ";
		НомерСтроки = 0;
		
		Если СтрокаПоиска = "" Тогда
			Возврат;
		КонецЕсли;
		
		ПолучитьНачалоИКонецВызова(СтрокаТекста, СтрокаПоиска, НоваяСтрокаТекста, НачалоВызова, КонецВызова, ОпорныйСимвол);
		
		Если НачалоВызова = 0 Или КонецВызова = 0 Тогда
			Возврат;
		КонецЕсли;
		
		Пока Истина Цикл
			
			ТекстВызова = Лев(НоваяСтрокаТекста, КонецВызова);
			
			Если Не ЭтоКомментарий(СтрокаТекста, НачалоВызова) Тогда
				
				Если НомерСтроки = 0 Тогда
					НомерСтроки = НомерСтроки(ИсходнаяСтрока, НачалоВызова, НомерСтроки);
				Иначе
					НомерСтроки = НомерСтроки(СтрокаТекста, НачалоВызова, НомерСтроки);
				КонецЕсли;
				
				СтрокаСвязиМеждуОбъектамиПодсистем = СвязиМеждуОбъектамиПодсистем.Добавить();
				СтрокаСвязиМеждуОбъектамиПодсистем.МестоВызова = "строка " + НомерСтроки + ": " + ТекстВызова;
				СтрокаСвязиМеждуОбъектамиПодсистем.ВызываемаяПодсистема = ВызываемаяПодсистема;
				СтрокаСвязиМеждуОбъектамиПодсистем.ВызывающаяПодсистема = ВызывающаяПодсистема;
				СтрокаСвязиМеждуОбъектамиПодсистем.ВызывающийОбъект     = ПолноеИмяВызывающегоОбъекта;
			КонецЕсли;
			
			СтрокаТекста = Сред(НоваяСтрокаТекста, КонецВызова);
			НоваяСтрокаТекста = "";
			ПолучитьНачалоИКонецВызова(СтрокаТекста, СтрокаПоиска, НоваяСтрокаТекста, НачалоВызова, КонецВызова, ОпорныйСимвол);
			Если НачалоВызова = 0 Или КонецВызова = 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПоискВызововВМетаданныхКонфигурации(ПроверяемыеСвойстваОбъектовМетаданных, ПринадлежностьОбъектаПодсистеме)
	
	Для Каждого СтрокаОбъектМетаданных Из ПроверяемыеСвойстваОбъектовМетаданных.Строки Цикл
		
		Для Каждого ВидСвойства Из СтрокаОбъектМетаданных.Строки Цикл
			
			Для Каждого СвойствоОбъекта Из ВидСвойства.Строки Цикл
				
				ПроверяемыйВидСвойства = ВидСвойства.ВидСвойства;
				ПроверяемоеСвойство = СвойствоОбъекта.Свойство;
				ТипСвойства = СвойствоОбъекта.Тип;
				
				Для Каждого ОбъектМетаданных Из Метаданные[СтрокаОбъектМетаданных.ОбъектМетаданных] Цикл
					
					ВызывающийОбъект = ОбъектМетаданных.ПолноеИмя();
					Если СтрНайти(ВызывающийОбъект, "_Демо") > 0 Тогда
						Продолжить;
					КонецЕсли;
					
					НайденнаяСтрока = ПринадлежностьОбъектаПодсистеме.Найти(ВызывающийОбъект);
					
					Если НайденнаяСтрока = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					ЭтоОбъектПодсистемыВМоделиСервиса = (СтрНайти(НайденнаяСтрока.Подсистема, "ВМоделиСервиса") > 0);
					// Зависимости объектов подсистем ВМоделиСервиса не проверяются.
					Если ЭтоОбъектПодсистемыВМоделиСервиса Тогда
						Продолжить;
					КонецЕсли;
					
					ВызывающаяПодсистема = НайденнаяСтрока.Подсистема;
					ВызываемыеПодсистемы = ПоискВызываемыхПодсистем(ПринадлежностьОбъектаПодсистеме, ОбъектМетаданных, ПроверяемыйВидСвойства, ПроверяемоеСвойство, ТипСвойства);
					
					Если ВызываемыеПодсистемы = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					Для Каждого СтрокаТаблицы Из ВызываемыеПодсистемы Цикл
						
						СтрокаВызываемаяПодсистема = СтрокаТаблицы.ДанныеПодсистемы;
						ВызываемаяПодсистема = СтрокаВызываемаяПодсистема.Подсистема;
						Если ВызывающаяПодсистема = ВызываемаяПодсистема Тогда
							Продолжить; // Вызов в пределах одной подсистемы.
						КонецЕсли;
						
						НайденнаяПодсистема = ЗависимостиПодсистем.Найти(ВызываемаяПодсистема, "Имя");
						Если НайденнаяПодсистема <> Неопределено И НайденнаяПодсистема.Обязательная Тогда
							Продолжить; // Вызываемая подсистема обязательная.
						КонецЕсли;
						
						СтрокаВызывающаяПодсистема = ЗависимостиПодсистем.Найти(ВызывающаяПодсистема, "Имя");
						Если СтрокаВызывающаяПодсистема <> Неопределено
							И СтрокаВызывающаяПодсистема.УсловноЗависитОтПодсистем.Найти("*") <> Неопределено Тогда
							Прервать; // Зависимости для данной подсистемы не проверяются.
						КонецЕсли;
						
						Если СтрокаВызывающаяПодсистема <> Неопределено
							И (СтрокаВызывающаяПодсистема.ЗависитОтПодсистем.Найти(ВызываемаяПодсистема) <> Неопределено
							   Или СтрокаВызывающаяПодсистема.УсловноЗависитОтПодсистем.Найти(ВызываемаяПодсистема) <> Неопределено) Тогда
							Продолжить; // Зависимость между данными подсистемами документирована.
						КонецЕсли;
						
						СтрокаСвязиМеждуОбъектамиПодсистем = СвязиМеждуОбъектамиПодсистем.Добавить();
						СтрокаСвязиМеждуОбъектамиПодсистем.МестоВызова = ПроверяемыйВидСвойства + "."
							+ ?(ПустаяСтрока(СтрокаТаблицы.ИмяРеквизита), ПроверяемоеСвойство, СтрокаТаблицы.ИмяРеквизита);
						СтрокаСвязиМеждуОбъектамиПодсистем.ВызываемаяПодсистема = ВызываемаяПодсистема;
						СтрокаСвязиМеждуОбъектамиПодсистем.ВызывающаяПодсистема = ВызывающаяПодсистема;
						СтрокаСвязиМеждуОбъектамиПодсистем.ВызывающийОбъект     = ВызывающийОбъект;
						СтрокаСвязиМеждуОбъектамиПодсистем.ВызываемыйОбъект     = СтрокаТаблицы.ВызываемыйОбъект;
						
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Вспомогательные действия

Функция ПоискВызываемыхПодсистем(ПринадлежностьОбъектаПодсистеме, ОбъектМетаданных, ПроверяемыйВидСвойства, ПроверяемоеСвойство, ТипСвойства)
	
	ВызываемыеПодсистемы = Неопределено;
	Если ПроверяемыйВидСвойства = "Свойства" Тогда
		ПроверяемоеПоле = ОбъектМетаданных[ПроверяемоеСвойство];
		ВызываемыеПодсистемы = ПоискВызововВСвойствеОбъекта(ПринадлежностьОбъектаПодсистеме, ВызываемыеПодсистемы, ПроверяемоеПоле, ТипСвойства);
	ИначеЕсли ПроверяемыйВидСвойства = "Реквизиты"
		Или ПроверяемыйВидСвойства = "РеквизитыАдресации"
		Или ПроверяемыйВидСвойства = "Команды"
		Или ПроверяемыйВидСвойства = "Измерения"
		Или ПроверяемыйВидСвойства = "Ресурсы" Тогда
		
		Для Каждого ПроверяемыйРеквизит Из ОбъектМетаданных[ПроверяемыйВидСвойства] Цикл
			ПроверяемоеПоле = ПроверяемыйРеквизит[ПроверяемоеСвойство];
			ИмяРеквизита = ПроверяемыйРеквизит.Имя + "." + ПроверяемоеСвойство;
			ВызываемыеПодсистемы = ПоискВызововВСвойствеОбъекта(ПринадлежностьОбъектаПодсистеме, ВызываемыеПодсистемы, ПроверяемоеПоле, ТипСвойства, ИмяРеквизита);
		КонецЦикла;
		
	ИначеЕсли ПроверяемыйВидСвойства = "ТабличныеЧасти" Тогда
		
		ПроверяемыеСвойства = СтрРазделить(ПроверяемоеСвойство, ".", Ложь);
		Для Каждого ПроверяемаяТабличнаяЧасть Из ОбъектМетаданных[ПроверяемыйВидСвойства] Цикл
			Для Каждого ПроверяемыйРеквизит Из ПроверяемаяТабличнаяЧасть[ПроверяемыеСвойства[0]] Цикл
				ПроверяемоеПоле = ПроверяемыйРеквизит[ПроверяемыеСвойства[1]];
				ИмяРеквизита    = ПроверяемаяТабличнаяЧасть.Имя + "." + ПроверяемыйРеквизит.Имя + "." + ПроверяемыеСвойства[1];
				ВызываемыеПодсистемы = ПоискВызововВСвойствеОбъекта(ПринадлежностьОбъектаПодсистеме, ВызываемыеПодсистемы, ПроверяемоеПоле, ТипСвойства, ИмяРеквизита);
			КонецЦикла;
		КонецЦикла;
		
	ИначеЕсли ПроверяемоеСвойство = "Характеристики" Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ВызываемыеПодсистемы;
	
КонецФункции

Функция ПоискВызововВСвойствеОбъекта(ПринадлежностьОбъектаПодсистеме, ВызываемыеПодсистемы, ПроверяемоеПоле, ТипСвойства, ИмяРеквизита = Неопределено)
	
	РеквизитЛюбаяСсылка = Метаданные.Отчеты.ИнструментыРазработчикаЗависимостиПодсистем.Реквизиты.ЛюбаяСсылка.Тип;
	
	СтрокаВызываемыеПодсистемы = Неопределено;
	Если ВызываемыеПодсистемы = Неопределено Тогда
		ВызываемыеПодсистемы = Новый ТаблицаЗначений;
		ВызываемыеПодсистемы.Колонки.Добавить("ДанныеПодсистемы");
		ВызываемыеПодсистемы.Колонки.Добавить("ВызываемыйОбъект");
		ВызываемыеПодсистемы.Колонки.Добавить("ИмяРеквизита");
	КонецЕсли;
	
	Если ПроверяемоеПоле = Неопределено Тогда
		Возврат ВызываемыеПодсистемы;
	КонецЕсли;
	
	Если ТипСвойства = "ОписаниеТипов" Тогда
		
		Если РеквизитЛюбаяСсылка = ПроверяемоеПоле Тогда
			Возврат ВызываемыеПодсистемы;
		КонецЕсли;
		
		Для Каждого ОпределяемыйТип Из Метаданные.ОпределяемыеТипы Цикл
			Если ПроверяемоеПоле = ОпределяемыйТип.Тип Тогда
				Возврат ВызываемыеПодсистемы;
			КонецЕсли;
		КонецЦикла;
		
		МассивТиповОбъекта = ПроверяемоеПоле.Типы();
		Если ГрупповойВыборТипов(МассивТиповОбъекта) Тогда
			Возврат ВызываемыеПодсистемы;
		КонецЕсли;
		
		Для Каждого ТипОбъекта Из МассивТиповОбъекта Цикл
			
			ВызываемыйОМД = Метаданные.НайтиПоТипу(ТипОбъекта);
			Если ВызываемыйОМД <> Неопределено Тогда
				ПолноеИмяВызываемогоОМД = ВызываемыйОМД.ПолноеИмя();
				ЗаполнитьВызываемыеВМетаданныхПодсистемы(ВызываемыеПодсистемы, ПринадлежностьОбъектаПодсистеме, ПолноеИмяВызываемогоОМД, ИмяРеквизита);
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ТипСвойства = "КоллекцияЗначенийСвойстваОбъектаМетаданных" Тогда
		
		Для Каждого ОбъектМетаданных Из ПроверяемоеПоле Цикл
			ПолноеИмяВызываемогоОМД = ОбъектМетаданных.ПолноеИмя();
			ЗаполнитьВызываемыеВМетаданныхПодсистемы(ВызываемыеПодсистемы, ПринадлежностьОбъектаПодсистеме, ПолноеИмяВызываемогоОМД, ИмяРеквизита);
		КонецЦикла;
		
	ИначеЕсли ТипСвойства = "Строка"
		Или ТипСвойства = "ОбъектМетаданных" Тогда
		
		Если ТипСвойства = "ОбъектМетаданных" Тогда
			ПолноеИмяВызываемогоОМД = ПроверяемоеПоле.ПолноеИмя();
		Иначе
			ИмяОбъектаМетаданных = СтрРазделить(ПроверяемоеПоле, ".", Ложь)[0];
			ПолноеИмяВызываемогоОМД = "ОбщийМодуль." + ИмяОбъектаМетаданных;
		КонецЕсли;
		ЗаполнитьВызываемыеВМетаданныхПодсистемы(ВызываемыеПодсистемы, ПринадлежностьОбъектаПодсистеме, ПолноеИмяВызываемогоОМД, ИмяРеквизита);
		
	ИначеЕсли ТипСвойства = "СоставФункциональнойОпции" Тогда
		
		Для Каждого ЭлементСоставаФО Из ПроверяемоеПоле Цикл
			
			Если ЭлементСоставаФО.Объект = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ПолноеИмяВызываемогоОМД = ЭлементСоставаФО.Объект.ПолноеИмя();
			ЗаполнитьВызываемыеВМетаданныхПодсистемы(ВызываемыеПодсистемы, ПринадлежностьОбъектаПодсистеме, ПолноеИмяВызываемогоОМД, ИмяРеквизита);
			
		КонецЦикла;
		
	ИначеЕсли ТипСвойства = "Картинка" Тогда
		
		Если ПроверяемоеПоле.Вид <> ВидКартинки.Пустая Тогда
			ПолноеИмяВызываемогоОМД = КоллекцияКартинок[XMLСтрока(ПроверяемоеПоле.ПолучитьДвоичныеДанные())];
			Если ПолноеИмяВызываемогоОМД <> Неопределено Тогда
				ЗаполнитьВызываемыеВМетаданныхПодсистемы(ВызываемыеПодсистемы, ПринадлежностьОбъектаПодсистеме, ПолноеИмяВызываемогоОМД, ИмяРеквизита);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВызываемыеПодсистемы;
	
КонецФункции

Процедура ЗаполнитьВызываемыеВМетаданныхПодсистемы(ВызываемыеПодсистемы, ПринадлежностьОбъектаПодсистеме, ПолноеИмяВызываемогоОМД, ИмяРеквизита)
	
	ПолноеИмяПоЧастям = СтрРазделить(ПолноеИмяВызываемогоОМД, ".", Ложь);
	Если ПолноеИмяПоЧастям.Количество() > 2 Тогда
		ПолноеИмяВызываемогоОМД = ПолноеИмяПоЧастям[0] + "." + ПолноеИмяПоЧастям[1];
	КонецЕсли;
	
	СтрокаВызываемаяПодсистема = ПринадлежностьОбъектаПодсистеме.Найти(ПолноеИмяВызываемогоОМД, "ПолноеИмяОМД");
	Если СтрокаВызываемаяПодсистема <> Неопределено Тогда
		СтрокаВызываемыеПодсистемы = ВызываемыеПодсистемы.Добавить();
		СтрокаВызываемыеПодсистемы.ДанныеПодсистемы = СтрокаВызываемаяПодсистема;
		СтрокаВызываемыеПодсистемы.ВызываемыйОбъект = ПолноеИмяВызываемогоОМД;
		СтрокаВызываемыеПодсистемы.ИмяРеквизита = ИмяРеквизита;
	КонецЕсли;
	
КонецПроцедуры

Функция ГрупповойВыборТипов(МассивТиповОбъекта)
	
	КоличествоВыбранныхОбъектов = Новый Соответствие;
	
	Для Каждого ЭлементМассива Из МассивТиповОбъекта Цикл
		
		Если ЭлементМассива = Тип("КонстантыНабор") Тогда
			Возврат Истина;
		КонецЕсли;
		ОбъектМетаданных = Метаданные.НайтиПоТипу(ЭлементМассива);
		Если ОбъектМетаданных = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ОбъектМетаданныхПолноеИмя = ОбъектМетаданных.ПолноеИмя();
		ВидОбъекта = СтрРазделить(ОбъектМетаданныхПолноеИмя, ".", Ложь)[0];
		Если ВидОбъекта = "Справочник" Тогда
			ВидОбъекта = "Справочники";
		ИначеЕсли ВидОбъекта = "Документ" Тогда
			ВидОбъекта = "Документы";
		ИначеЕсли ВидОбъекта = "Перечисление" Тогда
			ВидОбъекта = "Перечисления";
		ИначеЕсли ВидОбъекта = "ПланВидовХарактеристик" Тогда
			ВидОбъекта = "ПланыВидовХарактеристик";
		ИначеЕсли ВидОбъекта = "ПланСчетов" Тогда
			ВидОбъекта = "ПланыСчетов";
		ИначеЕсли ВидОбъекта = "ПланВидовРасчета" Тогда
			ВидОбъекта = "ПланыВидовРасчета";
		ИначеЕсли ВидОбъекта = "Справочник" Тогда
			ВидОбъекта = "Справочники";
		ИначеЕсли ВидОбъекта = "БизнесПроцесс" Тогда
			ВидОбъекта = "БизнесПроцессы";
		ИначеЕсли ВидОбъекта = "Задача" Тогда
			ВидОбъекта = "Задачи";
		ИначеЕсли ВидОбъекта = "ПланОбмена" Тогда
			ВидОбъекта = "ПланыОбмена";
		КонецЕсли;
		
		Количество = КоличествоВыбранныхОбъектов[ВидОбъекта];
		Если Количество = Неопределено Тогда
			КоличествоВыбранныхОбъектов.Вставить(ВидОбъекта, 1);
		Иначе
			КоличествоВыбранныхОбъектов.Вставить(ВидОбъекта, Количество+1);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаСоответствия Из КоличествоВыбранныхОбъектов Цикл
		
		Если СтрокаСоответствия.Значение = Метаданные[СтрокаСоответствия.Ключ].Количество() Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Процедура ВыгрузитьМодулиВФайлы()
	
#Если Не ВебКлиент Тогда
	СтрокаЗапускаПлатформы = КаталогПрограммы() + "1cv8.exe";
	КаталогКонфигурации = КаталогИБ;
	Пользователь = ИмяАдминистратораИБ;
	Пароль = "";
	КоманднаяСтрока = СтрокаЗапускаПлатформы + " DESIGNER /F"""
				  + КаталогКонфигурации + """ /N"""
				  + Пользователь + """ /P""" + Пароль
				  + """ /DumpConfigFiles """ + КаталогВыгрузкиМодулей
				  + """ -Module";
				  
	ЗапуститьПриложение(КоманднаяСтрока,,Истина);
#КонецЕсли
	
КонецПроцедуры

Процедура ПолучитьНачалоИКонецВызова(СтрокаТекста, СтрокаПоиска, НоваяСтрокаТекста, НачалоВызова, КонецВызова, ОпорныйСимвол)
	
	НачалоВызова = СтрНайти(СтрокаТекста, СтрокаПоиска);
	Если НачалоВызова = 0 Тогда
		ПоискПоПолномуИмени = Ложь;
		Возврат;
	КонецЕсли;
	
	ОпорныйСимвол = Сред(СтрокаТекста, НачалоВызова-1,1);
	
	НоваяСтрокаТекста = Прав(СтрокаТекста, СтрДлина(СтрокаТекста) - НачалоВызова + 1);
	Если СтрНайти(СтрокаПоиска, "Метаданные.") > 0
		Или СтрНайти(СтрокаПоиска, "БиблиотекаКартинок.") > 0
		Или СтрНайти(СтрокаПоиска, "ЦветаСтиля.") > 0
		Или СтрНайти(СтрокаПоиска, "ШрифтыСтиля.") > 0
		Или СтрНайти(СтрокаПоиска, "ПараметрыСеанса.") > 0
		Или ПоискПоПолномуИмени Тогда
		КонецВызова = СтрДлина(СтрокаПоиска);
	Иначе
		КонецВызова = СтрНайти(НоваяСтрокаТекста, "(");
	КонецЕсли;
	
	Если ПоискПоПолномуИмени Тогда
		ОпорныйСимвол = Сред(НоваяСтрокаТекста, СтрДлина(СтрокаПоиска)+1,1);
		ПоискПоПолномуИмени = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Функция ЭтоКомментарий(СтрокаТекста, НачалоВызова)
	
	Отступ = 1;
	Пока СтрНайти(Сред(СтрокаТекста, НачалоВызова-Отступ, Отступ), Символы.ПС) = 0 Цикл
		Отступ = Отступ + 1;
	КонецЦикла;
	
	Если СтрНайти(Сред(СтрокаТекста, НачалоВызова-Отступ, Отступ), "//") > 0 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ЭтоСтрока(СтрокаТекста, НачалоВызова)
	
	Отступ = 1;
	Пока СтрНайти(Сред(СтрокаТекста, НачалоВызова-Отступ, Отступ), Символы.ПС) = 0 Цикл
		Отступ = Отступ + 1;
	КонецЦикла;
	
	Если СтрНайти(Сред(СтрокаТекста, НачалоВызова-Отступ, Отступ), "НСтр") > 0 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Процедура ВырезатьДемоПримерыИзКода(СтрокаТекста)
	
	ПризнакРедактирования = СтрНайти(СтрокаТекста, "// _Демо начало примера");
	Пока ПризнакРедактирования > 0 Цикл
		
		ПозицияПоследнегоСимволаПримера = СтрНайти(СтрокаТекста, "// _Демо конец примера") + СтрДлина("// _Демо конец примера");
		СтрокаТекста = Лев(СтрокаТекста,ПризнакРедактирования-1) + Сред(СтрокаТекста,ПозицияПоследнегоСимволаПримера);
		ПризнакРедактирования = СтрНайти(СтрокаТекста, "// _Демо начало примера");
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьВидыСвойств()
	
	ВидыСвойств = Новый Массив;
	ВидыСвойств.Добавить("ОбъектМетаданных:");
	ВидыСвойств.Добавить("Свойства:");
	ВидыСвойств.Добавить("Реквизиты:");
	ВидыСвойств.Добавить("РеквизитыАдресации:");
	ВидыСвойств.Добавить("ТабличныеЧасти:");
	ВидыСвойств.Добавить("Команды:");
	ВидыСвойств.Добавить("Характеристики:");
	ВидыСвойств.Добавить("ПризнакиУчета:");
	ВидыСвойств.Добавить("ПризнакУчетаСубконтоПланаСчетов:");
	ВидыСвойств.Добавить("Измерения:");
	ВидыСвойств.Добавить("Ресурсы:");
	
КонецПроцедуры

Функция НачалоНовогоБлока(ТекстСтроки)
	
	Если СтрНайти(ТекстСтроки, "ОбъектМетаданных: ") > 0 Тогда
		Возврат Истина;
	Иначе
		Возврат ВидыСвойств.Найти(ТекстСтроки) <> Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьПараметрыЗапуска()
	
	ИмяАдминистратораИБ = ПользователиИнформационнойБазы.ТекущийПользователь().Имя;
	СтрокаСоединения = СтрокаСоединенияИнформационнойБазы();
	КаталогИБ = КаталогИнформационнойБазы(СтрокаСоединенияИнформационнойБазы());
	
	ТекущаяДата = ТекущаяДатаСеанса();
	
	КаталогВыгрузкиМодулей = КаталогВременныхФайлов() + "\ВыгрузкаМодулей" + Строка(Год(ТекущаяДата)) + Строка(Месяц(ТекущаяДата)) + Строка(День(ТекущаяДата)) 
		+ Строка(Час(ТекущаяДата)) + Строка(Минута(ТекущаяДата)) + Строка(Секунда(ТекущаяДата));
	ФайловаяБаза = СтрНайти(СтрокаСоединения, "File=");
	
	Если ФайловаяБаза = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru ='Данный отчет предназначен для использования с файловой базой'"));
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьСозданиеТаблиц()
	
	СвязиМеждуОбъектамиПодсистем = Новый ТаблицаЗначений;
	СвязиМеждуОбъектамиПодсистем.Колонки.Добавить("ВызывающаяПодсистема");
	СвязиМеждуОбъектамиПодсистем.Колонки.Добавить("ВызывающийОбъект");
	СвязиМеждуОбъектамиПодсистем.Колонки.Добавить("ВызываемаяПодсистема");
	СвязиМеждуОбъектамиПодсистем.Колонки.Добавить("ВызываемыйОбъект");
	СвязиМеждуОбъектамиПодсистем.Колонки.Добавить("МестоВызова");
	
КонецПроцедуры

Процедура ПрименитьСписокИсключений()
	
	Для Каждого СтрокаИсключения Из ТаблицаИсключений Цикл
		ПараметрыОтбора = Новый Структура();
		
		Если СтрокаИсключения.ИсключаемыйОбъект <> Неопределено Тогда
			ПараметрыОтбора.Вставить("ВызывающийОбъект", СтрокаИсключения.ИсключаемыйОбъект);
			НайденныеСтроки = СвязиМеждуОбъектамиПодсистем.НайтиСтроки(ПараметрыОтбора);
		Иначе
			ПараметрыОтбора.Вставить("ВызывающаяПодсистема", СтрокаИсключения.ВызывающаяПодсистема);
			ПараметрыОтбора.Вставить("ВызываемаяПодсистема", СтрокаИсключения.ВызываемаяПодсистема);
			ПараметрыОтбора.Вставить("ВызывающийОбъект", СтрокаИсключения.ВызывающийОбъект);
			НайденныеСтроки = СвязиМеждуОбъектамиПодсистем.НайтиСтроки(ПараметрыОтбора);
		КонецЕсли;
		
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			СвязиМеждуОбъектамиПодсистем.Удалить(НайденнаяСтрока);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция НомерСтроки(СтрокаТекста, НачалоВызова, НомерСтроки)
	
	НомерСтроки = НомерСтроки + СтрЧислоВхождений(Лев(СтрокаТекста, НачалоВызова), Символы.ПС) + ?(НомерСтроки = 0, 1, 0);
	
	Возврат НомерСтроки;
	
КонецФункции

Процедура ЗаполнитьПроверяемыеНаАвтономностьОбъекты()
	
	ПроверяемыеНаАвтономностьОбъекты = Новый Массив;
	
	ТабличныйДокумент = Отчеты.ИнструментыРазработчикаЗависимостиПодсистем.ПолучитьМакет("ПроверяемыеОбработки");
	
	ТекстСтроки = Неопределено;
	НомерСтроки   = 0;
	
	Пока ТекстСтроки <> "КонецТаблицы" Цикл
		
		ТекстСтроки = ТабличныйДокумент.Область(НомерСтроки,1).Текст;
		Если ПустаяСтрока(ТекстСтроки) Или ТекстСтроки = "Проверять следующие обработки/отчеты на автономность:"
			Или ТекстСтроки = "КонецТаблицы" Тогда
			НомерСтроки = НомерСтроки+1;
			Продолжить;
		КонецЕсли;
		
		ПроверяемыеНаАвтономностьОбъекты.Добавить(ТекстСтроки);
		
		НомерСтроки = НомерСтроки+1;
		
	КонецЦикла;
	
КонецПроцедуры

// Проверки возможности формирования отчета.

Функция ОткрытКонфигуратор()
	Сеансы = ПолучитьСеансыИнформационнойБазы();
	Для Каждого Сеанс Из Сеансы Цикл
		Если ВРег(Сеанс.ИмяПриложения) = "DESIGNER" Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
КонецФункции

Функция ТекстСообщенияНеобходимоЗакрытьКонфигуратор()
	Возврат НСтр("ru = 'Для корректной работы отчета необходимо закрыть конфигуратор
		|и другие соединения, которые могут препятствовать выгрузке файлов конфигурации.
		|Текущий сеанс завершать не нужно.'");
КонецФункции

#КонецОбласти

#КонецЕсли