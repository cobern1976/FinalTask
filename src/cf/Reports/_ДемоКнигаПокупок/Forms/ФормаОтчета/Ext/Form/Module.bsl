#Область ОписаниеПеременных

// СтандартныеПодсистемы.РаботаСКонтрагентами
&НаКлиенте
Перем ПроверкаКонтрагентовПараметрыОбработчикаОжидания Экспорт;
// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПятьДней = 5 * 60 * 60 * 24;
	Отчет.НачалоПериода = ТекущаяДатаСеанса() - ПятьДней;
	Отчет.КонецПериода 	= ТекущаяДатаСеанса() + ПятьДней;
	
	Элементы.СписокВыбораЛиста.Видимость = Ложь;
	ИмяРазделаБезРазделителей = НСтр("ru = 'Все разделы'");
	
	КоличествоСтрокВБлоке 	= 5;
	ОтчетСРазделами			= Истина;
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриСозданииНаСервереОтчет(ЭтотОбъект, ОтчетСРазделами);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ОтчетПриОткрытии(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НачалоПериодаПриИзменении(Элемент)

	СброситьАктуальностьОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура КонецПериодаПриИзменении(Элемент)
	
	СброситьАктуальностьОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбораЛистаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// Предотвращаем ввод произвольного значения в список выбора.
	ЭлементСписка = Элемент.СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение);
	Если ЭлементСписка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НовоеЗначение = Элементы.СписокВыбораЛиста.СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение).Представление;
	
	// Переформировываем отчет всегда, если
	// - выбран элемент списка "Все разделы"
	// - сейчас отчет сформирован без разделов, а надо переформировать с разделами.
	НеобходимоПереформироватьОтчет = ВыбранноеЗначение = ИмяРазделаБезРазделителей
		ИЛИ ВыбранноеЗначение <> ИмяРазделаБезРазделителей И НЕ ОтчетСРазделами;

	Если НеобходимоПереформироватьОтчет Тогда
		
		Если СписокВыбораЛиста <> НовоеЗначение Тогда
			
			// Обновляем значения настроек.
			ОтчетСРазделами = ВыбранноеЗначение <> ИмяРазделаБезРазделителей;
			
			// Выполняем после присваивания новых значений,
			// поскольку новые значения влияют на инициализацию реквизитов.
			ИнициализироватьРеквизитыФормыОтчета();
			
			СформироватьОтчет();
			
			СписокВыбораЛиста = НовоеЗначение;
			
			Если ОтчетСРазделами Тогда
				
				ПоказатьВыбранныйЛист(ЭлементСписка.Значение);

			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ПоказатьВыбранныйЛист(ЭлементСписка.Значение);

		// СтандартныеПодсистемы.РаботаСКонтрагентами
		ПроверкаКонтрагентовКлиентСервер.ВывестиНужнуюПанельПроверкиКонтрагентовВОтчете(ЭтотОбъект);
		// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
		
		СписокВыбораЛиста = НовоеЗначение;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СформироватьОтчетКоманда(Команда)
	
	СформироватьОтчет();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура СформироватьОтчетНаСервере()

	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПередФормированиемОтчета(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

	// Формирование отчета
	РезультатФормированияОтчета.Очистить();
	Результат.Очистить();
	ПараметрыОтчета = ПодготовитьПараметрыОтчета(Истина);
	АдресХранилища 	= ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
	Отчеты._ДемоКнигаПокупок.СформироватьОтчет(ПараметрыОтчета, АдресХранилища);
	
	ЗагрузитьПодготовленныеДанные();
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьПараметрыОтчета(ЭтоПервоеФормированиеОтчета) Экспорт

	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("НачалоПериода",				Отчет.НачалоПериода);
	ПараметрыОтчета.Вставить("КонецПериода",				Отчет.КонецПериода);
	ПараметрыОтчета.Вставить("ВидОтчета", 					Отчеты._ДемоКнигаПокупок);
	ПараметрыОтчета.Вставить("РезультатФормированияОтчета");
	ПараметрыОтчета.Вставить("ОтчетСРазделами", 			ОтчетСРазделами);
	ПараметрыОтчета.Вставить("КоличествоСтрокВБлоке",		КоличествоСтрокВБлоке);
	
	Если ОтчетСРазделами Тогда
		
		// СтандартныеПодсистемы.РаботаСКонтрагентами
		ПроверкаКонтрагентов.ДобавитьПараметрыДляПроверкиКонтрагентов(ЭтотОбъект, ПараметрыОтчета, 
			ЭтоПервоеФормированиеОтчета);
		// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
		
	Иначе
		
		// СтандартныеПодсистемы.РаботаСКонтрагентами
		ПроверкаКонтрагентов.ДобавитьПараметрыДляПроверкиКонтрагентов(ЭтотОбъект, ПараметрыОтчета, 
			ЭтоПервоеФормированиеОтчета, РезультатФормированияОтчета);
		// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
		
	КонецЕсли;
	
	Возврат ПараметрыОтчета;

КонецФункции

&НаСервере
Процедура ЗагрузитьПодготовленныеДанные()

	РезультатВыполнения = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Если ОтчетСРазделами Тогда
		
		// СтандартныеПодсистемы.РаботаСКонтрагентами
		ПроверкаКонтрагентов.ЗапомнитьРезультатФормированияОтчета(ЭтотОбъект, РезультатВыполнения, АдресХранилища);
		// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

		// СтандартныеПодсистемы.РаботаСКонтрагентами
		РазделыОтчета = ПроверкаКонтрагентов.РазделыОтчетаВФорме(ЭтотОбъект, РезультатВыполнения, Ложь);
		// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
		
		УправлениеСпискомРазделов(РазделыОтчета);
		
	Иначе
		
		РезультатФормированияОтчета = РезультатВыполнения.РезультатФормированияОтчета;
		ПоказатьВыбранныйЛист();
		
		// СтандартныеПодсистемы.РаботаСКонтрагентами
		ПроверкаКонтрагентов.ЗапомнитьРезультатФормированияОтчета(ЭтотОбъект, РезультатВыполнения);
		// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьВыбранныйЛист(НомерРаздела = Неопределено)
	
	Если НомерРаздела = Неопределено Тогда

		// СтандартныеПодсистемы.РаботаСКонтрагентами
		ПроверкаКонтрагентов.ВывестиОтчет(ЭтотОбъект, Результат, РезультатФормированияОтчета);
		// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
		
	Иначе
		
		ТекущийНомерРаздела = НомерРаздела;

		// СтандартныеПодсистемы.РаботаСКонтрагентами
		ПроверкаКонтрагентов.ВывестиРазделОтчета(ЭтотОбъект, Результат, ТекущийНомерРаздела);
		// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
		
	КонецЕсли;

	Результат.ЧерноБелаяПечать = Истина;

КонецПроцедуры

&НаСервере
Процедура ПереключитьРежимОтображенияОтчета()
	
	Если ОтчетСРазделами Тогда
		// СтандартныеПодсистемы.РаботаСКонтрагентами
		ПроверкаКонтрагентов.ПереключитьРежимОтображенияРазделаОтчета(ЭтотОбъект, Результат, ТекущийНомерРаздела);
		// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	Иначе
		// СтандартныеПодсистемы.РаботаСКонтрагентами
		ПроверкаКонтрагентов.ПереключитьРежимОтображенияОтчета(ЭтотОбъект, Результат, РезультатФормированияОтчета);
		// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьРеквизитыФормыОтчета() Экспорт
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ИнициализироватьРеквизитыФормыОтчета(ЭтотОбъект, ОтчетСРазделами);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчет()
	
	СформироватьОтчетНаСервере();
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВОтчете(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

&НаСервере
Процедура УправлениеСпискомРазделов(РазделыОтчета = Неопределено)

	Элементы.СписокВыбораЛиста.СписокВыбора.Очистить();
	ЕстьРазделы = РазделыОтчета <> Неопределено И РазделыОтчета.Количество() > 0;
	
	Если ЕстьРазделы Тогда
		
		// Заполняем разделами плюс пункт "Все разделы"
		Для Каждого СтрокаРаздела Из РазделыОтчета Цикл
			Элементы.СписокВыбораЛиста.СписокВыбора.Добавить(СтрокаРаздела.НомерРаздела, СтрокаРаздела.НазваниеРаздела);
		КонецЦикла;
		Элементы.СписокВыбораЛиста.СписокВыбора.Добавить(ИмяРазделаБезРазделителей, ИмяРазделаБезРазделителей);

		СписокВыбораЛиста = РазделыОтчета[0].НазваниеРаздела;
		ПоказатьВыбранныйЛист(РазделыОтчета[0].НомерРаздела);

	КонецЕсли;
	
	Элементы.СписокВыбораЛиста.Видимость = ЕстьРазделы;
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьАктуальностьОтчета()
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиентСервер.СброситьАктуальностьОтчета(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	Элементы.СписокВыбораЛиста.Видимость = Ложь;
	
	// Обновляем значения настроек.
	ОтчетСРазделами = Истина;
	
	// Выполняем после присваивания новых значений,
	// поскольку новые значения влияют на инициализацию реквизитов.
	ИнициализироватьРеквизитыФормыОтчета();
	
КонецПроцедуры

// СтандартныеПодсистемы.РаботаСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов()
	ПроверкаКонтрагентовКлиент.ПредложитьВключитьПроверкуКонтрагентов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

// СтандартныеПодсистемы.РаботаСКонтрагентами
&НаСервере
Процедура ПроверитьКонтрагентов() Экспорт
	
	ПараметрыОтчета = ПодготовитьПараметрыОтчета(Ложь);
	ПроверкаКонтрагентов.ПроверитьКонтрагентовВОтчете(ЭтотОбъект, ПараметрыОтчета);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

// СтандартныеПодсистемы.РаботаСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагентов()
	ПроверкаКонтрагентовКлиент.ОбработатьРезультатПроверкиКонтрагентовВОтчете(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

// СтандартныеПодсистемы.РаботаСКонтрагентами
&НаСервере
Процедура ОтобразитьРезультатПроверкиКонтрагента() Экспорт
	
	Если ОтчетСРазделами Тогда
		ПроверкаКонтрагентов.ОтобразитьРезультатПроверкиКонтрагентаВОтчете(ЭтотОбъект, Результат, Неопределено, ТекущийНомерРаздела);
	Иначе
		ПроверкаКонтрагентов.ОтобразитьРезультатПроверкиКонтрагентаВОтчете(ЭтотОбъект, Результат, РезультатФормированияОтчета);
	КонецЕсли;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

// СтандартныеПодсистемы.РаботаСКонтрагентами
&НаКлиенте
Процедура ПереключательРежимаОтображенияПриИзменении(Элемент)
	ПереключитьРежимОтображенияОтчета();
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

#КонецОбласти


