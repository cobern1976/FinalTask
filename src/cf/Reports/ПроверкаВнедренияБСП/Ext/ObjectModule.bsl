#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем ПроверяемаяПодсистема, КаталогВыгрузки, СоответствиеТерминов, ДеревоПодсистем, СоответствиеОбъектов, ДопустимыеМетаданные;

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Выполняет проверку внедрения. Заполняет табличную часть ТаблицаПроверки.
//
// Параметры:
//   КаталогВыгрузкиКонфигурации - Строка - Каталог выгрузки конфигурации в XML файлы.
//   ПараметрыПроверки - Структура со свойствами:
//      * РасширениеФайлаПроверки  - Строка - Возможные значения "xml" и "txt". При указании расширения результат
//                                            проверки записывается во временный файл с указанным расширением.
//      * ПолныйПутьКФайлуПроверки - Строка - Полное имя файла проверки с расширением.
//      * РезультатСтрокой         - Булево - Функция возвращает текст ошибок в виде строки. Вид строки зависит от расширения.
//
// ВозвращаемоеЗначение:
//   Строка - Если заполнен входящий параметр ПараметрыПроверки, то возвращается имя файла проверки или текст ошибок.
//
Функция ПроверитьВнедрение(КаталогВыгрузкиКонфигурации = "", ПараметрыПроверки = Неопределено) Экспорт
	
	ВыгрузитьКонфигурациюВXML(КаталогВыгрузкиКонфигурации);
	ЗаполнитьДанныеДляПроверки();
	
	ПроверяемыеПодсистемы = Новый Массив;
	ПриОпределенииПроверяемыхПодсистем(ПроверяемыеПодсистемы);
	
	Для Каждого Подсистема Из ПроверяемыеПодсистемы Цикл
		ПроверяемаяПодсистема = Метаданные.Подсистемы.СтандартныеПодсистемы.Подсистемы.Найти(Подсистема);
		Если ПроверяемаяПодсистема <> Неопределено Тогда
			ШаблонИмени = "Подключаемый_[ИмяПодсистемы]_ПроверитьВнедрение()";
			ИмяПроцедуры = СтрЗаменить(ШаблонИмени, "[ИмяПодсистемы]", Подсистема);
			Попытка
				Выполнить(ИмяПроцедуры);
			Исключение
				ДобавитьОшибку(ПроверяемаяПодсистема, НСтр("ru = 'Проверка внедрения подсистемы не выполнена'"),
					КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	Если ПустаяСтрока(КаталогВыгрузкиКонфигурации) Тогда
		УдалитьФайлы(КаталогВыгрузки);
	КонецЕсли;
	
	Возврат РезультатПроверки(ПараметрыПроверки);
	
КонецФункции

// Настройки общей формы отчета подсистемы "Варианты отчетов".
//
// Параметры:
//   Форма - УправляемаяФорма, Неопределено - Форма отчета или форма настроек отчета.
//       Неопределено когда вызов без контекста.
//   КлючВарианта - Строка, Неопределено - Имя предопределенного
//       или уникальный идентификатор пользовательского варианта отчета.
//       Неопределено когда вызов без контекста.
//   Настройки - Структура - см. возвращаемое значение
//       ОтчетыКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию().
//
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	Настройки.События.ПриОпределенииПараметровВыбора = Истина;
КонецПроцедуры

// Вызывается в форме отчета перед выводом настройки.
//
// Параметры:
//   Форма - УправляемаяФорма, Неопределено - Форма отчета.
//   СвойстваНастройки - Структура - Описание настройки отчета, которая будет выведена в форме отчета.
//       * ОписаниеТипов - ОписаниеТипов -
//           Тип настройки.
//       * ЗначенияДляВыбора - СписокЗначений -
//           Объекты, которые будут предложены пользователю в списке выбора.
//           Дополняет список объектов, уже выбранных пользователем ранее.
//       * ЗапросЗначенийВыбора - Запрос -
//           Возвращает объекты, которыми необходимо дополнить ЗначенияДляВыбора.
//           Первой колонкой (с 0м индексом) должен выбираться объект,
//           который следует добавить в ЗначенияДляВыбора.Значение.
//           Для отключения автозаполнения
//           в свойство ЗапросЗначенийВыбора.Текст следует записать пустую строку.
//       * ОграничиватьВыборУказаннымиЗначениями - Булево -
//           Когда Истина, то выбор пользователя будет ограничен значениями,
//           указанными в ЗначенияДляВыбора (его конечным состоянием).
//
// См. также:
//   ОтчетыПереопределяемый.ПриОпределенииПараметровВыбора().
//
Процедура ПриОпределенииПараметровВыбора(Форма, СвойстваНастройки) Экспорт
	ИмяПоля = Строка(СвойстваНастройки.ПолеКД);
	Если ИмяПоля = "ПодсистемаБСП" Тогда
		СвойстваНастройки.ОграничиватьВыборУказаннымиЗначениями = Истина;
		СвойстваНастройки.ЗначенияДляВыбора.Очистить();
		ИменаПодсистем = Новый Массив;
		ПриОпределенииПроверяемыхПодсистем(ИменаПодсистем);
		Для Каждого Имя Из ИменаПодсистем Цикл
			Подсистема = Метаданные.Подсистемы.СтандартныеПодсистемы.Подсистемы.Найти(Имя);
			СвойстваНастройки.ЗначенияДляВыбора.Добавить(Подсистема.Представление());
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ПриОпределенииПроверяемыхПодсистем(ПроверяемыеПодсистемы)
	
	ПроверяемыеПодсистемы.Добавить("БизнесПроцессыИЗадачи");
	ПроверяемыеПодсистемы.Добавить("ВариантыОтчетов");
	ПроверяемыеПодсистемы.Добавить("ВерсионированиеОбъектов");
	ПроверяемыеПодсистемы.Добавить("ДатыЗапретаИзменения");
	ПроверяемыеПодсистемы.Добавить("ДополнительныеОтчетыИОбработки");
	ПроверяемыеПодсистемы.Добавить("ЗаметкиПользователя");
	ПроверяемыеПодсистемы.Добавить("ЗапретРедактированияРеквизитовОбъектов");
	ПроверяемыеПодсистемы.Добавить("КонтактнаяИнформация");
	ПроверяемыеПодсистемы.Добавить("НапоминанияПользователя");
	ПроверяемыеПодсистемы.Добавить("НастройкаПорядкаЭлементов");
	ПроверяемыеПодсистемы.Добавить("ОбменДанными");
	ПроверяемыеПодсистемы.Добавить("ОбновлениеВерсииИБ");
	ПроверяемыеПодсистемы.Добавить("Печать");
	ПроверяемыеПодсистемы.Добавить("Пользователи");
	ПроверяемыеПодсистемы.Добавить("ПрефиксацияОбъектов");
	ПроверяемыеПодсистемы.Добавить("ПрисоединенныеФайлы");
	ПроверяемыеПодсистемы.Добавить("РассылкаОтчетов");
	ПроверяемыеПодсистемы.Добавить("Свойства");
	ПроверяемыеПодсистемы.Добавить("СтруктураПодчиненности");
	ПроверяемыеПодсистемы.Добавить("УправлениеДоступом");
	
КонецПроцедуры

Процедура Подключаемый_БизнесПроцессыИЗадачи_ПроверитьВнедрение()
	
	// Проверка предметов заданий
	МассивИсточников = Новый Массив;
	МассивИсточников.Добавить(СоставТипа("БизнесПроцессы.Задание.ВводитсяНаОсновании", "Задача.ЗадачаИсполнителя"));
	МассивИсточников.Добавить("ОпределяемыеТипы.ПредметЗадачи.Тип");
	СравнитьТипы(МассивИсточников);
	
	// Проверка наличия вставок кода в модулях менеджеров бизнес процессов
	ПроверяемыеВызовы = Новый Массив;
	ПроверяемыеВызовы.Добавить("Функция ФормаВыполненияЗадачи(");
	ПроверяемыеВызовы.Добавить("Процедура ПриПеренаправленииЗадачи(");
	ПроверяемыеВызовы.Добавить("Процедура ОбработкаВыполненияПоУмолчанию(");
	
	ПроверитьНаличиеВставкиКода("ОпределяемыеТипы.БизнесПроцесс.Тип", "МодульМенеджера", ПроверяемыеВызовы);
	
	// Проверка наличия предопределенного элемента ОтветственныйЗаКонтрольИсполнения в справочнике РолиИсполнителей.
	ПроверитьНаличиеПредопределенногоЭлемента("Справочники.РолиИсполнителей", "ОтветственныйЗаКонтрольИсполнения");
	
	// Проверка наличия предопределенного элемента ВсеОбъектыАдресации в ПВХ ОбъектыАдресацииЗадач.
	ПроверитьНаличиеПредопределенногоЭлемента("ПланыВидовХарактеристик.ОбъектыАдресацииЗадач", "ВсеОбъектыАдресации");
	
	// Проверка соответствия типов предопределенного объекта ВсеОбъектыАдресации и типов других объектов адресации.
	МассивИсточников = Новый Массив;
	МассивИсточников.Добавить(СоставТипа("ПланыВидовХарактеристик.ОбъектыАдресацииЗадач.Тип"));
	
	МассивМетаданных = Новый Массив;
	Для Каждого Тип Из ПланыВидовХарактеристик.ОбъектыАдресацииЗадач.ВсеОбъектыАдресации.ТипЗначения.Типы() Цикл
		МассивМетаданных.Добавить(Метаданные.НайтиПоТипу(Тип));
	КонецЦикла;
	МассивИсточников.Добавить(СоответствиеТипа("ПланыВидовХарактеристик.ОбъектыАдресацииЗадач.ВсеОбъектыАдресации",
		МассивМетаданных));
	
	МетаданныеОбъектовАдресации = Метаданные.ПланыВидовХарактеристик.ОбъектыАдресацииЗадач;
	ПредопределенныеОбъектыАдресации = МетаданныеОбъектовАдресации.ПолучитьИменаПредопределенных();
	МассивПредопределенных = Новый Массив;
	Для Каждого ИмяПредопределенногоЭлемента Из ПредопределенныеОбъектыАдресации Цикл
		Если ИмяПредопределенногоЭлемента = "ВсеОбъектыАдресации" Тогда
			Продолжить;
		КонецЕсли;
		ПредопределенныйЭлемент = ПланыВидовХарактеристик.ОбъектыАдресацииЗадач[ИмяПредопределенногоЭлемента];
		Для Каждого Тип Из ПредопределенныйЭлемент.ТипЗначения.Типы() Цикл
			МассивПредопределенных.Добавить(Метаданные.НайтиПоТипу(Тип));
		КонецЦикла;
	КонецЦикла;
	
	Если МассивМетаданных.Количество() <> 1 И МассивПредопределенных.Количество() <> 0 Тогда
		// Если используется более одного объекта авторизации.
		МассивИсточников.Добавить(СоответствиеТипа(НСтр("ru = 'Типы предопределенных объектов адресации'"), МассивПредопределенных));
	КонецЕсли;
	
	// Если есть хотя бы один объект адресации, то должна быть роль, в которой используются объекты адресации.
	Если МассивМетаданных.Количество() > 0 Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РолиИсполнителей.Наименование
		|ИЗ
		|	Справочник.РолиИсполнителей КАК РолиИсполнителей
		|ГДЕ
		|	РолиИсполнителей.Предопределенный = ИСТИНА
		|	И РолиИсполнителей.ИспользуетсяСОбъектамиАдресации = ИСТИНА
		|	И (РолиИсполнителей.ТипыОсновногоОбъектаАдресации <> ЗНАЧЕНИЕ(ПланВидовХарактеристик.ОбъектыАдресацииЗадач.ВсеОбъектыАдресации)
		|	ИЛИ РолиИсполнителей.ТипыДополнительногоОбъектаАдресации = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ОбъектыАдресацииЗадач.ВсеОбъектыАдресации))";
		
		ВыборкаРолей = Запрос.Выполнить();
		Если ВыборкаРолей.Пустой() Тогда
			ДобавитьОшибку(Метаданные.Справочники.РолиИсполнителей, НСтр("ru = 'Отсутствуют роли, использующие объекты адресации'"),
				НСтр("ru = 'В конфигурации имеются объекты адресации задач, но нет ни одной роли, которая бы их использовала
				|(реквизит ИспользуетсяСОбъектамиАдресации).'"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура Подключаемый_ВариантыОтчетов_ПроверитьВнедрение()
	
	МодульВариантыОтчетов = ОбщегоНазначения.ОбщийМодуль("ВариантыОтчетов");
	
	Кэш = Новый Структура("ФлажокОсновнойФормы, ФлажокФормыНастроек");
	ДеревоВариантов = МодульВариантыОтчетов.ДеревоПредопределенных("Внутренний");
	
	Для Каждого СтрокаОтчет Из ДеревоВариантов.Строки Цикл
		
		Если СтрокаОтчет.Объект = Неопределено Тогда
			ОтчетМенеджер = Отчеты[СтрокаОтчет.Метаданные.Имя];
			Попытка
				СтрокаОтчет.Объект = ОтчетМенеджер.Создать();
			Исключение
				ДобавитьОшибку(
					СтрокаОтчет.Метаданные,
					НСтр("ru = 'Не удалось создать отчет'"),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				Продолжить;
			КонецПопытки;
		КонецЕсли;
		
		ВариантыОтчетов_ПроверитьПодключениеКФормамОтчета(Кэш, СтрокаОтчет);
		
		ВариантыОтчетов_ПроверитьИспользованиеУстаревшихСвойств(Кэш, СтрокаОтчет);
		
		Для Каждого СтрокаВариант Из СтрокаОтчет.Строки Цикл
			МодульВариантыОтчетов.ЗаполнитьОписаниеСтрокиВарианта(СтрокаВариант, СтрокаОтчет);
			ВариантыОтчетов_ПроверитьНастройкиДляПоиска(Кэш, СтрокаОтчет, СтрокаВариант);
		КонецЦикла;
		
	КонецЦикла;
	
	// Для платформы (очистка коллекции вручную для освобождение памяти от цикличных ссылок).
	ДеревоВариантов.Колонки.Очистить();
	ДеревоВариантов.Строки.Очистить();
	
КонецПроцедуры

Процедура Подключаемый_ВерсионированиеОбъектов_ПроверитьВнедрение()
	
	// Сравнение состава типов
	СоставВерсионируемыеДанные = СоставТипа("ОпределяемыеТипы.ВерсионируемыеДанные.Тип", "Справочник.ИдентификаторыОбъектовМетаданных");
	МассивИсточников = Новый Массив;
	МассивИсточников.Добавить(СоставВерсионируемыеДанные);
	
	СоставПодписок = Новый Массив;
	СоставПодписок.Добавить(СоставТипа("ОпределяемыеТипы.ВерсионируемыеДанныеОбъект.Тип", "Справочник.ИдентификаторыОбъектовМетаданных"));
	СоставПодписок.Добавить(СоставПодписокПоОбработчику("ВерсионированиеОбъектовСобытия.ЗаписатьВерсиюДокумента"));
	МассивИсточников.Добавить(ОбъединитьТипы(НСтр("ru = 'Подписки ЗаписатьВерсию'"), СоставПодписок));
	СравнитьТипы(МассивИсточников);
	
	// Проверка наличия вставок кода
	ПроверитьНаличиеВставкиКода(СоставВерсионируемыеДанные, "ОсновнаяФормаОбъекта", "ВерсионированиеОбъектов.ПриСозданииНаСервере(");
	
КонецПроцедуры

Процедура Подключаемый_ДатыЗапретаИзменения_ПроверитьВнедрение()
	
	МассивМетаданных = Новый Массив;
	ИменаПредопределенныхДанных = Метаданные.ПланыВидовХарактеристик.РазделыДатЗапретаИзменения.ПолучитьИменаПредопределенных();
	
	ИсточникиДанных = Новый ТаблицаЗначений;
	ИсточникиДанных.Колонки.Добавить("Таблица",     Новый ОписаниеТипов("Строка"));
	ИсточникиДанных.Колонки.Добавить("ПолеДаты",    Новый ОписаниеТипов("Строка"));
	ИсточникиДанных.Колонки.Добавить("Раздел",      Новый ОписаниеТипов("Строка"));
	ИсточникиДанных.Колонки.Добавить("ПолеОбъекта", Новый ОписаниеТипов("Строка"));
	
	ИнтеграцияСтандартныхПодсистем.ПриЗаполненииИсточниковДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных);
	ОбщегоНазначения.ОбщийМодуль("ДатыЗапретаИзмененияПереопределяемый").ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных);
	
	КраткоеПредставлениеОшибки = НСтр("ru = 'Некорректно заполнена процедура ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения'");
	
	Для Каждого ИсточникДанных Из ИсточникиДанных Цикл
		ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ИсточникДанных.Таблица);
		ОбъектМетаданныхСуществует = Истина;
		Если ОбъектМетаданных = Неопределено Тогда
			ОбъектМетаданныхСуществует = Ложь;
			ДобавитьОшибку(Метаданные.ОбщиеМодули.ДатыЗапретаИзмененияПереопределяемый, КраткоеПредставлениеОшибки,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В процедуре ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения из модуля 
				|ДатыЗапретаИзмененияПереопределяемый указан объект метаданных ""%1"", отсутствующий в конфигурации.'"), ИсточникДанных.Таблица));
		КонецЕсли;
		
		Если ОбъектМетаданныхСуществует Тогда
			МассивМетаданных.Добавить(ОбъектМетаданных);
		КонецЕсли;
		
		// Проверка поля ПолеДаты. Оно всегда должно быть заполнено.
		Если ПустаяСтрока(ИсточникДанных.ПолеДаты) Тогда
			ДобавитьОшибку(Метаданные.ОбщиеМодули.ДатыЗапретаИзмененияПереопределяемый, КраткоеПредставлениеОшибки,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В процедуре ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения из модуля 
				|ДатыЗапретаИзмененияПереопределяемый для объекта ""%1"" не заполнено поле ""ПолеДаты"".'"), ИсточникДанных.Таблица));
		ИначеЕсли ОбъектМетаданныхСуществует Тогда
			ПроверитьПолеЗапретаИзменения(ИсточникДанных, ОбъектМетаданных, "ПолеДаты");
		КонецЕсли;
		
		// Проверка поля ПолеОбъекта. Оно может быть пустым.
		Если Не ПустаяСтрока(ИсточникДанных.ПолеОбъекта) И ОбъектМетаданныхСуществует Тогда
			ПроверитьПолеЗапретаИзменения(ИсточникДанных, ОбъектМетаданных, "ПолеОбъекта");
		КонецЕсли;
		
		// Проверка поля Раздел. Оно может быть пустым, только если не заполнено поле ПолеОбъекта.
		Если ПустаяСтрока(ИсточникДанных.Раздел) И Не ПустаяСтрока(ИсточникДанных.ПолеОбъекта) Тогда
			ДобавитьОшибку(Метаданные.ОбщиеМодули.ДатыЗапретаИзмененияПереопределяемый, КраткоеПредставлениеОшибки,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В процедуре ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения из модуля 
				|ДатыЗапретаИзмененияПереопределяемый для объекта ""%1"" не заполнено поле ""Раздел"" и заполнено поле ""ПолеОбъекта"".
				|Поле ""Раздел"" может быть пустым только при незаполненном поле ""ПолеОбъекта"".'"), ИсточникДанных.Таблица));
		ИначеЕсли Не ПустаяСтрока(ИсточникДанных.Раздел) И ИменаПредопределенныхДанных.Найти(ИсточникДанных.Раздел) = Неопределено Тогда
			ДобавитьОшибку(Метаданные.ОбщиеМодули.ДатыЗапретаИзмененияПереопределяемый, КраткоеПредставлениеОшибки,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В процедуре ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения из модуля 
				|ДатыЗапретаИзмененияПереопределяемый указан раздел ""%1"", отсутствующий в предопределенных
				|элементах ПланВидовХарактеристик.РазделыДатЗапретаИзменения.'"), ИсточникДанных.Раздел));
		КонецЕсли;
		
	КонецЦикла;
	
	// Проверка соответствия состава типов
	ИсточникиДанных = СоответствиеТипа("ДатыЗапретаИзмененияПереопределяемый.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения", МассивМетаданных);
	
	СоставПодписокДляСправочников = СоставПодписокПоОбработчику("ДатыЗапретаИзменения.ПроверитьДатуЗапретаИзмененияПередЗаписью");
	
	МассивПодписокДляДокументов = Новый Массив;
	МассивПодписокДляДокументов.Добавить(СоставПодписокПоОбработчику("ДатыЗапретаИзменения.ПроверитьДатуЗапретаИзмененияПередЗаписьюДокумента"));
	МассивПодписокДляДокументов.Добавить(СоставПодписокПоОбработчику("ЗащитаПерсональныхДанных.ПроверитьДатуЗапретаИзмененияПередЗаписьюДокумента"));
	СоставПодписокДляДокументов = ОбъединитьТипы(НСтр("ru = 'Источники подписок ПроверитьДатуЗапретаИзмененияПередЗаписьюДокумента'"), МассивПодписокДляДокументов);
	
	МассивПодписок = Новый Массив;
	МассивПодписок.Добавить(СоставПодписокДляСправочников);
	МассивПодписок.Добавить(СоставПодписокДляДокументов);
	МассивПодписок.Добавить(СоставПодписокПоОбработчику("ДатыЗапретаИзменения.ПроверитьДатуЗапретаИзмененияПередЗаписьюНабораЗаписей"));
	МассивПодписок.Добавить(СоставПодписокПоОбработчику("ДатыЗапретаИзменения.ПроверитьДатуЗапретаИзмененияПередЗаписьюНабораЗаписейРегистраБухгалтерии"));
	МассивПодписок.Добавить(СоставПодписокПоОбработчику("ДатыЗапретаИзменения.ПроверитьДатуЗапретаИзмененияПередЗаписьюНабораЗаписейРегистраРасчета"));
	СоставПодписок = ОбъединитьТипы(НСтр("ru = 'Источники подписок ПроверитьДатуЗапретаИзмененияПередЗаписью'"), МассивПодписок);
	
	МассивИсточников = Новый Массив;
	МассивИсточников.Добавить(СоставПодписок);
	МассивИсточников.Добавить(ИсточникиДанных);
	СравнитьТипы(МассивИсточников);
	
	// Проверка состава типов подписки ПроверитьДатуЗапретаИзмененияПередУдалением.
	
	МассивПодписок = Новый Массив;
	МассивПодписок.Добавить(СоставПодписокДляСправочников);
	МассивПодписок.Добавить(СоставПодписокДляДокументов);
	СоставСсылочныхПодписок = ОбъединитьТипы(НСтр("ru = 'Источники подписок ПроверитьДатуЗапретаИзмененияПередЗаписью'"), МассивПодписок);
	
	МассивПодписокПередУдалением = Новый Массив;
	МассивПодписокПередУдалением.Добавить(СоставПодписокПоОбработчику("ДатыЗапретаИзменения.ПроверитьДатуЗапретаИзмененияПередУдалением"));
	МассивПодписокПередУдалением.Добавить(СоставПодписокПоОбработчику("ЗащитаПерсональныхДанных.ПроверитьДатуЗапретаИзмененияПередУдалением"));
	СоставПодписокПередУдалением = ОбъединитьТипы(НСтр("ru = 'Источники подписок ПроверитьДатуЗапретаИзмененияПередУдалением'"), МассивПодписокПередУдалением);
	
	МассивИсточников = Новый Массив;
	МассивИсточников.Добавить(СоставСсылочныхПодписок);
	МассивИсточников.Добавить(СоставПодписокПередУдалением);
	СравнитьТипы(МассивИсточников);
	
	// Проверка наличия вставок кода
	ПроверитьНаличиеВставкиКода(МассивМетаданных, "ОсновнаяФормаОбъекта", "ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(",, Ложь);
	
КонецПроцедуры

Процедура Подключаемый_ДополнительныеОтчетыИОбработки_ПроверитьВнедрение()
	
	// Проверка наличия вставок кода
	ОбъектСДополнительнымиКомандами = СоставТипа("ОпределяемыеТипы.ОбъектСДополнительнымиКомандами.Тип",
		"Справочник.ИдентификаторыОбъектовМетаданных");
	СтрокаКода = "ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(";
	
	ПроверитьНаличиеВставкиКода(ОбъектСДополнительнымиКомандами, "ОсновнаяФормаОбъекта", СтрокаКода);
	ПроверитьНаличиеВставкиКода(ОбъектСДополнительнымиКомандами, "ОсновнаяФормаСписка", СтрокаКода);
	
	// Проверка наличия строки вызова в командах
	ПроверитьВстраиваниеГлобальныхОтчетовОбработок(Истина); // Отчеты
	ПроверитьВстраиваниеГлобальныхОтчетовОбработок(Ложь); // Обработки
	
КонецПроцедуры

Процедура Подключаемый_ЗаметкиПользователя_ПроверитьВнедрение()
	
	// Сравнение состава типов
	МассивИсточников = Новый Массив;
	МассивИсточников.Добавить(СоставТипа("ОпределяемыеТипы.ПредметЗаметок.Тип", "Справочник.ИдентификаторыОбъектовМетаданных"));
	МассивИсточников.Добавить(СоставТипа("ОпределяемыеТипы.ПредметЗаметокОбъект.Тип", "Справочник.Пользователи"));
	
	СоставПодписок = Новый Массив;
	СоставПодписок.Добавить(СоставПодписокПоОбработчику("ЗаметкиПользователя.УстановитьСтатусИзмененияПометкиУдаленияОбъекта"));
	СоставПодписок.Добавить(СоставПодписокПоОбработчику("ЗаметкиПользователя.УстановитьСтатусИзмененияПометкиУдаленияДокумента"));
	ТипыПодписок = ОбъединитьТипы(НСтр("ru = 'Подписки УстановитьСтатусИзмененияПометкиУдаления'"), СоставПодписок);
	МассивИсточников.Добавить(СоставТипа(ТипыПодписок, "Справочник.Пользователи"));
	СравнитьТипы(МассивИсточников);
	
КонецПроцедуры

Процедура Подключаемый_ЗапретРедактированияРеквизитовОбъектов_ПроверитьВнедрение()
	
	Объекты = Новый Соответствие;
	ОбщегоНазначения.ОбщийМодуль("ЗапретРедактированияРеквизитовОбъектовПереопределяемый").ПриОпределенииОбъектовСЗаблокированнымиРеквизитами(Объекты);
	
	МассивМетаданных = Новый Массив;
	Для Каждого Элемент Из Объекты Цикл
		МассивМетаданных.Добавить(Метаданные.НайтиПоПолномуИмени(Элемент.Ключ));
	КонецЦикла;
	
	// Проверяем наличие вызовов в модулях
	ПроверитьНаличиеВставкиКода(МассивМетаданных, "МодульМенеджера", "Функция ПолучитьБлокируемыеРеквизитыОбъекта");
	ПроверитьНаличиеВставкиКода(МассивМетаданных, "ОсновнаяФормаОбъекта",
		"ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(", "Процедура ПриСозданииНаСервере");
	ПроверитьНаличиеВставкиКода(МассивМетаданных, "ОсновнаяФормаОбъекта",
		"ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(", "Процедура ПослеЗаписиНаСервере");
	ПроверитьНаличиеВставкиКода(МассивМетаданных, "ОсновнаяФормаОбъекта",
		"Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта");
	
КонецПроцедуры

Процедура Подключаемый_КонтактнаяИнформация_ПроверитьВнедрение()
	
	// Проверка владельцев контактной информации
	МетаданныеВидовКонтактнойИнформации = Метаданные.Справочники.ВидыКонтактнойИнформации;
	
	ТаблицаВидов = Новый ТаблицаЗначений;
	ТаблицаВидов.Колонки.Добавить("ПредопределенныйВид");
	ТаблицаВидов.Колонки.Добавить("МетаданныеВладельца");
	ТаблицаВидов.Колонки.Добавить("ЕстьТабличныеЧасти");
	
	ИменаПредопределенных = МетаданныеВидовКонтактнойИнформации.ПолучитьИменаПредопределенных();
	Для Каждого ИмяПредопределенного Из ИменаПредопределенных Цикл
		ПредопределенныйВид = Справочники.ВидыКонтактнойИнформации[ИмяПредопределенного];
		Если ПредопределенныйВид.ЭтоГруппа Тогда
			Если ЗначениеЗаполнено(ПредопределенныйВид.Родитель) Тогда
				НайденнаяСтрока = ТаблицаВидов.Найти(ПредопределенныйВид.Родитель, "ПредопределенныйВид");
				Если НайденнаяСтрока = Неопределено Тогда
					НоваяСтрока = ТаблицаВидов.Добавить();
					НоваяСтрока.ПредопределенныйВид = ПредопределенныйВид.Родитель;
					НоваяСтрока.ЕстьТабличныеЧасти = Истина;
				Иначе
					НайденнаяСтрока.ЕстьТабличныеЧасти = Истина;
				КонецЕсли;
			Иначе
				Если СтрНачинаетсяС(ИмяПредопределенного, "Справочник") Или СтрНачинаетсяС(ИмяПредопределенного, "Документ") Тогда
					Если СтрНачинаетсяС(ИмяПредопределенного, "Справочник") Тогда
						ДлинаТипа = 11;
						КоллекцияМетаданных = Метаданные.Справочники;
					Иначе
						ДлинаТипа = 9;
						КоллекцияМетаданных = Метаданные.Документы;
					КонецЕсли;
					ИмяВладельца = Сред(ИмяПредопределенного, ДлинаТипа);
					МетаданныеВладельца = КоллекцияМетаданных.Найти(ИмяВладельца);
					Если МетаданныеВладельца = Неопределено Тогда
						ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Для предопределенного вида контактной информации %1 отсутствует объект метаданных %2'"),
							ИмяПредопределенного, ИмяВладельца);
						ДобавитьОшибку(МетаданныеВидовКонтактнойИнформации, НСтр("ru = 'Отсутствует объект метаданных'"), ТекстОшибки);
					Иначе
						НайденнаяСтрока = ТаблицаВидов.Найти(ПредопределенныйВид, "ПредопределенныйВид");
						Если НайденнаяСтрока = Неопределено Тогда
							НоваяСтрока = ТаблицаВидов.Добавить();
							НоваяСтрока.ПредопределенныйВид = ПредопределенныйВид;
							НоваяСтрока.МетаданныеВладельца = МетаданныеВладельца;
							НоваяСтрока.ЕстьТабличныеЧасти = Ложь;
						Иначе
							НайденнаяСтрока.МетаданныеВладельца = МетаданныеВладельца;
						КонецЕсли;
					КонецЕсли;
				Иначе
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Имя предопределенного вида контактной информации должно начинаться
						|с ""Справочник"" или ""Документ"". Текущее имя ""%1""'"), ИмяПредопределенного);
					ДобавитьОшибку(МетаданныеВидовКонтактнойИнформации, 
						НСтр("ru = 'Некорректное имя предопределенного вида контактной информации'"), ТекстОшибки);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	МассивВидов = ТаблицаВидов.ВыгрузитьКолонку("МетаданныеВладельца");
	
	МассивИсточников = Новый Массив;
	МассивИсточников.Добавить(СоставТипа("ОпределяемыеТипы.ВладелецКонтактнойИнформации.Тип"));
	МассивИсточников.Добавить(СоставПодписокПоОбработчику("УправлениеКонтактнойИнформацией.ОбработкаЗаполненияКонтактнойИнформацииДокумента"));
	ТипыКонтактнойИнформации = ОбъединитьТипы(НСтр("ru = 'Состав определяемого типа и подписки'"), МассивИсточников);
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(ТипыКонтактнойИнформации);
	МассивТипов.Добавить(СоответствиеТипа(НСтр("ru = 'Предопределенные группы справочника Виды контактной информации'"), МассивВидов));
	СравнитьТипы(МассивТипов);
	
	// Проверка реквизитов табличной части КонтактнаяИнформация
	ТипыТабличнойЧасти = Новый Структура;
	ТипыТабличнойЧасти.Вставить("Тип",                   Новый ОписаниеТипов("ПеречислениеСсылка.ТипыКонтактнойИнформации"));
	ТипыТабличнойЧасти.Вставить("Вид",                   Новый ОписаниеТипов("СправочникСсылка.ВидыКонтактнойИнформации"));
	ТипыТабличнойЧасти.Вставить("Страна",                Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(500)));
	ТипыТабличнойЧасти.Вставить("ЗначенияПолей",         Новый ОписаниеТипов("Строка"));
	ТипыТабличнойЧасти.Вставить("Страна",                Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(100)));
	ТипыТабличнойЧасти.Вставить("Регион",                Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(50)));
	ТипыТабличнойЧасти.Вставить("Город",                 Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(50)));
	ТипыТабличнойЧасти.Вставить("АдресЭП",               Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(100)));
	ТипыТабличнойЧасти.Вставить("ДоменноеИмяСервера",    Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(100)));
	ТипыТабличнойЧасти.Вставить("НомерТелефона",         Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(20)));
	ТипыТабличнойЧасти.Вставить("НомерТелефонаБезКодов", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(20)));
	ТипыТабличнойЧасти.Вставить("ВидДляСписка",          Новый ОписаниеТипов("СправочникСсылка.ВидыКонтактнойИнформации"));
	ТипыТабличнойЧасти.Вставить("ИдентификаторСтрокиТабличнойЧасти", Новый ОписаниеТипов("Число",,Новый КвалификаторыЧисла(7)));
	
	Для Каждого СтрокаВида Из ТаблицаВидов Цикл
		МетаданныеВладельца = СтрокаВида.МетаданныеВладельца;
		ТабличнаяЧастьКонтактнаяИнформация = МетаданныеВладельца.ТабличныеЧасти.Найти("КонтактнаяИнформация");
		Если ТабличнаяЧастьКонтактнаяИнформация = Неопределено Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'У объекта ""%1"", подключенного к подсистеме отсутствует
				|обязательная табличная часть ""КонтактнаяИнформация""'"), МетаданныеВладельца.ПолноеИмя());
			ДобавитьОшибку(МетаданныеВладельца, НСтр("ru = 'Отсутствует табличная часть КонтактнаяИнформация'"), ТекстОшибки);
			Продолжить;
		КонецЕсли;
		Для Каждого ТипТабличнойЧасти Из ТипыТабличнойЧасти Цикл
			ОбязательныйРеквизит = Истина;
			Если ТипТабличнойЧасти.Ключ = "ВидДляСписка" Тогда
				ОбязательныйРеквизит = Ложь;
			ИначеЕсли ТипТабличнойЧасти.Ключ = "ИдентификаторСтрокиТабличнойЧасти" Тогда
				ОбязательныйРеквизит = СтрокаВида.ЕстьТабличныеЧасти;
			КонецЕсли;
			НайденныйРеквизит = ТабличнаяЧастьКонтактнаяИнформация.Реквизиты.Найти(ТипТабличнойЧасти.Ключ);
			Если НайденныйРеквизит = Неопределено Тогда
				Если ОбязательныйРеквизит Тогда
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'У объекта ""%1"" в табличной части ""КонтактнаяИнформация""
						|отсутствует обязательный реквизит ""%2""'"), МетаданныеВладельца.ПолноеИмя(), ТипТабличнойЧасти.Ключ);
					ДобавитьОшибку(МетаданныеВладельца, НСтр("ru = 'Проверка наличия обязательных реквизитов табличной части КонтактнаяИнформация'"), ТекстОшибки);
				КонецЕсли;
			Иначе
				Если НайденныйРеквизит.Тип <> ТипТабличнойЧасти.Значение Тогда
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'У объекта ""%1"" в табличной части ""КонтактнаяИнформация""
						|тип реквизита ""%2"" не соответствует ожидаемому'"), МетаданныеВладельца.ПолноеИмя(), ТипТабличнойЧасти.Ключ);
					ДобавитьОшибку(МетаданныеВладельца, НСтр("ru = 'Некорректные типы реквизитов табличной части КонтактнаяИнформация'"), ТекстОшибки);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		// Проверка заполнения характеристик.
		Если ТабличнаяЧастьКонтактнаяИнформация.Реквизиты.Найти("ВидДляСписка") <> Неопределено Тогда
			ХарактеристикиЗаданы = Ложь;
			Для Каждого Характеристика Из МетаданныеВладельца.Характеристики Цикл
				Если Характеристика.ВидыХарактеристик = Метаданные.Справочники.ВидыКонтактнойИнформации Тогда
					ХарактеристикиЗаданы = Истина;
				КонецЕсли;
			КонецЦикла;
			Если Не ХарактеристикиЗаданы Тогда
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'У объекта ""%1"" в табличной части ""КонтактнаяИнформация""
					|создан реквизит ""ВидДляСписка"", но не создана характеристика с видом ""ВидыКонтактнойИнформации""'"),
					МетаданныеВладельца.ПолноеИмя());
				ДобавитьОшибку(МетаданныеВладельца, НСтр("ru = 'Некорректно заполнены характеристики'"), ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Проверка наличия вставок кода
	ПроверяемыеВызовы = Новый Массив;
	ПроверяемыеВызовы.Добавить(ВариантыВызова("УправлениеКонтактнойИнформациейКлиент.ПредставлениеПриИзменении", "УправлениеКонтактнойИнформациейКлиент.ПриИзменении"));
	ПроверитьНаличиеВставкиКода(МассивВидов, "ОсновнаяФормаОбъекта", ПроверяемыеВызовы, "Подключаемый_КонтактнаяИнформацияПриИзменении");
	
	ПроверяемыеВызовы = Новый Массив;
	ПроверяемыеВызовы.Добавить(ВариантыВызова("УправлениеКонтактнойИнформациейКлиент.ПредставлениеНачалоВыбора", "УправлениеКонтактнойИнформациейКлиент.НачалоВыбора"));
	ПроверитьНаличиеВставкиКода(МассивВидов, "ОсновнаяФормаОбъекта", ПроверяемыеВызовы, "Подключаемый_КонтактнаяИнформацияНачалоВыбора");
	
	ПроверитьНаличиеВставкиКода(МассивВидов, "ОсновнаяФормаОбъекта", "УправлениеКонтактнойИнформациейКлиент.НачалоВыбора",
		"Подключаемый_КонтактнаяИнформацияПриНажатии");
		
	ПроверяемыеВызовы = Новый Массив;
	ПроверяемыеВызовы.Добавить(ВариантыВызова("УправлениеКонтактнойИнформациейКлиент.ПредставлениеОчистка", "УправлениеКонтактнойИнформациейКлиент.Очистка"));
	ПроверитьНаличиеВставкиКода(МассивВидов, "ОсновнаяФормаОбъекта", ПроверяемыеВызовы, "Подключаемый_КонтактнаяИнформацияОчистка");
	
	ПроверяемыеВызовы = Новый Массив;
	ПроверяемыеВызовы.Добавить(ВариантыВызова("УправлениеКонтактнойИнформациейКлиент.ПодключаемаяКоманда", "УправлениеКонтактнойИнформациейКлиент.ВыполнитьКоманду"));
	ПроверитьНаличиеВставкиКода(МассивВидов, "ОсновнаяФормаОбъекта", ПроверяемыеВызовы, "Подключаемый_КонтактнаяИнформацияВыполнитьКоманду");
	
	ПроверитьНаличиеВставкиКода(МассивВидов, "ОсновнаяФормаОбъекта", "УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию", "Подключаемый_ОбновитьКонтактнуюИнформацию");
	
	МассивВидов = Новый Массив;
	Отбор = Новый Структура("ЕстьТабличныеЧасти", Истина);
	Для Каждого СтрокаВида Из ТаблицаВидов.НайтиСтроки(Отбор) Цикл
		МассивВидов.Добавить(СтрокаВида.МетаданныеВладельца);
	КонецЦикла;
	ПроверитьНаличиеВставкиКода(МассивВидов, "ОсновнаяФормаОбъекта", "УправлениеКонтактнойИнформацией.ПослеЗаписиНаСервере");
	
КонецПроцедуры

Процедура Подключаемый_НапоминанияПользователя_ПроверитьВнедрение()
	
	МассивИсточников = Новый Массив;
	МассивИсточников.Добавить(СоставТипа("ОпределяемыеТипы.ПредметНапоминания.Тип", "Справочник.ИдентификаторыОбъектовМетаданных"));
	МассивИсточников.Добавить(СоставТипа("ОпределяемыеТипы.ПредметНапоминанияОбъект.Тип", "Справочник.ИдентификаторыОбъектовМетаданных"));
	СравнитьТипы(МассивИсточников);
	
КонецПроцедуры

Процедура Подключаемый_НастройкаПорядкаЭлементов_ПроверитьВнедрение()
	
	// Сравниваем составы типов
	МассивИсточников = Новый Массив;
	МассивИсточников.Добавить(СоставТипа("ОпределяемыеТипы.ОбъектСНастраиваемымПорядком.Тип", "Справочник.ИдентификаторыОбъектовМетаданных"));
	МассивИсточников.Добавить(СоставОбъектовСРеквизитомДопУпорядочивания());
	СравнитьТипы(МассивИсточников);
	
	// Проверяем наличие вставок кода
	МассивТипов = СоставТипа("ОпределяемыеТипы.ОбъектСНастраиваемымПорядком.Тип",
		"Справочник.ВариантыОтветовАнкет,Справочник.ИдентификаторыОбъектовМетаданных");
	ПроверяемыеВызовы = Новый Массив;
	ПроверяемыеВызовы.Добавить("НастройкаПорядкаЭлементовКлиент.ПереместитьЭлементВверхВыполнить(");
	ПроверяемыеВызовы.Добавить("НастройкаПорядкаЭлементовКлиент.ПереместитьЭлементВнизВыполнить(");
	ПроверитьНаличиеВставкиКода(МассивТипов, "ОсновнаяФормаСписка", ПроверяемыеВызовы);
	
КонецПроцедуры

Процедура Подключаемый_ОбменДанными_ПроверитьВнедрение()
	
	ПроверитьНаличиеМакетовИФорм();
	ПроверитьСоставОбщихКоманд();
	ПроверитьСоставПлановОбмена();
	ПроверитьПрефиксИнформационнойБазыПоУмолчанию();
	
КонецПроцедуры

Процедура Подключаемый_ОбновлениеВерсииИБ_ПроверитьВнедрение()
	
	Если Метаданные.ОбщиеМакеты.Найти("ОписаниеИзмененийСистемы") = Неопределено Тогда
		ДобавитьОшибку(Метаданные.Подсистемы.СтандартныеПодсистемы.Подсистемы.ОбновлениеВерсииИБ,
			НСтр("ru = 'Отсутствует макет ОписаниеИзмененийСистемы'"),
			НСтр("ru = 'В конфигурации не создан общий макет ОписаниеИзмененийСистемы.'"));
	КонецЕсли;
	
КонецПроцедуры

Процедура Подключаемый_Печать_ПроверитьВнедрение()
	
	// Получаем состав объектов, подключенных к подсистеме Печать
	МассивОбъектов = Новый Массив;
	ОбщегоНазначения.ОбщийМодуль("УправлениеПечатьюПереопределяемый").ПриОпределенииОбъектовСКомандамиПечати(МассивОбъектов);
	
	МассивМетаданных = Новый Массив;
	Для Каждого Элемент Из МассивОбъектов Цикл
		МассивМетаданных.Добавить(Метаданные.НайтиПоТипу(ТипЗнч(Элемент)));
	КонецЦикла;
	
	// Проверяем наличие вызовов в модулях
	ПроверитьНаличиеВставкиКода(МассивМетаданных, "МодульМенеджера", "Процедура ДобавитьКомандыПечати");
	ПроверитьНаличиеВставкиКода(МассивМетаданных, "ОсновнаяФормаОбъекта", "УправлениеПечатью.ПриСозданииНаСервере");
	ПроверитьНаличиеВставкиКода(МассивМетаданных, "ОсновнаяФормаСписка", "УправлениеПечатью.ПриСозданииНаСервере");
	
КонецПроцедуры

Процедура Подключаемый_Пользователи_ПроверитьВнедрение()
	
	МассивИсточников = Новый Массив;
	МассивИсточников.Добавить("ОпределяемыеТипы.ВнешнийПользователь.Тип");
	МассивИсточников.Добавить(СоставТипа("ОпределяемыеТипы.ВнешнийПользовательОбъект.Тип", "Справочник.ВнешниеПользователи"));
	МассивИсточников.Добавить("Справочники.ВнешниеПользователи.Команды.ВнешнийДоступ.ТипПараметраКоманды");
	
	СравнитьТипы(МассивИсточников);
	
КонецПроцедуры

Процедура Подключаемый_ПрефиксацияОбъектов_ПроверитьВнедрение()
	
	ТипыПрефиксаОрганизации = СоставПодписокПоОбработчику("ПрефиксацияОбъектовСобытия.УстановитьПрефиксОрганизации");
	ТипыПрефиксаИБ = СоставПодписокПоОбработчику("ПрефиксацияОбъектовСобытия.УстановитьПрефиксИнформационнойБазы");
	ТипыПрефиксаИБИОрганизации = СоставПодписокПоОбработчику("ПрефиксацияОбъектовСобытия.УстановитьПрефиксИнформационнойБазыИОрганизации");
	
	Если ТипыПрефиксаОрганизации.Количество() = 0 И ТипыПрефиксаИБИОрганизации.Количество() = 0 Тогда
		ТекстОшибки = НСтр("ru = 'Ожидается наличие подписки на событие с обработчиком:
			|ПрефиксацияОбъектовСобытия.УстановитьПрефиксОрганизации 
			|или ПрефиксацияОбъектовСобытия.УстановитьПрефиксИнформационнойБазыИОрганизации'");
		ДобавитьОшибку(Метаданные.ОбщиеМодули.ПрефиксацияОбъектовСобытия, НСтр("ru = 'Отсутствуют подписки установки префикса'"), ТекстОшибки);
	КонецЕсли;
	
	Если ТипыПрефиксаИБ.Количество() = 0 И ТипыПрефиксаИБИОрганизации.Количество() = 0 Тогда
		ТекстОшибки = НСтр("ru = 'Ожидается наличие подписки на событие с обработчиком:
			|ПрефиксацияОбъектовСобытия.УстановитьПрефиксИнформационнойБазы 
			|или ПрефиксацияОбъектовСобытия.УстановитьПрефиксИнформационнойБазыИОрганизации'");
		ДобавитьОшибку(Метаданные.ОбщиеМодули.ПрефиксацияОбъектовСобытия, НСтр("ru = 'Отсутствуют подписки установки префикса'"), ТекстОшибки);
	КонецЕсли;
	
	МассивИсточников = Новый Массив;
	МассивИсточников.Добавить(ТипыПрефиксаОрганизации);
	МассивИсточников.Добавить(ТипыПрефиксаИБ);
	МассивИсточников.Добавить(ТипыПрефиксаИБИОрганизации);
	ПересечениеТипов(МассивИсточников);
	
КонецПроцедуры

Процедура Подключаемый_ПрисоединенныеФайлы_ПроверитьВнедрение()
	
	МассивОбъектовСФайлами = Новый Массив;
	МассивВладельцевФайлов = Новый Массив;
	Для Каждого МетаданныеСправочника Из Метаданные.Справочники Цикл
		ИмяСправочника = МетаданныеСправочника.Имя;
		Если СтрЗаканчиваетсяНа(ИмяСправочника, "ПрисоединенныеФайлы") Тогда
			
			ИмяВладельцаПрисоединенныхФайлов = СтрЗаменить(ИмяСправочника, "ПрисоединенныеФайлы", "");
			ВладелецПрисоединенныхФайлов = Метаданные.Справочники.Найти(ИмяВладельцаПрисоединенныхФайлов);
			Если ВладелецПрисоединенныхФайлов = Неопределено Тогда
				ВладелецПрисоединенныхФайлов = Метаданные.Документы.Найти(ИмяВладельцаПрисоединенныхФайлов);
			КонецЕсли;
			
			Если ВладелецПрисоединенныхФайлов = Неопределено Тогда
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Для справочника ""%1"", содержащего присоединенные файлы
					|не найден владелец с именем ""%2""'"), ИмяСправочника, ИмяВладельцаПрисоединенныхФайлов);
				ДобавитьОшибку(МетаданныеСправочника, НСтр("ru = 'Отсутствует владелец справочника присоединенных файлов'"), ТекстОшибки);
			Иначе
				МассивВладельцевФайлов.Добавить(ВладелецПрисоединенныхФайлов);
			КонецЕсли;
			
			Если МетаданныеСправочника.Реквизиты.Найти("ВладелецФайла") = Неопределено Тогда
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В справочнике присоединенных файлов ""%1"" не найден реквизит ""ВладелецФайла""'"), ИмяСправочника);
				ДобавитьОшибку(МетаданныеСправочника, НСтр("ru = 'Отсутствует реквизит ""ВладелецФайла""'"), ТекстОшибки);
			Иначе
				ТипыВладельца = МетаданныеСправочника.Реквизиты.ВладелецФайла.Тип.Типы();
				Если ТипыВладельца.Количество() <> 1 Тогда
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В реквизите ""ВладелецФайла"" справочника %1 задано более одного типа'"), ИмяСправочника);
					ДобавитьОшибку(МетаданныеСправочника, НСтр("ru = 'Некорректный тип реквизита ""ВладелецФайла""'"), ТекстОшибки);
				Иначе
					ВладелецВРеквизите = Метаданные.НайтиПоТипу(ТипыВладельца[0]);
					Если ВладелецВРеквизите <> ВладелецПрисоединенныхФайлов Тогда
						ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Имя справочника ""%1"" не совпадает с типом ""%2"",
							|заданным в реквизите ""ВладелецФайла""'"), ИмяСправочника, ВладелецВРеквизите.Имя);
						ДобавитьОшибку(МетаданныеСправочника, НСтр("ru = 'Имя справочника не соответствует типу владельца'"), ТекстОшибки);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			МассивОбъектовСФайлами.Добавить(МетаданныеСправочника);
			
		КонецЕсли;
	КонецЦикла;
	
	СправочникиПрисоединенныхФайлов = СоответствиеТипа(НСтр("ru = 'Справочники присоединенных файлов'"), МассивОбъектовСФайлами);
	ВладельцыПрисоединенныхФайлов = СоответствиеТипа(НСтр("ru = 'Владельцы присоединенных файлов'"), МассивВладельцевФайлов);
	
	МассивИсточников = Новый Массив;
	МассивИсточников.Добавить("ОпределяемыеТипы.ПрисоединенныйФайл.Тип");
	МассивИсточников.Добавить(СоставТипа("ОпределяемыеТипы.ПрисоединенныйФайлОбъект.Тип", "Справочник.ИдентификаторыОбъектовМетаданных"));
	МассивИсточников.Добавить(СоставПодписокПоОбработчику("ПрисоединенныеФайлыКлиентСервер.ПереопределитьПолучаемуюФормуПрисоединенногоФайла"));
	МассивИсточников.Добавить(СправочникиПрисоединенныхФайлов);
	СравнитьТипы(МассивИсточников);
	
	МассивИсточников = Новый Массив;
	МассивИсточников.Добавить(СоставТипа("ОпределяемыеТипы.ВладелецПрисоединенныхФайловОбъект.Тип", "Справочник.ИдентификаторыОбъектовМетаданных"));
	МассивИсточников.Добавить(СоставПодписокПоОбработчику("ПрисоединенныеФайлы.УстановитьПометкуУдаленияПрисоединенныхФайловДокументов"));
	ОбъектныеТипы = ОбъединитьТипы(НСтр("ru = 'Состав определяемого типа ВладелецПрисоединенныхФайловОбъект (кроме документов)
		|или подписок УстановитьПометкуУдаленияПрисоединенныхФайловДокументов (документы)'"), МассивИсточников);
	
	МассивИсточников = Новый Массив;
	МассивИсточников.Добавить(СоставТипа("ОпределяемыеТипы.ВладелецПрисоединенныхФайлов.Тип", "Справочник.ИдентификаторыОбъектовМетаданных"));
	МассивИсточников.Добавить(ВладельцыПрисоединенныхФайлов);
	МассивИсточников.Добавить(ОбъектныеТипы);
	СравнитьТипы(МассивИсточников);
	
КонецПроцедуры

Процедура Подключаемый_РассылкаОтчетов_ПроверитьВнедрение()
	
	КонтактнаяИнформацияГруппыТипов = Новый Соответствие;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВидыКонтактнойИнформации.Ссылка,
	|	ВидыКонтактнойИнформации.ИмяПредопределенныхДанных
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|ГДЕ
	|	ВидыКонтактнойИнформации.Предопределенный
	|	И ВидыКонтактнойИнформации.ЭтоГруппа
	|	И ВидыКонтактнойИнформации.Родитель = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ПустаяСсылка)";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		КонтактнаяИнформацияГруппыТипов.Вставить(Выборка.ИмяПредопределенныхДанных, Выборка.Ссылка);
	КонецЦикла;
	
	СоответствиеПолучателей = СоставТипа("ОпределяемыеТипы.ПолучательРассылки.Тип", "Справочник.ГруппыПользователей");
	ТипыПолучателей = ЭлементСоответствия(СоответствиеПолучателей);
	
	Для Каждого ТипПолучателей Из ТипыПолучателей.Значение Цикл
		
		КонтактнаяИнформацияГруппаСсылка = КонтактнаяИнформацияГруппыТипов.Получить(СтрЗаменить(ТипПолучателей.ПолноеИмя(), ".", ""));
		Если КонтактнаяИнформацияГруппаСсылка = Неопределено Тогда
			// Ошибка: Не определена группа контактной информации.
			ТекстОшибки = НСтр("ru = 'Для объекта не найдена группа контактной информации. Для него необходимо:
				|  • Либо выполнить внедрение подсистемы ""КонтактнаяИнформация"";
				|  • Либо исключить из определяемого типа ""ПолучательРассылки"".'");
			ДобавитьОшибку(ТипПолучателей, НСтр("ru = 'Отсутствует группа контактной информации'"), ТекстОшибки);
			Продолжить;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ Справочник.ВидыКонтактнойИнформации ГДЕ Родитель = &Родитель И Тип = &Тип";
		Запрос.УстановитьПараметр("Родитель", КонтактнаяИнформацияГруппаСсылка);
		Запрос.Параметры.Вставить("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		Если Запрос.Выполнить().Пустой() Тогда
			// Ошибка: Не добавлен основной вид контактной информации типа "e-mail".
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для получателей ""%1"" необходимо добавить вид контактной информации типа ""Адрес электронной почты"".'"),
				Строка(ТипПолучателей));
			ДобавитьОшибку(ТипПолучателей, НСтр("ru = 'Отсутствует вид вид контактной информации'"), ТекстОшибки);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура Подключаемый_Свойства_ПроверитьВнедрение()
	
	// Проверка типов табличной части ДополнительныеРеквизиты
	ТипыТабличнойЧасти = Новый Структура;
	ТипыТабличнойЧасти.Вставить("Свойство",        Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	ТипыТабличнойЧасти.Вставить("ТекстоваяСтрока", Новый ОписаниеТипов("Строка"));
	ТипыТабличнойЧасти.Вставить("Значение",        Метаданные.ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.Тип.Типы());
	
	ДопустимыеМетаданные = Новый Массив;
	ДопустимыеМетаданные.Добавить(Метаданные.Справочники);
	ДопустимыеМетаданные.Добавить(Метаданные.Документы);
	ДопустимыеМетаданные.Добавить(Метаданные.БизнесПроцессы);
	ДопустимыеМетаданные.Добавить(Метаданные.Задачи);
	
	ОбъектыСДополнительнымиРеквизитами = Новый Массив;
	
	Для Каждого ВидМетаданных Из ДопустимыеМетаданные Цикл
		
		Для Каждого ОбъектМетаданных Из ВидМетаданных Цикл
			
			Если ОбъектМетаданных = Метаданные.Справочники.НаборыДополнительныхРеквизитовИСведений Тогда
				Продолжить; // Исключение
			КонецЕсли;
			
			ТабличнаяЧастьДополнительныеРеквизиты = ОбъектМетаданных.ТабличныеЧасти.Найти("ДополнительныеРеквизиты");
			Если ТабличнаяЧастьДополнительныеРеквизиты <> Неопределено Тогда
				ОбъектыСДополнительнымиРеквизитами.Добавить(ОбъектМетаданных);
				// Проверяем состав типов
				Для Каждого ТипТабличнойЧасти Из ТипыТабличнойЧасти Цикл
					НайденныйРеквизит = ТабличнаяЧастьДополнительныеРеквизиты.Реквизиты.Найти(ТипТабличнойЧасти.Ключ);
					Если НайденныйРеквизит = Неопределено Тогда
						ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'У объекта ""%1"" в табличной части ""ДополнительныеРеквизиты""
							|отсутствует обязательный реквизит ""%2""'"), ОбъектМетаданных.ПолноеИмя(), ТипТабличнойЧасти.Ключ);
						ДобавитьОшибку(ОбъектМетаданных, НСтр("ru = 'Отсутствуют обязательные реквизиты табличной части ДополнительныеРеквизиты'"), ТекстОшибки);
					Иначе
						Если НайденныйРеквизит.Имя = "Значение" Тогда
							ДобавитьОшибку = Не ОбщегоНазначенияКлиентСервер.СпискиЗначенийИдентичны(НайденныйРеквизит.Тип.Типы(), ТипТабличнойЧасти.Значение);
						Иначе
							ДобавитьОшибку = НайденныйРеквизит.Тип <> ТипТабличнойЧасти.Значение;
						КонецЕсли;
						Если ДобавитьОшибку Тогда
							ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'У объекта ""%1"" в табличной части ""ДополнительныеРеквизиты""
								|тип реквизита ""%2"" не соответствует ожидаемому'"), ОбъектМетаданных.ПолноеИмя(), ТипТабличнойЧасти.Ключ);
							ДобавитьОшибку(ОбъектМетаданных, НСтр("ru = 'Некорректные типы реквизитов табличной части ДополнительныеРеквизиты'"), ТекстОшибки);
						КонецЕсли;
						
					КонецЕсли;
				КонецЦикла;
				
				// Проверка характеристик дополнительных реквизитов.
				ХарактеристикиЗаданы = Ложь;
				Для Каждого Характеристика Из ОбъектМетаданных.Характеристики Цикл
					Если Характеристика.ВидыХарактеристик = Метаданные.Справочники.НаборыДополнительныхРеквизитовИСведений.ТабличныеЧасти.ДополнительныеРеквизиты Тогда
						ХарактеристикиЗаданы = Истина;
					КонецЕсли;
				КонецЦикла;
				Если Не ХарактеристикиЗаданы Тогда
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'У объекта ""%1"" с табличной частью ""ДополнительныеРеквизиты""
						|не найдена характеристика с видом ""Справочник.НаборыДополнительныхРеквизитовИСведений.ТабличнаяЧасть.ДополнительныеРеквизиты""'"),
						ОбъектМетаданных.ПолноеИмя());
						ДобавитьОшибку(ОбъектМетаданных, НСтр("ru = 'Некорректно заполнены характеристики'"), ТекстОшибки);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Проверка наличия вставок кода
	ПроверяемыеВызовы = Новый Массив;
	ПроверяемыеВызовы.Добавить("УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(");
	ПроверяемыеВызовы.Добавить("УправлениеСвойствами.ПриСозданииНаСервере(");
	ПроверяемыеВызовы.Добавить("УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(");
	ПроверяемыеВызовы.Добавить("ОбновитьЭлементыДополнительныхРеквизитов()");
	ПроверяемыеВызовы.Добавить("УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(");
	ПроверяемыеВызовы.Добавить("УправлениеСвойствами.ПриЧтенииНаСервере(");
	ПроверяемыеВызовы.Добавить("УправлениеСвойствами.ОбработкаПроверкиЗаполнения(");
	ПроверяемыеВызовы.Добавить("УправлениеСвойствами.ПередЗаписьюНаСервере(");
	
	ПроверитьНаличиеВставкиКода(ОбъектыСДополнительнымиРеквизитами, "ОсновнаяФормаОбъекта", ПроверяемыеВызовы);
	
	// Проверка предопределенных элементов
	
	ОбъектыСДополнительнымиСвойствами = Новый Массив;
	
	ДопустимыеПрефиксы = Новый Структура;
	ДопустимыеПрефиксы.Вставить("Справочник", Метаданные.Справочники);
	ДопустимыеПрефиксы.Вставить("Документ", Метаданные.Документы);
	ДопустимыеПрефиксы.Вставить("ПланВидовХарактеристик", Метаданные.ПланыВидовХарактеристик);
	ДопустимыеПрефиксы.Вставить("ПланСчетов", Метаданные.ПланыСчетов);
	ДопустимыеПрефиксы.Вставить("ПланВидовРасчета", Метаданные.ПланыВидовРасчета);
	ДопустимыеПрефиксы.Вставить("БизнесПроцесс", Метаданные.БизнесПроцессы);
	ДопустимыеПрефиксы.Вставить("Задача", Метаданные.Задачи);
	ДопустимыеПрефиксы.Вставить("ПланОбмена", Метаданные.ПланыОбмена);
	
	МетаданныеНаборов = Метаданные.Справочники.НаборыДополнительныхРеквизитовИСведений;
	ИменаПредопределенных = МетаданныеНаборов.ПолучитьИменаПредопределенных();
	Для Каждого ИмяПредопределенного Из ИменаПредопределенных Цикл
		
		Набор = Справочники.НаборыДополнительныхРеквизитовИСведений[ИмяПредопределенного];
		Если ЗначениеЗаполнено(Набор.Родитель) Тогда
			Продолжить;
		КонецЕсли;
		
		КоллекцияМетаданных = Неопределено;
		Для Каждого ДопустимыйПрефикс Из ДопустимыеПрефиксы Цикл
			Если СтрНачинаетсяС(ИмяПредопределенного, ДопустимыйПрефикс.Ключ) Тогда
				ДлинаПрефикса = СтрДлина(ДопустимыйПрефикс.Ключ) + 2;
				КоллекцияМетаданных = ДопустимыйПрефикс.Значение;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если КоллекцияМетаданных = Неопределено Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Имя предопределенного набора свойств должно начинаться
				|с наименования ссылочного типа (""Справочник"", ""Документ"" и т.д). Текущее имя ""%1""'"), ИмяПредопределенного);
			ДобавитьОшибку(МетаданныеНаборов, НСтр("ru = 'Некорректное имя предопределенного набора свойств'"), ТекстОшибки);
		КонецЕсли;
		
		ИмяВладельца = Сред(ИмяПредопределенного, ДлинаПрефикса);
		МетаданныеВладельца = КоллекцияМетаданных.Найти(ИмяВладельца);
		Если МетаданныеВладельца = Неопределено Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Для предопределенного набора свойств %1 отсутствует объект метаданных %2'"),
				ИмяПредопределенного, ИмяВладельца);
			ДобавитьОшибку(МетаданныеНаборов, НСтр("ru = 'Отсутствует объект метаданных'"), ТекстОшибки);
		Иначе
			ОбъектыСДополнительнымиСвойствами.Добавить(МетаданныеВладельца);
		КонецЕсли;
	
	КонецЦикла;
	
	ОбъектыСДополнительнымиСведениями = СоставТипа("ОпределяемыеТипы.ВладелецДополнительныхСведений.Тип");
	
	// Проверка характеристик дополнительных сведений.
	Для Каждого ОбъектМетаданных Из ЭлементСоответствия(ОбъектыСДополнительнымиСведениями).Значение Цикл
		ХарактеристикиЗаданы = Ложь;
		Для Каждого Характеристика Из ОбъектМетаданных.Характеристики Цикл
			Если Характеристика.ВидыХарактеристик = Метаданные.Справочники.НаборыДополнительныхРеквизитовИСведений.ТабличныеЧасти.ДополнительныеСведения Тогда
				ХарактеристикиЗаданы = Истина;
			КонецЕсли;
		КонецЦикла;
		Если Не ХарактеристикиЗаданы Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'У объекта ""%1"", входящего в состав определяемого типа ""ВладелецДополнительныхСведений""
			|не найдена характеристика с видом ""Справочник.НаборыДополнительныхРеквизитовИСведений.ТабличнаяЧасть.ДополнительныеСведения""'"),
			ОбъектМетаданных.ПолноеИмя());
			ДобавитьОшибку(ОбъектМетаданных, НСтр("ru = 'Некорректно заполнены характеристики'"), ТекстОшибки);
		КонецЕсли;
	КонецЦикла;
	
	ОбъектыСРеквизитамиИСведениями = Новый Массив;
	ОбъектыСРеквизитамиИСведениями.Добавить(ОбъектыСДополнительнымиРеквизитами);
	ОбъектыСРеквизитамиИСведениями.Добавить(ОбъектыСДополнительнымиСведениями);
	ОбъектыСРеквизитамиИСведениями = ОбъединитьТипы(НСтр("ru = 'Объекты с дополнительными свойствами'"), ОбъектыСРеквизитамиИСведениями);
	
	МассивИсточников = Новый Массив;
	МассивИсточников.Добавить(ОбъектыСРеквизитамиИСведениями);
	МассивИсточников.Добавить(СоответствиеТипа(НСтр("ru = 'Наборы свойств'"), ОбъектыСДополнительнымиСвойствами));
	СравнитьТипы(МассивИсточников);
	
КонецПроцедуры

Процедура Подключаемый_СтруктураПодчиненности_ПроверитьВнедрение()
	
	МассивИсточников = Новый Массив;
	МассивИсточников.Добавить("ОбщиеКоманды.СтруктураПодчиненности.ТипПараметраКоманды");
	МассивИсточников.Добавить("КритерииОтбора.СвязанныеДокументы.Тип");
	СравнитьТипы(МассивИсточников);
	
КонецПроцедуры

Процедура Подключаемый_УправлениеДоступом_ПроверитьВнедрение()
	
	МассивИсточников = Новый Массив;
	МассивИсточников.Добавить("ОпределяемыеТипы.ВнешнийПользователь.Тип");
	МассивИсточников.Добавить(СоставТипа("ОпределяемыеТипы.Пользователь.Тип", "Справочник.Пользователи"));
	СравнитьТипы(МассивИсточников);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры для использования в проверках.

// Добавляет ошибку в таблицу проверки
//
Процедура ДобавитьОшибку(ОбъектМетаданных, КраткоеОписаниеОшибки, ПодробноеОписаниеОшибки)
	
	ЗначениеСоответствия = СоответствиеОбъектов.Получить(ОбъектМетаданных);
	ПодсистемаВерхнегоУровня = ?(ЗначениеСоответствия = Неопределено, НСтр("ru = 'Без подсистемы'"), ЗначениеСоответствия.Представление());
	
	НоваяСтрока = ТаблицаПроверки.Добавить();
	
	НоваяСтрока.ПодсистемаБСП = ПроверяемаяПодсистема.Представление();
	НоваяСтрока.ПодсистемаКонфигурации = ПодсистемаВерхнегоУровня;
	НоваяСтрока.ОбъектМетаданных = ОбъектМетаданных.ПолноеИмя();
	НоваяСтрока.КраткоеОписаниеОшибки = КраткоеОписаниеОшибки;
	НоваяСтрока.ПодробноеОписаниеОшибки = ПодробноеОписаниеОшибки;
	
КонецПроцедуры

// На входе получает
// МассивИсточников
//    Массив - Результат функции СоставТипа
//    ОписаниеТипов
//    КоллекцияЗначенийСвойстваОбъектаМетаданных.
//
Процедура СравнитьТипы(Знач МассивИсточников)
	
	МассивСоответствий = ОбработатьСоставИсточников(МассивИсточников);
	КоличествоИсточников = МассивСоответствий.Количество();
	
	Для Индекс = 0 По КоличествоИсточников - 1 Цикл
		
		СоответствиеТипа = ЭлементСоответствия(МассивСоответствий.Получить(Индекс));
		МассивЭлементов = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(СоответствиеТипа.Значение);
		
		Для Счетчик = 0 По МассивЭлементов.Количество() - 1 Цикл
			
			ЭлементМассива = МассивЭлементов.Получить(Счетчик);
			Если ЭлементМассива = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ТекстОтсутствующие = "";
			ТекстНайденные = СоответствиеТипа.Ключ;
			
			Для ИндексВнутренний = 0 По КоличествоИсточников - 1 Цикл
				
				Если Индекс = ИндексВнутренний Тогда
					Продолжить;
				КонецЕсли;
				
				СоответствиеПоиска = ЭлементСоответствия(МассивСоответствий.Получить(ИндексВнутренний));
				// Если соответствие = Неопределено Тогда надо писать что ничего не нашли
				МассивПоиска = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(СоответствиеПоиска.Значение);
				ИндексНайденногоЭлемента = МассивПоиска.Найти(ЭлементМассива);
				ИмяТипа = СоответствиеПоиска.Ключ;
				
				Если ИндексНайденногоЭлемента = Неопределено Тогда
					
					ТекстОтсутствующие = ?(ПустаяСтрока(ТекстОтсутствующие), ИмяТипа,
						ТекстОтсутствующие + Символы.ПС + ИмяТипа);
					
				Иначе
					
					ТекстНайденные = ТекстНайденные + Символы.ПС + ИмяТипа;
					МассивПоиска[ИндексНайденногоЭлемента] = Неопределено;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если Не ПустаяСтрока(ТекстОтсутствующие) Тогда
				
				ШаблонОшибки = НСтр("ru = '%1 отсутствует в составе
				|%2,
				|но присутствует в составе
				|%3'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, ЭлементМассива.ПолноеИмя(),
					МаркированныйСписок(ТекстОтсутствующие), МаркированныйСписок(ТекстНайденные));
				ДобавитьОшибку(ЭлементМассива, НСтр("ru = 'Различается состав типов'"), ТекстОшибки);
				
			КонецЕсли;
			
			МассивЭлементов[Счетчик] = Неопределено;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Проверяет наличие вставки кода
Процедура ПроверитьНаличиеВставкиКода(ПроверяемыеДанные, ТипМодуля, СтрокаКода, ИмяПроцедурыИлиФункции = "",
	ОтсутствиеМодуляЯвляетсяОшибкой = Истина, ОтсутствиеПроцедурыЯвляетсяОшибкой = Истина)
	
	ТипОбъекта = ТипЗнч(ПроверяемыеДанные);
	Если ТипОбъекта = Тип("ОбъектМетаданных") Тогда
		ПроверитьНаличиеВставкиКодаДляОбъекта(ПроверяемыеДанные, ТипМодуля, СтрокаКода, ИмяПроцедурыИлиФункции,
			ОтсутствиеМодуляЯвляетсяОшибкой, ОтсутствиеПроцедурыЯвляетсяОшибкой);
		Возврат;
	КонецЕсли;
	
	Если ТипОбъекта = Тип("Соответствие") Тогда
		МассивТипов = ЭлементСоответствия(ПроверяемыеДанные).Значение;
	ИначеЕсли ТипОбъекта = Тип("Строка") Тогда
		МассивТипов = СоставТипаИзСтроки(ПроверяемыеДанные)
	ИначеЕсли ТипОбъекта = Тип("Массив") Тогда
		МассивТипов = ПроверяемыеДанные;
	Иначе
		ВызватьИсключение НСтр("ru = 'Неожиданный тип параметра ПроверяемыеДанные в процедуре ""ПроверитьНаличиеВставкиКода""'");
	КонецЕсли;
	
	Для Каждого ОбъектМетаданных Из МассивТипов Цикл
		ПроверитьНаличиеВставкиКодаДляОбъекта(ОбъектМетаданных, ТипМодуля, СтрокаКода, ИмяПроцедурыИлиФункции,
			ОтсутствиеМодуляЯвляетсяОшибкой, ОтсутствиеПроцедурыЯвляетсяОшибкой);
	КонецЦикла;
	
КонецПроцедуры

// Проверяет что в источниках типов нет одинаковых типов
Процедура ПересечениеТипов(МассивИсточников)
	
	МассивСоответствий = ОбработатьСоставИсточников(МассивИсточников);
	КоличествоИсточников = МассивСоответствий.Количество();
	
	Для Индекс = 0 По КоличествоИсточников - 1 Цикл
		
		СоответствиеТипа = ЭлементСоответствия(МассивСоответствий.Получить(Индекс));
		Если СоответствиеТипа = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		МассивЭлементов = СоответствиеТипа.Значение;
		
		Для Счетчик = 0 По МассивЭлементов.Количество() - 1 Цикл
			
			ЭлементМассива = МассивЭлементов.Получить(Счетчик);
			Если ЭлементМассива = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ТекстНайденные = СоответствиеТипа.Ключ;
			ЕстьОшибка = Ложь;
			
			Для ИндексВнутренний = 0 По КоличествоИсточников - 1 Цикл
				
				Если Индекс = ИндексВнутренний Тогда
					Продолжить;
				КонецЕсли;
				
				СоответствиеПоиска = ЭлементСоответствия(МассивСоответствий.Получить(ИндексВнутренний));
				Если СоответствиеПоиска = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				МассивПоиска = СоответствиеПоиска.Значение;
				ИндексНайденногоЭлемента = МассивПоиска.Найти(ЭлементМассива);
				ИмяТипа = СоответствиеПоиска.Ключ;
				
				Если ИндексНайденногоЭлемента <> Неопределено Тогда
					
					ТекстНайденные = ТекстНайденные + Символы.ПС + ИмяТипа;
					МассивПоиска[ИндексНайденногоЭлемента] = Неопределено;
					ЕстьОшибка = Истина;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если ЕстьОшибка Тогда
				
				ШаблонОшибки = НСтр("ru = '%1 необходимо включить только в один источник. Сейчас он присутствует в
					|%2'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, ЭлементМассива.ПолноеИмя(),
					МаркированныйСписок(ТекстНайденные));
				ДобавитьОшибку(ЭлементМассива, НСтр("ru = 'Пересекается состав типов'"), ТекстОшибки);
				
			КонецЕсли;
			
			МассивЭлементов[Счетчик] = Неопределено;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает соответствие типа
Функция СоставТипа(Знач ИсточникТипа, ИсключаемыеТипы = "")
	
	Если ТипЗнч(ИсточникТипа) = Тип("Соответствие") Тогда
		
		СоответствиеТипа = ЭлементСоответствия(ИсточникТипа);
		
		Если СоответствиеТипа = Неопределено Тогда
			Возврат Новый Соответствие;
		КонецЕсли;
		
		ИсточникТипа = СоответствиеТипа.Ключ;
		МассивМетаданных = СоответствиеТипа.Значение;
	Иначе // Строка
		
		МассивМетаданных = СоставТипаИзСтроки(ИсточникТипа);
		
	КонецЕсли;
	
	ИсключитьТипы(ИсключаемыеТипы, МассивМетаданных);
	
	СоставТипа = Новый Соответствие;
	СоставТипа.Вставить(ИсточникТипа, МассивМетаданных);
	Возврат СоставТипа;
	
КонецФункции

// Получает состав типов подписок по обработчику
Функция СоставПодписокПоОбработчику(Обработчик)
	
	ЗаполнятьИмя = Истина;
	МассивМетаданных = Новый Массив;
	ИмяПодписки = "";
	
	Для Каждого Подписка Из Метаданные.ПодпискиНаСобытия Цикл
		Если Подписка.Обработчик = Обработчик Тогда
			Если ЗаполнятьИмя Тогда
				Если ПустаяСтрока(ИмяПодписки) Тогда
					ИмяПодписки = Подписка.ПолноеИмя();
				Иначе
					ИмяПодписки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Подписки с обработчиком %1'"), Обработчик);
					ЗаполнятьИмя = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			Для Каждого Тип Из Подписка.Источник.Типы() Цикл
				МассивМетаданных.Добавить(Метаданные.НайтиПоТипу(Тип));
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Если ПустаяСтрока(ИмяПодписки) Тогда
		ИмяПодписки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Подписки с обработчиком %1'"), Обработчик);
	КонецЕсли;
	
	СоответствиеТиповПодписок = Новый Соответствие;
	СоответствиеТиповПодписок.Вставить(ИмяПодписки, МассивМетаданных);
	Возврат СоответствиеТиповПодписок;
	
КонецФункции

Процедура ПроверитьНаличиеПредопределенногоЭлемента(ПолноеИмяОбъектаМетаданных, ИмяПредопределенныхДанных)
	
	МетаданныеОбъекта = Вычислить("Метаданные." + ПолноеИмяОбъектаМетаданных);
	МассивПредопределенных = МетаданныеОбъекта.ПолучитьИменаПредопределенных();
	
	Если МассивПредопределенных.Найти(ИмяПредопределенныхДанных) = Неопределено Тогда
		ШаблонОшибки = НСтр("ru = 'В ""%1"" отсутствует предопределенный элемент ""%2""'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, ПолноеИмяОбъектаМетаданных, ИмяПредопределенныхДанных);
		ДобавитьОшибку(МетаданныеОбъекта, НСтр("ru = 'Отсутствует предопределенный элемент'"), ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

Функция СоответствиеТипа(ОписаниеТипа, МассивТипов)
	
	СоответствиеТипа = Новый Соответствие;
	СоответствиеТипа.Вставить(ОписаниеТипа, МассивТипов);
	Возврат СоответствиеТипа;
	
КонецФункции

Функция ОбъединитьТипы(ОписаниеТипа, МассивИсточников)
	
	МассивТипов = Новый Массив;
	Для Каждого ИсточникТипа Из МассивИсточников Цикл
		Если ТипЗнч(ИсточникТипа) = Тип("Массив") Тогда
			Для Каждого Элемент Из ИсточникТипа Цикл
				Если МассивТипов.Найти(Элемент) = Неопределено Тогда
					МассивТипов.Добавить(Элемент);
				КонецЕсли;
			КонецЦикла;
		Иначе // Соответствие
			Для Каждого ЭлементСоответствия Из ИсточникТипа Цикл
				Для Каждого Элемент Из ЭлементСоответствия.Значение Цикл
					Если МассивТипов.Найти(Элемент) = Неопределено Тогда
						МассивТипов.Добавить(Элемент);
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СоответствиеТипа(ОписаниеТипа, МассивТипов);
	
КонецФункции

Функция ТекстМодуля(ОбъектМетаданных, Знач ТипМодуля)
	
	Если ТипМодуля = "ОсновнаяФормаОбъекта" Или ТипМодуля = "ОсновнаяФормаСписка" Тогда
		
		Если ТипМодуля = "ОсновнаяФормаОбъекта" Тогда
			Если Метаданные.ЖурналыДокументов.Содержит(ОбъектМетаданных)
				Или Метаданные.Обработки.Содержит(ОбъектМетаданных) Тогда
				Форма = ОбъектМетаданных.ОсновнаяФорма;
			ИначеЕсли Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных) Тогда
				Форма = ОбъектМетаданных.ОсновнаяФормаЗаписи;
			ИначеЕсли Метаданные.РегистрыНакопления.Содержит(ОбъектМетаданных)
				Или Метаданные.РегистрыБухгалтерии.Содержит(ОбъектМетаданных) Тогда
				Форма = Неопределено;
			Иначе
				Форма = ОбъектМетаданных.ОсновнаяФормаОбъекта;
			КонецЕсли;
		ИначеЕсли ТипМодуля = "ОсновнаяФормаСписка" Тогда
			Если Метаданные.ЖурналыДокументов.Содержит(ОбъектМетаданных)
				Или Метаданные.Обработки.Содержит(ОбъектМетаданных) Тогда
				Форма = ОбъектМетаданных.ОсновнаяФорма;
			Иначе
				Форма = ОбъектМетаданных.ОсновнаяФормаСписка;
			КонецЕсли;
		КонецЕсли;
		Если Форма = Неопределено Тогда
			Возврат "";
		Иначе
			ИмяФормы = Форма.Имя;
		КонецЕсли;
		ТипМодуля = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Form.%1.Form.Module", ИмяФормы);
	Иначе
		ИмяШаблона = "";
		Если СоответствиеТерминов.Свойство(ТипМодуля, ИмяШаблона) Тогда
			ТипМодуля = ИмяШаблона;
		КонецЕсли;
	КонецЕсли;
	
	ИмяФайлаМодуля = ИмяФайлаМодуля(ОбъектМетаданных, ТипМодуля);
	МассивФайлов = НайтиФайлы(КаталогВыгрузки, ИмяФайлаМодуля);
	
	Если МассивФайлов.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстМодуля = Новый ЧтениеТекста(МассивФайлов[0].ПолноеИмя);
	Возврат ТекстМодуля.Прочитать();
	
КонецФункции

// Возвращает текст процедуры по имени
Функция ТекстПроцедуры(ИмяПроцедуры, ТекстМодуля)
	
	Возврат ТекстПроцедурыИлиФункции(ИмяПроцедуры, ТекстМодуля, Ложь);
	
КонецФункции

Функция ВариантыВызова(Вариант1, Вариант2)
	
	ВариантыВызова = Новый Массив;
	ВариантыВызова.Добавить(Вариант1);
	ВариантыВызова.Добавить(Вариант2);
	Возврат ВариантыВызова;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	НастройкиКД = КомпоновщикНастроек.ПолучитьНастройки();
	КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиКД);
	
	ПроверитьВнедрение();
	
	КомпоновщикМакетаКД = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКД = КомпоновщикМакетаКД.Выполнить(СхемаКомпоновкиДанных, НастройкиКД); // Без расшифровки.
	
	ПроцессорКД = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКД.Инициализировать(МакетКД, Новый Структура("ТаблицаПроверки", ТаблицаПроверки)); // Без расшифровки.
	
	ПроцессорВыводаРезультатаКД = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВыводаРезультатаКД.УстановитьДокумент(ДокументРезультат);
	ПроцессорВыводаРезультатаКД.Вывести(ПроцессорКД);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СоответствиеТерминов()
	
	СтруктураПредставлений = Новый Структура;
	
	// Виды объектов метаданных.
	СтруктураПредставлений.Вставить("РегистрБухгалтерии", "AccountingRegister");
	СтруктураПредставлений.Вставить("РегистрНакопления", "AccumulationRegister");
	СтруктураПредставлений.Вставить("БизнесПроцесс", "BusinessProcess");
	СтруктураПредставлений.Вставить("РегистрРасчета", "CalculationRegister");
	СтруктураПредставлений.Вставить("Справочник", "Catalog");
	СтруктураПредставлений.Вставить("ПланСчетов", "ChartOfAccounts");
	СтруктураПредставлений.Вставить("ПланВидовРасчета", "ChartOfCalculationTypes");
	СтруктураПредставлений.Вставить("ПланВидовХарактеристик", "ChartOfCharacteristicTypes");
	СтруктураПредставлений.Вставить("ГруппаКоманд", "CommandGroup");
	СтруктураПредставлений.Вставить("ОбщийРеквизит", "CommonAttribute");
	СтруктураПредставлений.Вставить("ОбщаяКоманда", "CommonCommand");
	СтруктураПредставлений.Вставить("ОбщаяФорма", "CommonForm");
	СтруктураПредставлений.Вставить("ОбщийМодуль", "CommonModule");
	СтруктураПредставлений.Вставить("ОбщаяКартинка", "CommonPicture");
	СтруктураПредставлений.Вставить("ОбщийМакет", "CommonTemplate");
	СтруктураПредставлений.Вставить("Конфигурация", "Configuration");
	СтруктураПредставлений.Вставить("Константа", "Constant");
	СтруктураПредставлений.Вставить("Обработка", "DataProcessor");
	СтруктураПредставлений.Вставить("ОпределяемыйТип", "DefinedType");
	СтруктураПредставлений.Вставить("Документ", "Document");
	СтруктураПредставлений.Вставить("ЖурналДокументов", "DocumentJournal");
	СтруктураПредставлений.Вставить("НумераторДокументов", "DocumentNumerator");
	СтруктураПредставлений.Вставить("Перечисление", "Enum");
	СтруктураПредставлений.Вставить("ПодпискаНаСобытие", "EventSubscription");
	СтруктураПредставлений.Вставить("ПланОбмена", "ExchangePlan");
	СтруктураПредставлений.Вставить("КритерийОтбора", "FilterCriterion");
	СтруктураПредставлений.Вставить("ФункциональнаяОпция", "FunctionalOption");
	СтруктураПредставлений.Вставить("ПараметрФункциональныхОпций", "FunctionalOptionsParameter");
	СтруктураПредставлений.Вставить("РегистрСведений", "InformationRegister");
	СтруктураПредставлений.Вставить("Язык", "Language");
	СтруктураПредставлений.Вставить("Отчет", "Report");
	СтруктураПредставлений.Вставить("Роль", "Role");
	СтруктураПредставлений.Вставить("РегламентноеЗадание", "ScheduledJob");
	СтруктураПредставлений.Вставить("Последовательность", "Sequence");
	СтруктураПредставлений.Вставить("ПараметрСеанса", "SessionParameter");
	СтруктураПредставлений.Вставить("ХранилищеНастроек", "SettingsStorage");
	СтруктураПредставлений.Вставить("Стиль", "Style");
	СтруктураПредставлений.Вставить("ЭлементСтиля", "StyleItem");
	СтруктураПредставлений.Вставить("Подсистема", "Subsystem");
	СтруктураПредставлений.Вставить("Задача", "Task");
	СтруктураПредставлений.Вставить("WebСервис", "WebService");
	СтруктураПредставлений.Вставить("WSСсылка", "WSReference");
	СтруктураПредставлений.Вставить("ПакетXDTO", "XDTOPackage");
	
	// Типы вложенных объектов метаданных.
	СтруктураПредставлений.Вставить("Модуль", "Module");
	СтруктураПредставлений.Вставить("МодульМенеджера", "ManagerModule");
	СтруктураПредставлений.Вставить("МодульОбъекта", "ObjectModule");
	СтруктураПредставлений.Вставить("МодульКоманды", "CommandModule");
	СтруктураПредставлений.Вставить("МодульНабораЗаписей", "RecordSetModule");
	СтруктураПредставлений.Вставить("МодульМенеджераЗначения", "ValueManagerModule");
	
	СтруктураПредставлений.Вставить("МодульВнешнегоСоединения", "ExternalConnectionModule");
	СтруктураПредставлений.Вставить("МодульУправляемогоПриложения", "ManagedApplicationModule");
	СтруктураПредставлений.Вставить("МодульОбычногоПриложения", "OrdinaryApplicationModule");
	СтруктураПредставлений.Вставить("МодульСеанса", "SessionModule");
	
	СтруктураПредставлений.Вставить("Справка", "Help");
	СтруктураПредставлений.Вставить("Форма", "Form");
	СтруктураПредставлений.Вставить("КартаМаршрута", "Flowchart");
	СтруктураПредставлений.Вставить("Картинка", "Picture");
	СтруктураПредставлений.Вставить("КомандныйИнтерфейс", "CommandInterface");
	
	СтруктураПредставлений.Вставить("Макет", "Template");
	СтруктураПредставлений.Вставить("Команда", "Command");
	СтруктураПредставлений.Вставить("Агрегаты", "Aggregates");
	СтруктураПредставлений.Вставить("Перерасчет", "Recalculation");
	СтруктураПредставлений.Вставить("Предопределенные", "Predefined");
	СтруктураПредставлений.Вставить("Состав", "Content");
	СтруктураПредставлений.Вставить("Права", "Rights");
	СтруктураПредставлений.Вставить("Расписание", "Schedule");
	
	Возврат СтруктураПредставлений;
	
КонецФункции

Функция ТекстПроцедурыИлиФункции(Знач ИмяПроцедурыИлиФункции, ТекстМодуля, ЭтоФункция = Неопределено)
	
	Если ЭтоФункция = Неопределено Тогда
		ЭтоФункция = СтрНачинаетсяС(ИмяПроцедурыИлиФункции, "Функция");
	Иначе
		НачалоИмени = ?(ЭтоФункция, "Функция", "Процедура");
		ИмяПроцедурыИлиФункции = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 %2", НачалоИмени, ИмяПроцедурыИлиФункции);
	КонецЕсли;
	
	СимволНачала = СтрНайти(ТекстМодуля, ИмяПроцедурыИлиФункции);
	
	Если СимволНачала = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	СтрокаОкончания = ?(ЭтоФункция, "КонецФункции", "КонецПроцедуры");
	СимволОкончания = СтрНайти(ТекстМодуля, СтрокаОкончания,, СимволНачала);
	
	ТекстСОбъявлением = Сред(ТекстМодуля, СимволНачала, СимволОкончания - СимволНачала);
	ЗакрывающаяСкобка = СтрНайти(ТекстСОбъявлением, ")");
	ПереводСтроки = СтрНайти(ТекстСОбъявлением, Символы.ПС,, ЗакрывающаяСкобка);
	
	Возврат Сред(ТекстСОбъявлением, ПереводСтроки + 1);
	
КонецФункции

Функция ИмяФайлаМодуля(ОбъектМетаданных, ТипМодуля)
	
	ШаблонИмени = "[ИмяБазовогоТипа].[ИмяОбъекта].[ТипМодуля].txt";
	
	ИмяБазовогоТипа = СтрРазделить(ОбъектМетаданных.ПолноеИмя(), ".")[0];
	ИмяБазовогоТипа = СоответствиеТерминов[ИмяБазовогоТипа];
	ИмяОбъекта = ОбъектМетаданных.Имя;
	
	ИмяФайлаМодуля = СтрЗаменить(ШаблонИмени, "[ИмяБазовогоТипа]", ИмяБазовогоТипа);
	ИмяФайлаМодуля = СтрЗаменить(ИмяФайлаМодуля, "[ИмяОбъекта]", ИмяОбъекта);
	ИмяФайлаМодуля = СтрЗаменить(ИмяФайлаМодуля, "[ТипМодуля]", ТипМодуля);
	
	Возврат ИмяФайлаМодуля;
	
КонецФункции

Процедура ВыгрузитьКонфигурациюВXML(КаталогВыгрузкиКонфигурации)
	
	Если Не ПустаяСтрока(КаталогВыгрузкиКонфигурации) Тогда
		Каталог = Новый Файл(КаталогВыгрузкиКонфигурации);
		Если Не Каталог.Существует() Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Указанный каталог выгрузки ""%1"" не существует.'"), КаталогВыгрузкиКонфигурации);
		КонецЕсли;
		Если НайтиФайлы(КаталогВыгрузкиКонфигурации, "Configuration.xml").Количество() = 0 Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Указанный каталог выгрузки ""%1"" не содержит файлов выгрузки конфигурации.'"), КаталогВыгрузкиКонфигурации);
		КонецЕсли;
		КаталогВыгрузки = КаталогВыгрузкиКонфигурации;
		Возврат;
	КонецЕсли;
	
	Если ПользователиИнформационнойБазы.ТекущийПользователь().ПарольУстановлен Тогда
		ВызватьИсключение НСтр("ru = 'Проверка внедрения возможна только для пользователя без пароля.'");
	КонецЕсли;
	
	КаталогВыгрузки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1%2_%3", КаталогВременныхФайлов(), "ПроверкаВнедренияБСП", Лев(Новый УникальныйИдентификатор, 4));
	КаталогПрограммы = ПараметрыСеанса.ПараметрыКлиентаНаСервере.Получить("КаталогПрограммы");
	Файл = Новый Файл(КаталогВыгрузки);
	СоздатьКаталог(КаталогВыгрузки);
	
	СтрокаСоединения = СтрокаСоединенияИнформационнойБазы();
	Если ОткрытКонфигуратор() Тогда
		Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
			КаталогИнформационнойБазы = СтроковыеФункцииКлиентСервер.ПолучитьПараметрыИзСтроки(СтрокаСоединения).file;
			КопироватьФайл(КаталогИнформационнойБазы + "\1Cv8.1CD", КаталогВыгрузки + "\1Cv8.1CD");
			СтрокаСоединения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("File=""%1"";", КаталогВыгрузки);
		Иначе
			ВызватьИсключение НСтр("ru = 'Для проверки внедрения необходимо закрыть конфигуратор.'");
		КонецЕсли;
	КонецЕсли;
	
	Кавычка = """";
	ПутьКБазе = СтрЗаменить(СтрокаСоединения, Кавычка, Кавычка + Кавычка);
	
	КодВозврата = Неопределено;
	Кавычка = """";
	Пользователь = ПользователиИнформационнойБазы.ТекущийПользователь().Имя;
	Пароль = "";
	ИмяФайлаСообщений = КаталогВыгрузки + "\СообщенияВыгрузкиКонфигурацииВФайлы.txt";
	
	ЗапуститьПриложение(Кавычка + КаталогПрограммы + "1cv8.exe" + Кавычка + " DESIGNER"
	+ " /IBConnectionString " + Кавычка + ПутьКБазе + Кавычка
	+ " /N "                  + Кавычка + Пользователь + Кавычка
	+ " /P "                  + Кавычка + Пароль + Кавычка
	+ " /DumpConfigToFiles "  + Кавычка + КаталогВыгрузки + Кавычка
	+ " -Format Plain"
	+ " /Out "                + Кавычка + ИмяФайлаСообщений + Кавычка
	+ " /DisableStartupMessages /DisableStartupDialogs "
	,
	,
	Истина,
	КодВозврата);
	
	Если КодВозврата <> 0 Тогда
		ЕстьОшибки = Истина;
		Попытка
			Текст = Новый ТекстовыйДокумент;
			Текст.Прочитать(ИмяФайлаСообщений);
			Сообщения = Текст.ПолучитьТекст();
		Исключение
			Сообщения = "";
		КонецПопытки;
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось выполнить выгрузку конфигурации в файлы по причине:
			           |%1'"), Сообщения);
	КонецЕсли;
	
КонецПроцедуры

Функция РезультатПроверки(ПараметрыПроверки)
	
	Если ПараметрыПроверки = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РезультатСтрокой = ?(ПараметрыПроверки.Свойство("РезультатСтрокой"), ПараметрыПроверки.РезультатСтрокой, Ложь);
	
	Если ПараметрыПроверки.Свойство("РасширениеФайлаПроверки") Тогда
		РасширениеФайлаПроверки = ПараметрыПроверки.РасширениеФайлаПроверки;
		// Временный файл должен удаляться вызывающим кодом.
		ИмяФайлаРезультатаПроверки = ПолучитьИмяВременногоФайла(РасширениеФайлаПроверки);
	ИначеЕсли ПараметрыПроверки.Свойство("ПолныйПутьКФайлуПроверки") Тогда
		ИмяФайлаРезультатаПроверки = ПараметрыПроверки.ПолныйПутьКФайлуПроверки;
		РасширениеФайлаПроверки = ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(ИмяФайлаРезультатаПроверки);
	КонецЕсли;
	Если НРег(РасширениеФайлаПроверки) = "txt" Тогда
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ШаблонОшибки = НСтр("ru = 'Объект: %1
		|Проверка: %2
		|Текст ошибки: %3'");
		Для Каждого ОшибкаВнедрения Из ТаблицаПроверки Цикл
			ТекстовыйДокумент.ДобавитьСтроку(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки,
			ОшибкаВнедрения.ОбъектМетаданных, ОшибкаВнедрения.КраткоеОписаниеОшибки,
			ОшибкаВнедрения.ПодробноеОписаниеОшибки));
		КонецЦикла;
		Если РезультатСтрокой Тогда
			ТекстОшибки = ТекстовыйДокумент.ПолучитьТекст();
		Иначе
			ТекстовыйДокумент.Записать(ИмяФайлаРезультатаПроверки);
		КонецЕсли;
	ИначеЕсли НРег(РасширениеФайлаПроверки) = "xml" Тогда
		ЗаписьXML = Новый ЗаписьXML;
		Если РезультатСтрокой Тогда
			ЗаписьXML.УстановитьСтроку("UTF-8");
		Иначе
			ЗаписьXML.ОткрытьФайл(ИмяФайлаРезультатаПроверки);
		КонецЕсли;
		ЗаписьXML.ЗаписатьОбъявлениеXML();
		ЗаписьXML.ЗаписатьНачалоЭлемента("ПроверкаВнедрения");
		Для Каждого ОшибкаВнедрения Из ТаблицаПроверки Цикл
			ЗаписьXML.ЗаписатьНачалоЭлемента("Ошибка");
			ЗаписьXML.ЗаписатьНачалоЭлемента("ОбъектМетаданных");
			ЗаписьXML.ЗаписатьТекст(ОшибкаВнедрения.ОбъектМетаданных);
			ЗаписьXML.ЗаписатьКонецЭлемента();
			ЗаписьXML.ЗаписатьНачалоЭлемента("Проверка");
			ЗаписьXML.ЗаписатьТекст(ОшибкаВнедрения.КраткоеОписаниеОшибки);
			ЗаписьXML.ЗаписатьКонецЭлемента();
			ЗаписьXML.ЗаписатьНачалоЭлемента("ТекстОшибки");
			ЗаписьXML.ЗаписатьТекст(ОшибкаВнедрения.ПодробноеОписаниеОшибки);
			ЗаписьXML.ЗаписатьКонецЭлемента();
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЦикла;
		ЗаписьXML.ЗаписатьКонецЭлемента();
		ТекстОшибки = ЗаписьXML.Закрыть();
	КонецЕсли;
	Возврат ?(РезультатСтрокой, ТекстОшибки, ИмяФайлаРезультатаПроверки);
	
КонецФункции

Процедура ЗаполнитьДанныеДляПроверки()
	
	СоответствиеТерминов = СоответствиеТерминов();
	
	ДеревоПодсистем = Новый ДеревоЗначений;
	ДеревоПодсистем.Колонки.Добавить("Подсистема");
	ЗаполнитьДеревоПодсистем(Метаданные.Подсистемы, ДеревоПодсистем.Строки);
	
	СоответствиеОбъектов = Новый Соответствие;
	Для Каждого Подсистема Из Метаданные.Подсистемы Цикл
		ЗаполнитьОбъектыПодсистем(Подсистема);
	КонецЦикла;
	
КонецПроцедуры

Функция ОткрытКонфигуратор()
	
	Для Каждого Сеанс Из ПолучитьСеансыИнформационнойБазы() Цикл
		Если ВРег(Сеанс.ИмяПриложения) = ВРег("Designer") Тогда // Конфигуратор
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
	
КонецФункции

Функция ОбработатьСоставИсточников(МассивИсточников)
	
	МассивСоответствий = Новый Массив;
	
	Для Каждого ИсточникТипа Из МассивИсточников Цикл
		
		ТипИсточника = ТипЗнч(ИсточникТипа);
		
		Если ТипИсточника = Тип("Строка") Тогда
			СоответствиеТипа = СтрокаТипаВСоответствие(ИсточникТипа);
		ИначеЕсли ТипИсточника = Тип("Соответствие") Тогда
			СоответствиеТипа = ИсточникТипа;
		Иначе
			ВызватьИсключение НСтр("ru = 'Некорректный тип в параметре МассивИсточников функции СравнитьТипы'");
		КонецЕсли;
		
		МассивСоответствий.Добавить(СоответствиеТипа);
		
	КонецЦикла;
	
	Возврат МассивСоответствий;
	
КонецФункции

Функция СтрокаТипаВСоответствие(Знач СтрокаТипа)
	
	МассивМетаданных = СоставТипаИзСтроки(СтрокаТипа);
	
	СоответствиеТипа = Новый Соответствие;
	СоответствиеТипа.Вставить(СтрокаТипа, МассивМетаданных);
	
	Возврат СоответствиеТипа;
	
КонецФункции

Функция СоставТипаИзСтроки(СтрокаТипа)
	
	МетаданныеИсточника = Вычислить("Метаданные." + СтрокаТипа);
	МассивМетаданных = Новый Массив;
	Если ТипЗнч(МетаданныеИсточника) = Тип("ОписаниеТипов") Тогда
		Для Каждого Тип Из МетаданныеИсточника.Типы() Цикл
			МассивМетаданных.Добавить(Метаданные.НайтиПоТипу(Тип));
		КонецЦикла;
	Иначе
		Для Каждого ОбъектМетаданных Из МетаданныеИсточника Цикл
			МассивМетаданных.Добавить(ОбъектМетаданных);
		КонецЦикла;
	КонецЕсли;
	
	Возврат МассивМетаданных;
	
КонецФункции

Функция ЭлементСоответствия(СоответствиеТипа)
	
	Для Каждого ЭлементСоответствия Из СоответствиеТипа Цикл
		Возврат ЭлементСоответствия;
	КонецЦикла;
	
КонецФункции

Процедура ИсключитьТипы(ИсключаемыеТипы, МассивМетаданных)
	
	Если Не ПустаяСтрока(ИсключаемыеТипы) Тогда
		
		МассивИсключаемыхТипов = СтрРазделить(ИсключаемыеТипы, ",",);
		
		Для Каждого ИсключаемыйТип Из МассивИсключаемыхТипов Цикл
			
			ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ИсключаемыйТип);
			
			ИндексЭлемента = МассивМетаданных.Найти(ОбъектМетаданных);
			
			Если ИндексЭлемента <> Неопределено Тогда
				
				МассивМетаданных.Удалить(ИндексЭлемента);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДеревоПодсистем(Подсистемы, ДеревоПодсистем)
	
	Для Каждого Подсистема Из Подсистемы Цикл
		НоваяСтрока = ДеревоПодсистем.Добавить();
		НоваяСтрока.Подсистема = Подсистема;
		Если Подсистема.Подсистемы.Количество() > 0 Тогда
			ЗаполнитьДеревоПодсистем(Подсистема.Подсистемы, НоваяСтрока.Строки);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьОбъектыПодсистем(Подсистема)
	
	Для Каждого Объект Из Подсистема.Состав Цикл
		СтрокаДерева = ДеревоПодсистем.Строки.Найти(Подсистема, "Подсистема", Истина);
		СоответствиеОбъектов.Вставить(Объект, ПодсистемаВерхнегоУровня(СтрокаДерева));
	КонецЦикла;
	
	Для Каждого ПодчиненнаяПодсистема Из Подсистема.Подсистемы Цикл
		ЗаполнитьОбъектыПодсистем(ПодчиненнаяПодсистема)
	КонецЦикла;
	
КонецПроцедуры

Функция ПодсистемаВерхнегоУровня(СтрокаДерева)
	
	Если СтрокаДерева = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаДерева.Родитель) Тогда
		Возврат ПодсистемаВерхнегоУровня(СтрокаДерева.Родитель);
	Иначе
		Возврат СтрокаДерева.Подсистема;
	КонецЕсли;
	
КонецФункции

Процедура ПроверитьНаличиеВставкиКодаДляОбъекта(ОбъектМетаданных, ТипМодуля, СтрокаКода,
	ИмяПроцедурыИлиФункции, ОтсутствиеМодуляЯвляетсяОшибкой, ОтсутствиеПроцедурыЯвляетсяОшибкой)
	
	ТекстМодуля = ТекстМодуля(ОбъектМетаданных, ТипМодуля);
	
	Если ТипЗнч(СтрокаКода) = Тип("Массив") Тогда
		Для Каждого СтрокаВызова Из СтрокаКода Цикл
			ТекстМодуляСодержитПроцедуру(ОбъектМетаданных, ТекстМодуля, ТипМодуля, СтрокаВызова,
				ИмяПроцедурыИлиФункции, ОтсутствиеМодуляЯвляетсяОшибкой, ОтсутствиеПроцедурыЯвляетсяОшибкой);
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	ТекстМодуляСодержитПроцедуру(ОбъектМетаданных, ТекстМодуля, ТипМодуля, СтрокаКода,
		ИмяПроцедурыИлиФункции, ОтсутствиеМодуляЯвляетсяОшибкой, ОтсутствиеПроцедурыЯвляетсяОшибкой);
	
КонецПроцедуры

Процедура ТекстМодуляСодержитПроцедуру(ОбъектМетаданных, ТекстМодуля, ТипМодуля, СтрокаКода, ИмяПроцедурыИлиФункции,
	ОтсутствиеМодуляЯвляетсяОшибкой, ОтсутствиеПроцедурыЯвляетсяОшибкой)
	
	Если ТипЗнч(СтрокаКода) = Тип("Массив") Тогда
		СтрокаВызова = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '""%1"" или ""%2""'"), СтрокаКода[0], СтрокаКода[1]);
	Иначе
		СтрокаВызова = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '""%1""'"), СтрокаКода);
	КонецЕсли;
	
	МодульПустой = ПустаяСтрока(ТекстМодуля);
	ЗаданоИмяПроцедуры = Не ПустаяСтрока(ИмяПроцедурыИлиФункции);
	ПолноеИмяОбъекта = ОбъектМетаданных.ПолноеИмя();
	КраткоеПредставлениеОшибки = НСтр("ru = 'Отсутствует обязательная вставка кода'");
	
	Если МодульПустой Тогда
		Если ОтсутствиеМодуляЯвляетсяОшибкой Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Для объекта %1 отсутствует модуль %2. 
				|Обязательно наличие модуля и вызова из него %3'"),
				ПолноеИмяОбъекта, ТипМодуля, СтрокаВызова);
			ДобавитьОшибку(ОбъектМетаданных, КраткоеПредставлениеОшибки, ТекстОшибки);
		КонецЕсли;
		Возврат;
	Иначе
		ОбластьПоиска = ТекстМодуля;
		Если ЗаданоИмяПроцедуры Тогда
			ОбластьПоиска = ТекстПроцедурыИлиФункции(ИмяПроцедурыИлиФункции, ТекстМодуля);
			Если ПустаяСтрока(ОбластьПоиска) Тогда
				Если ОтсутствиеПроцедурыЯвляетсяОшибкой Тогда
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В модуле %1 объекта %2 отсутствует обязательная процедура %3. 
						|В ней требуется наличие вставки кода %4'"),
						ТипМодуля, ПолноеИмяОбъекта, ИмяПроцедурыИлиФункции, СтрокаВызова);
					ДобавитьОшибку(ОбъектМетаданных, КраткоеПредставлениеОшибки, ТекстОшибки);
				КонецЕсли;
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Если ТипЗнч(СтрокаКода) = Тип("Массив") Тогда
			Если СтрНайти(ОбластьПоиска, СтрокаКода[0]) = 0 И СтрНайти(ОбластьПоиска, СтрокаКода[1]) = 0 Тогда
				Если ЗаданоИмяПроцедуры Тогда
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В модуле %1 объекта %2 в процедуре %3 
					|отсутствует обязательная вставка кода %4'"),
					ТипМодуля, ПолноеИмяОбъекта, ИмяПроцедурыИлиФункции, СтрокаВызова);
				Иначе
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В модуле %1 объекта %2 отсутствует
					|обязательная вставка кода %3'"),
					ТипМодуля, ПолноеИмяОбъекта, СтрокаВызова);
				КонецЕсли;
				ДобавитьОшибку(ОбъектМетаданных, КраткоеПредставлениеОшибки, ТекстОшибки);
			КонецЕсли;
		Иначе
			Если СтрНайти(ОбластьПоиска, СтрокаКода) = 0 Тогда
				Если ЗаданоИмяПроцедуры Тогда
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В модуле %1 объекта %2 в процедуре %3 
					|отсутствует обязательная вставка кода %4'"),
					ТипМодуля, ПолноеИмяОбъекта, ИмяПроцедурыИлиФункции, СтрокаВызова);
				Иначе
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В модуле %1 объекта %2 отсутствует
					|обязательная вставка кода %3'"),
					ТипМодуля, ПолноеИмяОбъекта, СтрокаВызова);
				КонецЕсли;
				ДобавитьОшибку(ОбъектМетаданных, КраткоеПредставлениеОшибки, ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция МаркированныйСписок(Знач Строка)
	
	Если ТипЗнч(Строка) = Тип("Массив") Тогда
		Строка = СтрСоединить(Строка, Символы.ПС);
	КонецЕсли;
	
	Маркер = "• ";
	Строка = СтрЗаменить(Строка, Символы.ПС, Символы.ПС + Маркер);
	Строка = Маркер + Строка;
	
	Возврат Строка;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыПодсистем

#Область ВариантыОтчетов

Процедура ВариантыОтчетов_ПроверитьПодключениеКФормамОтчета(Кэш, СтрокаОтчет)
	Если Не СтрокаОтчет.ФорматНастроекСКД Тогда
		Возврат;
	КонецЕсли;
	
	МодульВариантыОтчетов = ОбщегоНазначения.ОбщийМодуль("ВариантыОтчетов");
	
	ПодключенКОсновнойФорме = МодульВариантыОтчетов.ОтчетПодключенКОсновнойФорме(СтрокаОтчет.Метаданные, Кэш.ФлажокОсновнойФормы);
	ПодключенКФормеНастроек = МодульВариантыОтчетов.ОтчетПодключенКФормеНастроек(СтрокаОтчет.Метаданные, Кэш.ФлажокФормыНастроек);
	Если ПодключенКОсновнойФорме <> ПодключенКФормеНастроек Тогда
		Если ПодключенКОсновнойФорме Тогда
			ТекстОшибки = НСтр("ru = 'Отчет подключен к общей форме отчета, но не подключен к общей форме настроек.'");
		Иначе
			ТекстОшибки = НСтр("ru = 'Отчет не подключен к общей форме отчета, но подключен к общей форме настроек.'");
		КонецЕсли;
		ТекстОшибки = ТекстОшибки + Символы.ПС + НСтр("ru = 'Подробнее см. в документации по внедрению подсистемы.'");
		ДобавитьОшибку(
			СтрокаОтчет.Метаданные,
			НСтр("ru = 'Отчет не подключен к общим формам'"),
			ТекстОшибки);
	КонецЕсли;
КонецПроцедуры

Процедура ВариантыОтчетов_ПроверитьИспользованиеУстаревшихСвойств(Кэш, СтрокаОтчет)
	Если Не СтрокаОтчет.ОпределитьНастройкиФормы Тогда
		Возврат;
	КонецЕсли;
	НастройкиОтчета = ОбщегоНазначения.ОбщийМодуль("ОтчетыКлиентСервер").ПолучитьНастройкиОтчетаПоУмолчанию();
	Попытка
		СтрокаОтчет.Объект.ОпределитьНастройкиФормы(Неопределено, Неопределено, НастройкиОтчета);
	Исключение
		ТекстОшибки = НСтр("ru = 'Модуль объекта отчета, процедура ""ОпределитьНастройкиФормы"":
			|  Ошибка при вызове события с параметрами (Неопределено, Неопределено, НастройкиОтчета):
			|    %1
			|  По возможности следует отказаться от использования параметров ""Форма"" и ""КлючВарианта"",
			|  поскольку в них может быть передано значение Неопределено.
			|  Типы параметров этой процедуры см. в шаблоне этой процедуры,
			|  который описан в комментарии к ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов().'");
		Подробно = СтрЗаменить(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), Символы.ПС, Символы.ПС + "    ");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Подробно);
		ДобавитьОшибку(
			СтрокаОтчет.Метаданные,
			НСтр("ru = 'Используются необязательные параметры события ОпределитьНастройкиФормы'"),
			ТекстОшибки);
		Возврат;
	КонецПопытки;
	
	ТекстМодуля = ТекстМодуля(СтрокаОтчет.Метаданные, "МодульОбъекта");
	ТекстПроцедуры = ТекстПроцедуры("ОпределитьНастройкиФормы", ТекстМодуля);
	
	Если Не ПустаяСтрока(ТекстПроцедуры) Тогда
		Имена = "";
		Если СтрНайти(ТекстПроцедуры, "ПараметрыПечатиПоУмолчанию") > 0 Тогда
			Имена = ?(Имена = "", "", Имена + ", ") + "ПараметрыПечатиПоУмолчанию";
		КонецЕсли;
		Если СтрНайти(ТекстПроцедуры, "СоответствиеПериодичностиПараметров") > 0 Тогда
			Имена = ?(Имена = "", "", Имена + ", ") + "СоответствиеПериодичностиПараметров";
		КонецЕсли;
		Если Имена <> "" Тогда
			ТекстОшибки = НСтр("ru = 'Модуль объекта отчета, процедура ""ОпределитьНастройкиФормы"":
				|  Встречаются обращения к устаревшим параметрам ""%1"".
				|  Актуальный состав параметров см. в ОтчетыКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию().'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Имена);
			ДобавитьОшибку(
				СтрокаОтчет.Метаданные,
				НСтр("ru = 'Используются устаревшие настройки в ОпределитьНастройкиФормы'"),
				ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Если НастройкиОтчета.События.ПриОпределенииПараметровВыбора Тогда
		ТекстПроцедуры = ТекстПроцедуры("ПриОпределенииПараметровВыбора", ТекстМодуля);
		
		Если Не ПустаяСтрока(ТекстПроцедуры) Тогда
			Если СтрНайти(ТекстПроцедуры, "Форма") > 0 Тогда
				ТекстОшибки = НСтр("ru = 'Модуль объекта отчета, процедура ""ПриОпределенииПараметровВыбора"":
					|  Встречаются обращения к параметру ""Форма"".
					|  По возможности следует отказаться от использования этого параметра,
					|  поскольку в нем может быть передано значение Неопределено.
					|  Типы параметров этой процедуры см. в шаблоне этой процедуры,
					|  который описан в комментарии к ОтчетыКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию().'");
				ДобавитьОшибку(
					СтрокаОтчет.Метаданные,
					НСтр("ru = 'Используются устаревшие настройки в ОпределитьНастройкиФормы'"),
					ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ВариантыОтчетов_ПроверитьНастройкиДляПоиска(Кэш, СтрокаОтчет, СтрокаВариант)
	Если Не СтрокаВариант.Включен
		Или СтрокаВариант.Размещение.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НадоЗаполнитьОписание = Ложь;
	НадоЗаполнитьНастройкиДляПоиска = Ложь;
	Если Не ЗначениеЗаполнено(СтрокаВариант.Описание) Тогда
		НадоЗаполнитьОписание = Истина;
	КонецЕсли;
	Если Не СтрокаОтчет.ИспользуетСКД
		И Не ЗначениеЗаполнено(СтрокаВариант.НастройкиДляПоиска.НаименованияПолей)
		И Не ЗначениеЗаполнено(СтрокаВариант.НастройкиДляПоиска.НаименованияПараметровИОтборов)
		И Не ЗначениеЗаполнено(СтрокаВариант.НастройкиДляПоиска.КлючевыеСлова) Тогда
		НадоЗаполнитьНастройкиДляПоиска = Истина;
	КонецЕсли;
	Если Не НадоЗаполнитьОписание И Не НадоЗаполнитьНастройкиДляПоиска Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаВариант.КлючВарианта) Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Вариант ""%1"":'"), СтрокаВариант.КлючВарианта);
	Иначе
		ТекстОшибки = "";
	КонецЕсли;
	Если НадоЗаполнитьОписание Тогда
		ТекстОшибки = ?(ТекстОшибки = "", "", ТекстОшибки + Символы.ПС)
			+ "- " + НСтр("ru = 'Не заполнено поле ""Описание"" (выводится в панели отчетов).'");
	КонецЕсли;
	Если НадоЗаполнитьНастройкиДляПоиска Тогда
		ТекстОшибки = ?(ТекстОшибки = "", "", ТекстОшибки + Символы.ПС)
			+ "- " + НСтр("ru = 'Не заполнены поля ""НаименованияПолей"", ""НаименованияПараметровИОтборов"" и ""КлючевыеСлова"".'");
	КонецЕсли;
	ТекстОшибки = ?(ТекстОшибки = "", "", ТекстОшибки + Символы.ПС)
		+ НСтр("ru = 'Подробнее - см. ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов().'");
	ДобавитьОшибку(
		СтрокаОтчет.Метаданные,
		НСтр("ru = 'Не заполнены описания вариантов отчетов'"),
		ТекстОшибки);
КонецПроцедуры

#КонецОбласти

#Область ДатыЗапретаИзменения

Процедура ПроверитьПолеЗапретаИзменения(ИсточникДанных, ОбъектМетаданных, ИмяПоля)
	
	ЗначениеПоля = ИсточникДанных[ИмяПоля];
	МассивИмени = СтрРазделить(ЗначениеПоля, ".");
	ИмяРеквизита = МассивИмени[0];
	Если ОбъектМетаданных.Реквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоСтандартныйРеквизит = Ложь;
	Для Каждого СтандартныйРеквизит Из ОбъектМетаданных.СтандартныеРеквизиты Цикл
		Если СтандартныйРеквизит.Имя = ИмяРеквизита Тогда
			ЭтоСтандартныйРеквизит = Истина;
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	// Для регистров еще надо проверять Измерения и Ресурсы.
	Если ОбщегоНазначения.ЭтоРегистр(ОбъектМетаданных) Тогда
		Если ОбъектМетаданных.Измерения.Найти(ИмяРеквизита) <> Неопределено Тогда
			Возврат;
		КонецЕсли;
		Если ОбъектМетаданных.Ресурсы.Найти(ИмяРеквизита) <> Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	МетаданныеТабличнойЧасти = МетаданныеТабличнойЧасти(ОбъектМетаданных, ИмяРеквизита);
	Если МетаданныеТабличнойЧасти <> Неопределено
		И МетаданныеТабличнойЧасти.Реквизиты.Найти(МассивИмени[1]) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьОшибку(Метаданные.ОбщиеМодули.ДатыЗапретаИзмененияПереопределяемый,
		НСтр("ru = 'Некорректно заполнена процедура ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения'"),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В процедуре ДатыЗапретаИзмененияПереопределяемый.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения
		|для объекта ""%1"" в качестве значения поля ""%2"" указано значение ""%3"".
		|Указанная таблица не содержит такого реквизита или табличной части.'"),
		ИсточникДанных.Таблица, ИмяПоля, ЗначениеПоля));
	
КонецПроцедуры

Функция МетаданныеТабличнойЧасти(ОбъектМетаданных, ИмяТабличнойЧасти)
	
	Если Метаданные.Справочники.Содержит(ОбъектМетаданных)
		Или Метаданные.Документы.Содержит(ОбъектМетаданных)
		Или Метаданные.БизнесПроцессы.Содержит(ОбъектМетаданных)
		Или Метаданные.Задачи.Содержит(ОбъектМетаданных)
		Или Метаданные.ПланыВидовРасчета.Содержит(ОбъектМетаданных)
		Или Метаданные.ПланыВидовХарактеристик.Содержит(ОбъектМетаданных)
		Или Метаданные.ПланыОбмена.Содержит(ОбъектМетаданных)
		Или Метаданные.ПланыСчетов.Содержит(ОбъектМетаданных)
		Или Метаданные.Обработки.Содержит(ОбъектМетаданных)
		Или Метаданные.Отчеты.Содержит(ОбъектМетаданных) Тогда
		
		Возврат ОбъектМетаданных.ТабличныеЧасти.Найти(ИмяТабличнойЧасти);
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область ДополнительныеОтчетыИОбработки

Процедура ПроверитьВстраиваниеГлобальныхОтчетовОбработок(ДляОтчетов)
	
	Если ДляОтчетов Тогда
		МассивРазделов = ОбщегоНазначения.ОбщийМодуль("ДополнительныеОтчетыИОбработки").РазделыДополнительныхОтчетов();
		ШаблонТекста = НСтр("ru = 'Отсутствует команда вызова дополнительных отчетов из раздела %1'");
		КраткоеОписаниеОшибки = НСтр("ru = 'Отсутствует команда открытия дополнительных отчетов'");
	Иначе
		МассивРазделов = ОбщегоНазначения.ОбщийМодуль("ДополнительныеОтчетыИОбработки").РазделыДополнительныхОбработок();
		ШаблонТекста = НСтр("ru = 'Отсутствует команда вызова дополнительных обработок из раздела %1'");
		КраткоеОписаниеОшибки = НСтр("ru = 'Отсутствует команда открытия дополнительных обработок'");
	КонецЕсли;
	
	ИдентификаторРабочегоСтола = ОбщегоНазначения.ОбщийМодуль("ДополнительныеОтчетыИОбработкиКлиентСервер").ИдентификаторРабочегоСтола();
	
	ШаблонИмениФайлаМодуля = "ОбщаяКоманда.[ИмяОбщейКоманды].МодульКоманды";
	СтрокаВызова = "ДополнительныеОтчетыИОбработкиКлиент.ОткрытьФормуКомандДополнительныхОтчетовИОбработок";
	ПроверенныеДанные = "";
	
	Для Каждого РазделМетаданных Из МассивРазделов Цикл
		// Состав рабочего стола не проверяется.
		Если РазделМетаданных = ИдентификаторРабочегоСтола Тогда
			Продолжить;
		КонецЕсли;
		// В разделе "Администрирование" команда выводится в одну из панелей.
		Если РазделМетаданных.Имя = "Администрирование" Тогда
			Продолжить;
		КонецЕсли;
		
		ВызовНайден = Ложь;
		Для Каждого ОбщаяКоманда Из РазделМетаданных.Состав Цикл
			Если Не Метаданные.ОбщиеКоманды.Содержит(ОбщаяКоманда) Тогда
				Продолжить;
			КонецЕсли;
			ТекстМодуля = ТекстМодуля(ОбщаяКоманда, "МодульКоманды");
			Если СтрНайти(ТекстМодуля, СтрокаВызова) > 0 Тогда
				ВызовНайден = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Не ВызовНайден Тогда
			// Продолжаем поиск в подчиненных разделах.
			Для Каждого ПодчиненныйРаздел Из РазделМетаданных.Подсистемы Цикл
				Для Каждого ОбщаяКоманда Из ПодчиненныйРаздел.Состав Цикл
					Если Не Метаданные.ОбщиеКоманды.Содержит(ОбщаяКоманда) Тогда
						Продолжить;
					КонецЕсли;
					ТекстМодуля = ТекстМодуля(ОбщаяКоманда, "МодульКоманды");
					Если СтрНайти(ТекстМодуля, СтрокаВызова) > 0 Тогда
						ВызовНайден = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		Если Не ВызовНайден Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста, РазделМетаданных.Имя);
			ДобавитьОшибку(Метаданные.ОбщиеМодули.ДополнительныеОтчетыИОбработкиПереопределяемый, КраткоеОписаниеОшибки, ТекстОшибки);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область НастройкаПорядкаЭлементов

Функция СоставОбъектовСРеквизитомДопУпорядочивания()
	
	МассивМетаданных = Новый Массив;
	Для Каждого ОбъектМетаданных Из Метаданные.Справочники Цикл
		Если ОбъектМетаданных.Реквизиты.Найти("РеквизитДопУпорядочивания") <> Неопределено Тогда
			МассивМетаданных.Добавить(ОбъектМетаданных);
		КонецЕсли;
	КонецЦикла;
	Для Каждого ОбъектМетаданных Из Метаданные.ПланыВидовХарактеристик Цикл
		Если ОбъектМетаданных.Реквизиты.Найти("РеквизитДопУпорядочивания") <> Неопределено Тогда
			МассивМетаданных.Добавить(ОбъектМетаданных);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ОбъектМетаданных Из Метаданные.ПланыВидовРасчета Цикл
		Если ОбъектМетаданных.Реквизиты.Найти("РеквизитДопУпорядочивания") <> Неопределено Тогда
			МассивМетаданных.Добавить(ОбъектМетаданных);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СоответствиеТипа(НСтр("ru = 'Объекты с реквизитом РеквизитДопУпорядочивания'"), МассивМетаданных);
	
КонецФункции

#КонецОбласти

#Область ОбменДанными

Процедура ПроверитьНаличиеМакетовИФорм()
	
	Для Каждого ИмяПланаОбмена Из ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиПовтИсп").ПланыОбменаБСП() Цикл
		
		ЕстьМакет = Метаданные.ПланыОбмена[ИмяПланаОбмена].Макеты.Найти("ПравилаРегистрации") <> Неопределено;
		ЕстьФорма = Метаданные.ПланыОбмена[ИмяПланаОбмена].Формы.Найти("ФормаНастройкиУзла") <> Неопределено;
		
		Если ЕстьМакет <> ЕстьФорма Тогда
			ТекстОшибки = ?(ЕстьМакет,
				НСтр("ru = 'Отсутствует макет ""ПравилаРегистрации""'"),
				НСтр("ru = 'Отсутствует форма ""ФормаНастройкиУзла""'"));
			ОбъектМетаданных = Метаданные.ПланыОбмена.Найти(ИмяПланаОбмена);
			ДобавитьОшибку(ОбъектМетаданных, НСтр("ru = 'Отсутствуют правила регистрации и форма настройки узла'"), ТекстОшибки);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьСоставОбщихКоманд()
	
	МодульОбменДаннымиПовтИсп = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиПовтИсп");
	ВсеПланыОбменаБСП = МодульОбменДаннымиПовтИсп.ПланыОбменаБСП();
	ОбщиеКомандыОбменаДанными = ОбщиеКомандыОбменаДанными();
	
	Для Каждого ИмяПланаОбмена Из ВсеПланыОбменаБСП Цикл
		
		ПланОбмена = Метаданные.ПланыОбмена.Найти(ИмяПланаОбмена);
		Если МодульОбменДаннымиПовтИсп.ЭтоПланОбменаРаспределеннойИнформационнойБазы(ИмяПланаОбмена) Тогда
			СвойствоПроверки = "ДляОбменаРИБ";
		ИначеЕсли МодульОбменДаннымиПовтИсп.ЭтоПланОбменаXDTO(ИмяПланаОбмена) Тогда
			СвойствоПроверки = "ДляУниверсальногоФорматаОбмена";
		ИначеЕсли Не МодульОбменДаннымиПовтИсп.ЭтоПланОбменаРаспределеннойИнформационнойБазы(ИмяПланаОбмена)
			И МодульОбменДаннымиПовтИсп.ЕстьМакетПланаОбмена(ИмяПланаОбмена, "ПравилаОбмена")
			И Не МодульОбменДаннымиПовтИсп.ЭтоПланОбменаXDTO(ИмяПланаОбмена) Тогда
			СвойствоПроверки = "ДляОбменаПоПравиламКонвертации";
		ИначеЕсли Не МодульОбменДаннымиПовтИсп.ЭтоПланОбменаРаспределеннойИнформационнойБазы(ИмяПланаОбмена)
			И Не МодульОбменДаннымиПовтИсп.ЕстьМакетПланаОбмена(ИмяПланаОбмена, "ПравилаОбмена") Тогда
			СвойствоПроверки = "ДляУниверсальногоОбменаБезПравил";
		КонецЕсли;
		
		НедостающиеСостав = Новый Массив;
		ИзбыточныеСостав = Новый Массив;
		
		Для Каждого СтрокаТаблицы Из ОбщиеКомандыОбменаДанными Цикл
			
			ДолженБытьВключен = СтрокаТаблицы[СвойствоПроверки];
			Если ДолженБытьВключен = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ФактическиВключен = СтрокаТаблицы.СоставКоманды.Найти(ПланОбмена) <> Неопределено;
			
			Если ДолженБытьВключен И Не ФактическиВключен Тогда
				НедостающиеСостав.Добавить(СтрокаТаблицы.ИмяКоманды);
			ИначеЕсли Не ДолженБытьВключен И ФактическиВключен Тогда
				ИзбыточныеСостав.Добавить(СтрокаТаблицы.ИмяКоманды);
			КонецЕсли;
			
		КонецЦикла;
		
		Если НедостающиеСостав.Количество() > 0 Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'План обмена должен быть включен в состав общих команд
					|%1'"), МаркированныйСписок(НедостающиеСостав));
			ДобавитьОшибку(ПланОбмена, НСтр("ru = 'План обмена не включен в состав команд'"), ТекстОшибки);
		КонецЕсли;
		
		Если ИзбыточныеСостав.Количество() > 0 Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'План обмена должен быть исключен из состава общих команд
					|%1'"), МаркированныйСписок(ИзбыточныеСостав));
			ДобавитьОшибку(ПланОбмена, НСтр("ru = 'План обмена избыточно включен в состав команд'"), ТекстОшибки);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьСоставПлановОбмена()
	
	// Получение списка всех объектов метаданных БСП, содержащих данные
	ДопустимыеМетаданные = Новый Массив;
	ДопустимыеМетаданные.Добавить(Метаданные.Константы);
	ДопустимыеМетаданные.Добавить(Метаданные.Справочники);
	ДопустимыеМетаданные.Добавить(Метаданные.Документы);
	ДопустимыеМетаданные.Добавить(Метаданные.ПланыВидовХарактеристик);
	ДопустимыеМетаданные.Добавить(Метаданные.ПланыСчетов);
	ДопустимыеМетаданные.Добавить(Метаданные.ПланыВидовРасчета);
	ДопустимыеМетаданные.Добавить(Метаданные.РегистрыСведений);
	ДопустимыеМетаданные.Добавить(Метаданные.РегистрыНакопления);
	ДопустимыеМетаданные.Добавить(Метаданные.РегистрыБухгалтерии);
	ДопустимыеМетаданные.Добавить(Метаданные.РегистрыРасчета);
	ДопустимыеМетаданные.Добавить(Метаданные.БизнесПроцессы);
	ДопустимыеМетаданные.Добавить(Метаданные.Задачи);
	
	ВсеОбъектыМетаданных = Новый Массив;
	Для Каждого Подсистема Из Метаданные.Подсистемы.СтандартныеПодсистемы.Подсистемы Цикл
		Если Подсистема.Подсистемы.Количество() > 0 Тогда
			Для Каждого ПодчиненнаяПодсистема Из Подсистема.Подсистемы Цикл
				ДобавитьОбъектыПодсистемы(ПодчиненнаяПодсистема, ДопустимыеМетаданные,
					ВсеОбъектыМетаданных);
			КонецЦикла;
		КонецЕсли;
		ДобавитьОбъектыПодсистемы(Подсистема, ДопустимыеМетаданные,
			ВсеОбъектыМетаданных);
	КонецЦикла;
	
	ОбъектыИсключенияПланаОбменаРИБ = ОбъектыИсключенияПланаОбменаРИБ();
	ОбъектыИсключенияПланаОбменаАРМ = ОбъектыИсключенияПланаОбменаАРМ();
	ОбъектыВариативноВключаемыеВРИБ = ОбъектыВариативноВключаемыеВРИБ();
	ОбъектыИспользуемыеТолькоВРИБСФильтром          = ОбъектыИспользуемыеТолькоВРИБСФильтром();
	ОбъектыИспользуемыеТолькоДляНачальногоОбразаРИБ = ОбъектыИспользуемыеТолькоДляНачальногоОбразаРИБ();
	ОбъектыИспользуемыеТолькоДляНачальногоОбразаАРМ = ОбъектыИспользуемыеТолькоДляНачальногоОбразаАРМ();
	
	ПланыОбменаПодсистемы = Новый Массив;
	ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиПереопределяемый").ПолучитьПланыОбмена(ПланыОбменаПодсистемы);
	
	СоставВсехПлановОбмена = Новый Массив;
	
	Для Каждого ПланОбмена Из ПланыОбменаПодсистемы Цикл
		
		// Получение состав плана обмена, проверка авторегистрации
		СоставПланаОбмена = Новый Массив;
		Для Каждого ОбъектПланаОбмена Из ПланОбмена.Состав Цикл
			ПодсистемаОбъекта = СоответствиеОбъектов.Получить(ОбъектПланаОбмена.Метаданные);
			СтрокаДерева = ДеревоПодсистем.Строки.Найти(ПодсистемаОбъекта, "Подсистема", Истина);
			ПодсистемаОбъекта = ПодсистемаВерхнегоУровня(СтрокаДерева);
			Если ПодсистемаОбъекта = Метаданные.Подсистемы.СтандартныеПодсистемы Тогда
				СоставПланаОбмена.Добавить(ОбъектПланаОбмена.Метаданные);
			КонецЕсли;
			Если ОбъектПланаОбмена.АвтоРегистрация = АвтоРегистрацияИзменений.Разрешить Тогда
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Для объекта %1, входящего в состав плана обмена %2 включена авторегистрация.
					|Все элементы состава плана обмена должны иметь признак авторегистрации Запретить.'"),
					ОбъектПланаОбмена.Метаданные.ПолноеИмя(), ПланОбмена.Имя);
				ДобавитьОшибку(ОбъектПланаОбмена.Метаданные, НСтр("ru = 'Некорректное использование признака авторегистрации'"), ТекстОшибки);
			КонецЕсли;
		КонецЦикла;
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СоставВсехПлановОбмена, СоставПланаОбмена, Истина);
		
		// Получение состава подписок планов обмена
		ИмяПланаОбмена = ПланОбмена.Имя;
		
		ДопустимыеИменаПодписок = Новый Массив;
		ДопустимыеИменаПодписок.Добавить("ЗарегистрироватьИзменение");
		ДопустимыеИменаПодписок.Добавить("ЗарегистрироватьИзменениеДокумента");
		ДопустимыеИменаПодписок.Добавить("ЗарегистрироватьИзменениеНабораЗаписей");
		ДопустимыеИменаПодписок.Добавить("ЗарегистрироватьИзменениеНабораЗаписейРасчета");
		ДопустимыеИменаПодписок.Добавить("ЗарегистрироватьИзменениеКонстанты");
		
		ШаблонИменаПодписки = "[ИмяПланаОбмена][ИмяПодписки]";
		СоставПодписок = Новый Массив;
		
		Для Каждого ДопустимоеИмяПодписки Из ДопустимыеИменаПодписок Цикл
			ИмяПодписки = СтрЗаменить(ШаблонИменаПодписки, "[ИмяПланаОбмена]", ИмяПланаОбмена);
			ИмяПодписки = СтрЗаменить(ИмяПодписки, "[ИмяПодписки]", ДопустимоеИмяПодписки);
			СоставПодписки = СоставПодписки(ИмяПодписки);
			СоставПодписок.Добавить(СоставПодписки);
		КонецЦикла;
		СоставПодписокЗарегистрироватьИзменение = ОбъединитьТипы(НСтр("ru = 'Состав подписок ЗарегистрироватьИзменение'"), СоставПодписок);
		
		ШаблонИменаПодписки = "[ИмяПланаОбмена]ЗарегистрироватьУдаление";
		ИмяПодписки = СтрЗаменить(ШаблонИменаПодписки, "[ИмяПланаОбмена]", ИмяПланаОбмена);
		СоставПодпискиЗарегистрироватьУдаление = СоставПодписки(ИмяПодписки);
		
		Если ПланОбмена.РаспределеннаяИнформационнаяБаза Тогда
			// Проверка состава плана обмена
			ЭтоПланОбменаАРМ = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиПовтИсп").ПланОбменаАвтономнойРаботы() = ИмяПланаОбмена;
			ОбъектыИсключенияПланаОбмена = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(ОбъектыИсключенияПланаОбменаРИБ);
			Если ЭтоПланОбменаАРМ Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОбъектыИсключенияПланаОбмена, ОбъектыИсключенияПланаОбменаАРМ, Истина);
			КонецЕсли;
			
			НазначениеПланаОбмена = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиСервер").НазначениеПланаОбмена(ИмяПланаОбмена);
			ЭтоПланОбменаРИБСФильтром = ?(ВРег(НазначениеПланаОбмена) = "РИБСФИЛЬТРОМ", Истина, Ложь);
			Если ЭтоПланОбменаРИБСФильтром Тогда
				Для Каждого Элемент Из ОбъектыИспользуемыеТолькоВРИБСФильтром Цикл
					ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ОбъектыИсключенияПланаОбмена, Элемент);
				КонецЦикла;
			КонецЕсли;
			
			ПлановыйСостав = ОбщегоНазначенияКлиентСервер.СократитьМассив(ВсеОбъектыМетаданных, ОбъектыИсключенияПланаОбмена);
			ПлановыйСостав = ОбщегоНазначенияКлиентСервер.СократитьМассив(ПлановыйСостав, ОбъектыВариативноВключаемыеВРИБ);
			ФактическийСостав = ОбщегоНазначенияКлиентСервер.СократитьМассив(СоставПланаОбмена, ОбъектыВариативноВключаемыеВРИБ);
			
			ПроверитьСоставПланаОбмена(ИмяПланаОбмена, ПлановыйСостав, ФактическийСостав);
			
			// Проверка состава подписок
			ОбъектыИспользуемыеТолькоДляНачальногоОбраза = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(
				ОбъектыИспользуемыеТолькоДляНачальногоОбразаРИБ);
			Если ЭтоПланОбменаАРМ Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОбъектыИспользуемыеТолькоДляНачальногоОбраза, ОбъектыИспользуемыеТолькоДляНачальногоОбразаАРМ, Истина);
			КонецЕсли;
			
			ПлановыйСостав = ОбщегоНазначенияКлиентСервер.СократитьМассив(ПлановыйСостав, ОбъектыИспользуемыеТолькоДляНачальногоОбраза);
			ФактическийСостав = ОбщегоНазначенияКлиентСервер.СократитьМассив(
				ЭлементСоответствия(СоставПодписокЗарегистрироватьИзменение).Значение, ОбъектыВариативноВключаемыеВРИБ);
			
			ПроверитьСоставНачальногоОбраза(ИмяПланаОбмена, ПлановыйСостав, ФактическийСостав);
		КонецЕсли;
		
		ПроверитьНаличиеВставкиКода(ПланОбмена, "МодульМенеджера", ОбязательныеПроцедурыМодуляМенеджераПланаОбмена(ИмяПланаОбмена));
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьПрефиксИнформационнойБазыПоУмолчанию()
	ПрефиксИнформационнойБазыПоУмолчанию = "";
	ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиПереопределяемый").ПриОпределенииПрефиксаИнформационнойБазыПоУмолчанию(ПрефиксИнформационнойБазыПоУмолчанию);
	Если ПустаяСтрока(ПрефиксИнформационнойБазыПоУмолчанию) Или СтрДлина(ПрефиксИнформационнойБазыПоУмолчанию) <> 2 Тогда
		ДобавитьОшибку(Метаданные.ОбщиеМодули.ОбменДаннымиПереопределяемый,
			НСтр("ru = 'Некорректно задан префикс ИБ по умолчанию'"),
			НСтр("ru = 'Неправильно задан префикс информационной по умолчанию.'"));
	КонецЕсли;
КонецПроцедуры

Процедура ДобавитьСтрокуВТаблицуКоманд(ИмяКоманды, ДляОбменаРИБ, ДляУниверсальногоФорматаОбмена,
	ДляУниверсальногоОбменаБезПравил, ДляОбменаПоПравиламКонвертации, ТаблицаКоманд)
	
	НоваяСтрока = ТаблицаКоманд.Добавить();
	НоваяСтрока.ИмяКоманды = ИмяКоманды;
	НоваяСтрока.ДляОбменаРИБ = ДляОбменаРИБ;
	НоваяСтрока.ДляУниверсальногоФорматаОбмена = ДляУниверсальногоФорматаОбмена;
	НоваяСтрока.ДляУниверсальногоОбменаБезПравил = ДляУниверсальногоОбменаБезПравил;
	НоваяСтрока.ДляОбменаПоПравиламКонвертации = ДляОбменаПоПравиламКонвертации;
	НоваяСтрока.СоставКоманды = СоставТипаИзСтроки(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ОбщиеКоманды.%1.ТипПараметраКоманды", ИмяКоманды));
	
КонецПроцедуры

Процедура ДобавитьОбъектыПодсистемы(Подсистема, ДопустимыеМетаданные, ВсеОбъектыМетаданных)
	
	Для Каждого Объект Из Подсистема.Состав Цикл
		ДобавитьОбъектВСоставПодсистемы(Объект, ВсеОбъектыМетаданных);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьВсеОбъектыПодсистемы(ИмяПодсистемы, Исключения)
	
	Подсистема = Метаданные.Подсистемы.СтандартныеПодсистемы.Подсистемы.Найти(ИмяПодсистемы);
	Если Подсистема = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Объект Из Подсистема.Состав Цикл
		ДобавитьОбъектВСоставПодсистемы(Объект, Исключения);
	КонецЦикла;
	
	Для Каждого ПодчиненнаяПодсистема Из Подсистема.Подсистемы Цикл
		ДобавитьВсеОбъектыПодсистемы(ПодчиненнаяПодсистема.Имя, Исключения);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьОбъект(ИмяОбъекта, Исключения)
	
	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ИмяОбъекта);
	Если ОбъектМетаданных <> Неопределено Тогда
		Исключения.Добавить(ОбъектМетаданных);
	ИначеЕсли Метаданные.Имя = "БиблиотекаСтандартныхПодсистемДемо" Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В функции ОбъектыИсключенияПланаОбменаРИБ указан несуществующий объект метаданных %1'"), ИмяОбъекта);
		ДобавитьОшибку(Метаданные, НСтр("ru = 'Некорректно заполнены  ОбъектыИсключенияПланаОбменаРИБ'"), ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьОбъектВСоставПодсистемы(Объект, Состав)
	
	Для Каждого ДопустимыйТип Из ДопустимыеМетаданные Цикл
		Если ДопустимыйТип.Содержит(Объект) Тогда
			Состав.Добавить(Объект);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПодсистемаНеСодержитОбъектов(ИмяПодсистемы)
	
	Подсистема = Метаданные.Подсистемы.СтандартныеПодсистемы.Подсистемы.Найти(ИмяПодсистемы);
	Если Подсистема = Неопределено Тогда
		Возврат
	КонецЕсли;

	Для Каждого Объект Из Подсистема.Состав Цикл
		Для Каждого ДопустимыйТип Из ДопустимыеМетаданные Цикл
			Если ДопустимыйТип.Содержит(Объект) Тогда
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Согласно документации, подсистема %1 не 
					|содержит объектов для включения в состав плана обмена.'"), ИмяПодсистемы);
				ДобавитьОшибку(Объект, НСтр("ru = 'Подсистема содержит объекты с данными'"), ТекстОшибки);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого ПодчиненнаяПодсистема Из Подсистема.Подсистемы Цикл
		ПодсистемаНеСодержитОбъектов(ИмяПодсистемы);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьСоставПланаОбмена(ИмяПланаОбмена, ПлановыйСостав, ФактическийСостав)
	
	НедостающиеОбъекты = ОбщегоНазначенияКлиентСервер.СократитьМассив(ПлановыйСостав, ФактическийСостав);
	
	Для Каждого Объект Из НедостающиеОбъекты Цикл
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Объект %1 должен быть включен в состав плана обмена РИБ ""%2""'"),
			Объект.ПолноеИмя(), ИмяПланаОбмена);
		ДобавитьОшибку(Объект, НСтр("ru = 'Объект не включен в состав плана обмена РИБ'"), ТекстОшибки);
	КонецЦикла;
	
	ИзбыточныеОбъекты = ОбщегоНазначенияКлиентСервер.СократитьМассив(ФактическийСостав, ПлановыйСостав);
	
	Для Каждого Объект Из ИзбыточныеОбъекты Цикл
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Объект %1 избыточно включен включен в состав плана обмена РИБ ""%2""'"),
			Объект.ПолноеИмя(), ИмяПланаОбмена);
		ДобавитьОшибку(Объект, НСтр("ru = 'Объект избыточно включен в состав плана обмена РИБ'"), ТекстОшибки);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьСоставНачальногоОбраза(ИмяПланаОбмена, ПлановыйСостав, ФактическийСостав)
	
	НедостающиеОбъекты = ОбщегоНазначенияКлиентСервер.СократитьМассив(ПлановыйСостав, ФактическийСостав);
	
	Для Каждого Объект Из НедостающиеОбъекты Цикл
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Объект %1 должен быть включен в состав соответствующей подписки на событие
			|с именем %2ЗарегистрироватьИзменение обмена РИБ'"),
			Объект.ПолноеИмя(), ИмяПланаОбмена);
		ДобавитьОшибку(Объект, НСтр("ru = 'Объект не включен в состав подписок РИБ'"), ТекстОшибки);
	КонецЦикла;
	
	ИзбыточныеОбъекты = ОбщегоНазначенияКлиентСервер.СократитьМассив(ФактическийСостав, ПлановыйСостав);
	
	Для Каждого Объект Из ИзбыточныеОбъекты Цикл
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Объект %1  избыточно включен в состав соответствующей подписки на событие
			|с именем %2ЗарегистрироватьИзменение обмена РИБ'"),
			Объект.ПолноеИмя(), ИмяПланаОбмена);
		ДобавитьОшибку(Объект, НСтр("ru = 'Объект избыточно включен в состав подписок РИБ'"), ТекстОшибки);
	КонецЦикла;
	
КонецПроцедуры

Функция СоставПодписки(ИмяПодписки)
	
	СоставТипа = Новый Соответствие;
	МассивМетаданных = Новый Массив;
	
	Для Каждого Подписка Из Метаданные.ПодпискиНаСобытия Цикл
		Если СтрНайти(Подписка.Имя, ИмяПодписки) <> 0 Тогда
			Для Каждого Тип Из Подписка.Источник.Типы() Цикл
				Объект = Метаданные.НайтиПоТипу(Тип);
				ПодсистемаОбъекта = СоответствиеОбъектов.Получить(Объект);
				Если ПодсистемаОбъекта = Метаданные.Подсистемы.СтандартныеПодсистемы Тогда
					ДобавитьОбъектВСоставПодсистемы(Объект, МассивМетаданных);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	СоставТипа = Новый Соответствие;
	СоставТипа.Вставить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Подписка с именем %1'"), ИмяПодписки), МассивМетаданных);
	
	Возврат СоставТипа;
	
КонецФункции

Функция ОбщиеКомандыОбменаДанными()
	
	ТаблицаКоманд = Новый ТаблицаЗначений;
	
	ТаблицаКоманд.Колонки.Добавить("ИмяКоманды");
	ТаблицаКоманд.Колонки.Добавить("ДляОбменаРИБ");
	ТаблицаКоманд.Колонки.Добавить("ДляУниверсальногоФорматаОбмена");
	ТаблицаКоманд.Колонки.Добавить("ДляУниверсальногоОбменаБезПравил");
	ТаблицаКоманд.Колонки.Добавить("ДляОбменаПоПравиламКонвертации");
	ТаблицаКоманд.Колонки.Добавить("СоставКоманды");
	
	ДобавитьСтрокуВТаблицуКоманд("ЗагрузитьКомплектПравил", Ложь, Ложь, Ложь, Истина, ТаблицаКоманд);
	ДобавитьСтрокуВТаблицуКоманд("ЗагрузитьПравилаКонвертацииОбъектов", Ложь, Ложь, Ложь, Истина, ТаблицаКоманд);
	// План обмена РИБ может не содержать ПРО. Не проверяем.
	ДобавитьСтрокуВТаблицуКоманд("ЗагрузитьПравилаРегистрацииОбъектов", Неопределено, Истина, Истина, Истина, ТаблицаКоманд);
	ДобавитьСтрокуВТаблицуКоманд("НастроитьПараметрыТранспортаСообщенийОбмена", Истина, Истина, Истина, Истина, ТаблицаКоманд);
	ДобавитьСтрокуВТаблицуКоманд("ПолучитьНастройкиСинхронизацииДляДругойПрограммы", Ложь, Истина, Истина, Истина, ТаблицаКоманд);
	ДобавитьСтрокуВТаблицуКоманд("Синхронизировать", Истина, Истина, Истина, Истина, ТаблицаКоманд);
	ДобавитьСтрокуВТаблицуКоманд("СинхронизироватьСДополнительнымиПараметрами", Ложь, Истина, Ложь, Истина, ТаблицаКоманд);
	ДобавитьСтрокуВТаблицуКоманд("СобытияОтправки", Истина, Истина, Истина, Истина, ТаблицаКоманд);
	ДобавитьСтрокуВТаблицуКоманд("СобытияПолучения", Истина, Истина, Истина, Истина, ТаблицаКоманд);
	ДобавитьСтрокуВТаблицуКоманд("СоставОтправляемыхДанных", Истина, Истина, Истина, Истина, ТаблицаКоманд);
	ДобавитьСтрокуВТаблицуКоманд("СценарииСинхронизации", Истина, Истина, Истина, Истина, ТаблицаКоманд);
	ДобавитьСтрокуВТаблицуКоманд("УдалитьНастройкуСинхронизации", Истина, Истина, Истина, Истина, ТаблицаКоманд);
	
	Возврат ТаблицаКоманд;
	
КонецФункции

// Содержит список объектов, которые не должны включаться в состав планов обмена РИБ.
//
Функция ОбъектыИсключенияПланаОбменаРИБ()
	
	Исключения = Новый Массив;
	
	ДобавитьВсеОбъектыПодсистемы("АдресныйКлассификатор", Исключения);
	ПодсистемаНеСодержитОбъектов("АнализЖурналаРегистрации");
	
	// БазоваяФункциональность
	ДобавитьОбъект("Константа.ГлавныйУзел", Исключения);
	ДобавитьОбъект("Константа.ЗаголовокСистемы", Исключения);
	ДобавитьОбъект("Константа.ИспользоватьРазделениеПоОбластямДанных", Исключения);
	ДобавитьОбъект("Константа.НеИспользоватьРазделениеПоОбластямДанных", Исключения);
	ДобавитьОбъект("Константа.ЭтоАвтономноеРабочееМесто", Исключения);
	ДобавитьОбъект("Константа.ИдентификаторИнформационнойБазы", Исключения);
	ДобавитьОбъект("Константа.АвтоматическиНастраиватьРазрешенияВПрофиляхБезопасности", Исключения);
	ДобавитьОбъект("Константа.ИспользуютсяПрофилиБезопасности", Исключения);
	ДобавитьОбъект("Константа.ПрофильБезопасностиИнформационнойБазы", Исключения);
	ДобавитьОбъект("Справочник.ВерсииРасширений", Исключения);
	ДобавитьОбъект("Справочник.ИдентификаторыОбъектовРасширений", Исключения);
	ДобавитьОбъект("РегистрСведений.БезопасноеХранилищеДанных", Исключения);
	ДобавитьОбъект("РегистрСведений.БезопасноеХранилищеДанныхОбластейДанных", Исключения);
	ДобавитьОбъект("РегистрСведений.ИдентификаторыОбъектовВерсийРасширений", Исключения);
	ДобавитьОбъект("РегистрСведений.ПараметрыРаботыВерсийРасширений", Исключения);
	ДобавитьОбъект("РегистрСведений.СеансыВерсийРасширений", Исключения);
	ДобавитьОбъект("РегистрСведений.КэшПрограммныхИнтерфейсов", Исключения);
	ДобавитьОбъект("РегистрСведений.НеразделенныеПользователи", Исключения);
	ДобавитьОбъект("РегистрСведений.ЗапросыРазрешенийНаИспользованиеВнешнихРесурсов", Исключения);
	ДобавитьОбъект("РегистрСведений.РазрешенияНаИспользованиеВнешнихРесурсов", Исключения);
	ДобавитьОбъект("РегистрСведений.РежимыПодключенияВнешнихМодулей", Исключения);
	ДобавитьОбъект("РегистрСведений.УдалитьСтраныМира", Исключения);
	
	// ВариантыОтчетов
	ДобавитьОбъект("Справочник.ПредопределенныеВариантыОтчетовРасширений", Исключения);
	ДобавитьОбъект("РегистрСведений.ПредопределенныеВариантыОтчетовВерсийРасширений", Исключения);
	
	// Взаимодействия
	ДобавитьОбъект("Константа.АдресПубликацииИнформационнойБазыВИнтернете", Исключения);
	ДобавитьОбъект("РегистрСведений.ЗаблокированныеДляПолученияУчетныеЗаписи", Исключения);
	ДобавитьОбъект("РегистрСведений.СостоянияПапокПисем", Исключения);
	ДобавитьОбъект("РегистрСведений.СостоянияПредметовВзаимодействий", Исключения);
	ДобавитьОбъект("РегистрСведений.СостоянияКонтактовВзаимодействий", Исключения);
	ДобавитьОбъект("РегистрСведений.Удалить_АктивныеПредметыВзаимодействий", Исключения);
	
	ПодсистемаНеСодержитОбъектов("ГрупповоеИзменениеОбъектов");
	
	// ДатыЗапретаИзменения
	ДобавитьОбъект("Константа.ВерсияДатЗапретаИзменения", Исключения);
	
	// ЗавершениеРаботыПользователей
	ДобавитьОбъект("Константа.ПараметрыАдминистрированияИБ", Исключения);
	ДобавитьОбъект("РегистрСведений.БлокировкиСеансовОбластейДанных", Исключения);
	ДобавитьОбъект("РегистрСведений.УдалитьБлокировкиСеансовОбластиДанных", Исключения);
	
	ПодсистемаНеСодержитОбъектов("ЗагрузкаДанныхИзФайла");
	ПодсистемаНеСодержитОбъектов("ЗапретРедактированияРеквизитовОбъектов");
	
	// ЗащитаПерсональныхДанных
	ДобавитьОбъект("РегистрСведений.ОбластиПерсональныхДанных", Исключения);
	
	ПодсистемаНеСодержитОбъектов("НастройкаПорядкаЭлементов");
	ПодсистемаНеСодержитОбъектов("НастройкиПрограммы");
	
	// ОбменДанными
	ДобавитьОбъект("Константа.ДанныеДляОтложенногоОбновления", Исключения);
	ДобавитьОбъект("Константа.ДатаОбновленияПовторноИспользуемыхЗначенийМРО", Исключения);
	ДобавитьОбъект("Константа.ДатаОбновленияПовторноИспользуемыхЗначенийМРО", Исключения);
	ДобавитьОбъект("Константа.ЗагрузитьСообщениеОбменаДанными", Исключения);
	ДобавитьОбъект("Константа.ИспользоватьСинхронизациюДанных", Исключения);
	ДобавитьОбъект("Константа.ИспользоватьСинхронизациюДанныхВЛокальномРежиме", Исключения);
	ДобавитьОбъект("Константа.ИспользоватьСинхронизациюДанныхВМоделиСервиса", Исключения);
	ДобавитьОбъект("Константа.КаталогСообщенийОбменаДаннымиДляWindows", Исключения);
	ДобавитьОбъект("Константа.КаталогСообщенийОбменаДаннымиДляLinux", Исключения);
	ДобавитьОбъект("Константа.КоличествоЭлементовВТранзакцииЗагрузкиДанных", Исключения);
	ДобавитьОбъект("Константа.НастройкаПодчиненногоУзлаРИБЗавершена", Исключения);
	ДобавитьОбъект("Константа.ПовторитьЗагрузкуСообщенияОбменаДаннымиПередЗапуском", Исключения);
	ДобавитьОбъект("Константа.ПрефиксУзлаРаспределеннойИнформационнойБазы", Исключения);
	ДобавитьОбъект("Константа.СообщениеОбменаДаннымиИзГлавногоУзла", Исключения);
	ДобавитьОбъект("Справочник.СценарииОбменовДанными", Исключения);
	ДобавитьОбъект("РегистрСведений.ДанныеОбъектовДляРегистрацииВОбменах", Исключения);
	ДобавитьОбъект("РегистрСведений.ИзмененияОбщихДанныхУзлов", Исключения);
	ДобавитьОбъект("РегистрСведений.НастройкиТранспортаОбмена", Исключения);
	ДобавитьОбъект("РегистрСведений.ОбщиеНастройкиУзловИнформационныхБаз", Исключения);
	ДобавитьОбъект("РегистрСведений.ОбработчикиСобытийСинхронизацииДанных", Исключения);
	ДобавитьОбъект("РегистрСведений.ПравилаДляОбменаДанными", Исключения);
	ДобавитьОбъект("РегистрСведений.ПубличныеИдентификаторыСинхронизируемыхОбъектов", Исключения);
	ДобавитьОбъект("РегистрСведений.РезультатыОбменаДанными", Исключения);
	ДобавитьОбъект("РегистрСведений.СообщенияОбменаДанными", Исключения);
	ДобавитьОбъект("РегистрСведений.СоответствияОбъектовИнформационныхБаз", Исключения);
	ДобавитьОбъект("РегистрСведений.СостоянияОбменовДанными", Исключения);
	ДобавитьОбъект("РегистрСведений.СостоянияУспешныхОбменовДанными", Исключения);
	
	// ОбновлениеВерсииИБ
	ДобавитьОбъект("Константа.РазделыОписанияИзмененийСистемы", Исключения);
	
	// ОбновлениеКонфигурации
	ДобавитьВсеОбъектыПодсистемы("ОбновлениеКонфигурации", Исключения);
	
	ПодсистемаНеСодержитОбъектов("ПоискИУдалениеДублей");
	
	// ПолучениеФайловИзИнтернета
	ДобавитьОбъект("Константа.НастройкаПроксиСервера", Исключения);
	
	// Пользователи
	ДобавитьОбъект("Константа.НастройкиВходаПользователей", Исключения);
	ДобавитьОбъект("РегистрСведений.СведенияОПользователях", Исключения);
	
	ПодсистемаНеСодержитОбъектов("ПрефиксацияОбъектов");
	ПодсистемаНеСодержитОбъектов("ПроверкаЛегальностиПолученияОбновления");
	
	// РаботаВМоделиСервиса
	ДобавитьОбъект("Константа.ВнутреннийАдресМенеджераСервиса", Исключения);
	ДобавитьОбъект("Константа.ВыполнитьРезервноеКопированиеОбластиДанных", Исключения);
	ДобавитьОбъект("Константа.ДатаПоследнегоСтартаКлиентскогоСеанса", Исключения);
	ДобавитьОбъект("Константа.ИспользованиеКаталогаДополнительныхОтчетовИОбработокВМоделиСервиса", Исключения);
	ДобавитьОбъект("Константа.КаталогОбменаФайламиВМоделиСервиса", Исключения);
	ДобавитьОбъект("Константа.КаталогОбменаФайламиВМоделиСервисаLinux", Исключения);
	ДобавитьОбъект("Константа.КлючОбластиДанных", Исключения);
	ДобавитьОбъект("Константа.КонечнаяТочкаМенеджераСервиса", Исключения);
	ДобавитьОбъект("Константа.КопироватьОбластиДанныхИзЭталонной", Исключения);
	ДобавитьОбъект("Константа.МаксимальнаяДлительностьВыполненияИсполняющегоФоновогоЗадания", Исключения);
	ДобавитьОбъект("Константа.МаксимальноеКоличествоИсполняющихФоновыхЗаданий", Исключения);
	ДобавитьОбъект("Константа.МинимальныйИнтервалРегламентныхЗаданийДополнительныхОтчетовИОбработокВМоделиСервиса", Исключения);
	ДобавитьОбъект("Константа.НезависимоеИспользованиеДополнительныхОтчетовИОбработокВМоделиСервиса", Исключения);
	ДобавитьОбъект("Константа.ПоддержкаРезервногоКопирования", Исключения);
	ДобавитьОбъект("Константа.ПредставлениеОбластиДанных", Исключения);
	ДобавитьОбъект("Константа.ПрефиксОбластиДанных", Исключения);
	ДобавитьОбъект("Константа.РазмерБлокаПередачиФайла", Исключения);
	ДобавитьОбъект("Константа.РазрешитьВыполнениеДополнительныхОтчетовИОбработокРегламентнымиЗаданиямиВМоделиСервиса", Исключения);
	ДобавитьОбъект("Константа.РежимИспользованияИнформационнойБазы", Исключения);
	ДобавитьОбъект("Константа.СообщениеБлокировкиПриОбновленииКонфигурации", Исключения);
	ДобавитьОбъект("Константа.ЧасовойПоясОбластиДанных", Исключения);
	ДобавитьОбъект("Константа.УдалитьИмяСлужебногоПользователяМенеджераСервиса", Исключения);
	ДобавитьОбъект("Константа.УдалитьПарольСлужебногоПользователяМенеджераСервиса", Исключения);
	ДобавитьОбъект("Справочник.ОчередьЗаданий", Исключения);
	ДобавитьОбъект("Справочник.ОчередьЗаданийОбластейДанных", Исключения);
	ДобавитьОбъект("Справочник.ПоставляемыеДанные", Исключения);
	ДобавитьОбъект("Справочник.ПоставляемыеДополнительныеОтчетыИОбработки", Исключения);
	ДобавитьОбъект("Справочник.СообщенияОбластейДанных", Исключения);
	ДобавитьОбъект("Справочник.ШаблоныЗаданийОчереди", Исключения);
	ДобавитьОбъект("РегистрСведений.ВерсииПодсистемОбластейДанных", Исключения);
	ДобавитьОбъект("РегистрСведений.ИспользованиеПоставляемыхДополнительныхОтчетовИОбработокВОбластяхДанных", Исключения);
	ДобавитьОбъект("РегистрСведений.ИспользованиеДополнительныхОтчетовИОбработокСервисаВАвтономномРабочемМесте", Исключения);
	ДобавитьОбъект("РегистрСведений.ОбластиДанных", Исключения);
	ДобавитьОбъект("РегистрСведений.ОбластиТребующиеОбработкиПоставляемыхДанных", Исключения);
	ДобавитьОбъект("РегистрСведений.ОчередьИзвлеченияТекста", Исключения);
	ДобавитьОбъект("РегистрСведений.ОчередьИнсталляцииПоставляемыхДополнительныхОтчетовИОбработокВОбластиДанных", Исключения);
	ДобавитьОбъект("РегистрСведений.ПоставляемыеДанныеТребующиеОбработки", Исключения);
	ДобавитьОбъект("РегистрСведений.РейтингАктивностиОбластейДанных", Исключения);
	ДобавитьОбъект("РегистрСведений.УдалитьОбластиДанных", Исключения);
	ДобавитьОбъект("РегистрСведений.УдалитьРейтингАктивностиОбластейДанных", Исключения);
	ДобавитьОбъект("РегистрСведений.УдалитьБлокировкиСеансовОбластиДанных", Исключения);
	ДобавитьОбъект("РегистрСведений.УдалитьОчередьЗаданий", Исключения);
	ДобавитьОбъект("РегистрСведений.УдалитьОбластиКРезервномуКопированию", Исключения);
	ДобавитьОбъект("РегистрСведений.УдалитьОчередьИзвлеченияТекста", Исключения);
	
	// РаботаВМоделиСервиса.ОбменСообщениями
	ДобавитьОбъект("Константа.БлокировкаОтправкиБыстрыхСообщений", Исключения);
	ДобавитьОбъект("Справочник.СообщенияСистемы", Исключения);
	ДобавитьОбъект("РегистрСведений.НастройкиОтправителя", Исключения);
	ДобавитьОбъект("РегистрСведений.ПодпискиПолучателей", Исключения);
	
	// РаботаСКонтрагентами
	ДобавитьОбъект("РегистрСведений.ДокументыСОшибкамиПроверкиКонтрагентов", Исключения);
	ДобавитьОбъект("РегистрСведений.СостоянияКонтрагентов", Исключения);
	
	// РаботаСФайлами
	ДобавитьОбъект("РегистрСведений.РабочиеКаталогиФайлов", Исключения);
	ДобавитьОбъект("РегистрСведений.ФайлыВРабочемКаталоге", Исключения);
	
	ДобавитьВсеОбъектыПодсистемы("РассылкаОтчетов", Исключения);
	
	// РегламентныеЗадания
	ДобавитьОбъект("Константа.НастройкиВыполненияРегламентныхЗаданий", Исключения);
	ДобавитьОбъект("Константа.ПараметрыБлокировкиРаботыСВнешнимиРесурсами", Исключения);
	
	// РезервноеКопированиеИБ
	ДобавитьОбъект("Константа.ПараметрыРезервногоКопирования", Исключения);
	
	ПодсистемаНеСодержитОбъектов("СтруктураПодчиненности");
	ПодсистемаНеСодержитОбъектов("ТекущиеДела");
	ПодсистемаНеСодержитОбъектов("УдалениеПомеченныхОбъектов");
	
	// УправлениеИтогамиИАгрегатами
	ДобавитьОбъект("Константа.ПараметрыИтоговИАгрегатов", Исключения);
	
	// ФайловыеФункции
	ДобавитьОбъект("Константа.ИзвлекатьТекстыФайловНаСервере", Исключения);
	ДобавитьОбъект("Константа.ХранитьФайлыВТомахНаДиске", Исключения);
	ДобавитьОбъект("Константа.СинхронизироватьФайлы", Исключения);
	ДобавитьОбъект("Справочник.ТомаХраненияФайлов", Исключения);
	ДобавитьОбъект("Справочник.УчетныеЗаписиСинхронизацииФайлов", Исключения);
	ДобавитьОбъект("РегистрСведений.НомераОтсканированныхФайлов", Исключения);
	ДобавитьОбъект("РегистрСведений.СтатусыСинхронизацииФайловСОблачнымСервисом", Исключения);
	ДобавитьОбъект("РегистрСведений.НастройкиСинхронизацииФайлов", Исключения);
	
	ДобавитьВсеОбъектыПодсистемы("ЦентрМониторинга", Исключения);
	
	// ЭлектроннаяПодпись
	ДобавитьОбъект("Константа.ПроверятьЭлектронныеПодписиНаСервере", Исключения);
	ДобавитьОбъект("Константа.СоздаватьЭлектронныеПодписиНаСервере", Исключения);
	ДобавитьОбъект("Константа.УдалитьАлгоритмПодписи", Исключения);
	ДобавитьОбъект("Константа.УдалитьАлгоритмХеширования", Исключения);
	ДобавитьОбъект("Константа.УдалитьАлгоритмШифрования", Исключения);
	ДобавитьОбъект("Константа.УдалитьПровайдерЭП", Исключения);
	ДобавитьОбъект("Константа.УдалитьТипПровайдераЭП", Исключения);
	ДобавитьОбъект("РегистрСведений.ПутиКПрограммамЭлектроннойПодписиИШифрованияНаСерверахLinux", Исключения);
	
	Возврат Исключения;
	
КонецФункции

// Содержит список объектов, которые не должны включаться в состав планов обмена АРМ.
//
Функция ОбъектыИсключенияПланаОбменаАРМ()
	
	Исключения = Новый Массив;
	
	// Подсистемы, не поддерживающие работу в модели сервиса.
	ДобавитьВсеОбъектыПодсистемы("АнализЖурналаРегистрации", Исключения);
	ДобавитьВсеОбъектыПодсистемы("Анкетирование", Исключения);
	ДобавитьВсеОбъектыПодсистемы("Взаимодействия", Исключения);
	ДобавитьВсеОбъектыПодсистемы("ОбновлениеКонфигурации", Исключения);
	ДобавитьВсеОбъектыПодсистемы("ПроверкаЛегальностиПолученияОбновления", Исключения);
	ДобавитьВсеОбъектыПодсистемы("РегламентныеЗадания", Исключения);
	ДобавитьВсеОбъектыПодсистемы("РезервноеКопированиеИБ", Исключения);
	ДобавитьВсеОбъектыПодсистемы("УправлениеИтогамиИАгрегатами", Исключения);
	
	Возврат Исключения;
	
КонецФункции

// Содержит список объектов, необходимость включения которых в планы обмена РИБ определяется
// исходя из выбранного сценария работы подсистемы. Эти объекты могут как включаться так и не
// включаться в состав плана обмена, поэтому их вхождение в состав планов обмена не проверяется.
//
Функция ОбъектыВариативноВключаемыеВРИБ()
	
	Объекты = Новый Массив;
	
	// БизнесПроцессыИЗадачи
	ДобавитьОбъект("Константа.ДатаУведомленияОНовыхЗадачах", Объекты);
	
	ДобавитьВсеОбъектыПодсистемы("ОценкаПроизводительности", Объекты);
	
	Возврат Объекты;
	
КонецФункции

// Содержит список объектов, включаемых только в состав начального образа планов обмена РИБ.
// Т.е. объект включается в состав плана обмена и не включается в состав подписок.
//
Функция ОбъектыИспользуемыеТолькоДляНачальногоОбразаРИБ()
	
	Объекты = Новый Массив;
	
	// БазоваяФункциональность
	ДобавитьОбъект("Константа.ПараметрыСлужебныхСобытий", Объекты);
	
	// ИнформацияПриЗапуске
	ДобавитьОбъект("РегистрСведений.ПакетыИнформацииПриЗапуске", Объекты);
	
	// ОбменДанными
	ДобавитьОбъект("Константа.НастройкиПодчиненногоУзлаРИБ", Объекты);
	
	// ОбновлениеВерсииИБ
	ДобавитьОбъект("Константа.ДетализироватьОбновлениеИБВЖурналеРегистрации", Объекты);
	ДобавитьОбъект("Константа.ОтложенноеОбновлениеЗавершеноУспешно", Объекты);
	ДобавитьОбъект("Константа.СведенияОБлокируемыхОбъектах", Объекты);
	ДобавитьОбъект("Константа.СведенияОбОбновленииИБ", Объекты);
	ДобавитьОбъект("РегистрСведений.ВерсииПодсистем", Объекты);
	ДобавитьОбъект("РегистрСведений.УдалитьВерсииПодсистем", Объекты);
	
	// ПолнотекстовыйПоиск
	ДобавитьОбъект("Константа.ИспользоватьПолнотекстовыйПоиск", Объекты);
	
	// Пользователи
	ДобавитьОбъект("Константа.ПараметрыРаботыПользователей", Объекты);
	
	// ПрисоединенныеФайлы
	ДобавитьОбъект("РегистрСведений.ПрисоединенныеФайлы", Объекты);
	
	// РаботаСФайлами
	ДобавитьОбъект("РегистрСведений.ХранимыеФайлыВерсий", Объекты);
	
	// Свойства
	ДобавитьОбъект("Константа.ПараметрыДополнительныхРеквизитовИСведений", Объекты);
	
	// УправлениеДоступом
	ДобавитьОбъект("Константа.ПараметрыОграниченияДоступа", Объекты);
	ДобавитьОбъект("РегистрСведений.ПраваРолей", Объекты);
	ДобавитьОбъект("РегистрСведений.ЗависимостиПравДоступа", Объекты);
	
	Возврат Объекты;
	
КонецФункции

// Содержит список объектов, включаемых только в состав начального образа планов обмена АРМ.
// Т.е. объект включается в состав плана обмена и не включается в состав подписок.
//
Функция ОбъектыИспользуемыеТолькоДляНачальногоОбразаАРМ()
	
	Объекты = Новый Массив;
	
	// ДополнительныеОтчетыИОбработки
	ДобавитьОбъект("Константа.ИспользоватьДополнительныеОтчетыИОбработки", Объекты);
	
	Возврат Объекты;
	
КонецФункции

// Содержит список объектов, включаемых только в состав планов обмена РИБ с фильтрами.
//
Функция ОбъектыИспользуемыеТолькоВРИБСФильтром()
	
	Объекты = Новый Массив;
	
	// ОбменДанными
	ДобавитьОбъект("Константа.ДанныеДляОтложенногоОбновления", Объекты);
	
	Возврат Объекты;
	
КонецФункции

Функция ОбязательныеПроцедурыМодуляМенеджераПланаОбмена(ИмяПланаОбмена)
	
	ОбязательныеПроцедуры = Новый Массив;
	
	ОбязательныеПроцедуры.Добавить("Процедура ОпределитьНастройки(Настройки, ИдентификаторНастройки) Экспорт");
	ОбязательныеПроцедуры.Добавить("Процедура ОбработчикПроверкиПараметровУчета(Отказ, Получатель, Сообщение) Экспорт");
	ОбязательныеПроцедуры.Добавить("Процедура ПолучитьДополнительныеДанныеДляКорреспондента(ДополнительныеДанные) Экспорт");
	ОбязательныеПроцедуры.Добавить("Процедура ПриПодключенииККорреспонденту(ВерсияКорреспондента) Экспорт");
	ОбязательныеПроцедуры.Добавить("Процедура ПриОтправкеДанныхОтправителя(Отправитель, Игнорировать) Экспорт");
	ОбязательныеПроцедуры.Добавить("Процедура ПриПолученииДанныхОтправителя(Отправитель, Игнорировать) Экспорт");
	
	ОбязательныеПроцедуры.Добавить("Функция НастройкаОтборовНаУзле(ВерсияКорреспондента, ИмяФормы, ИдентификаторНастройки) Экспорт");
	ОбязательныеПроцедуры.Добавить("Функция НастройкаОтборовНаУзлеБазыКорреспондента(ВерсияКорреспондента, ИмяФормы, ИдентификаторНастройки) Экспорт");
	ОбязательныеПроцедуры.Добавить("Функция ЗначенияПоУмолчаниюНаУзле(ВерсияКорреспондента, ИмяФормы, ИдентификаторНастройки) Экспорт");
	ОбязательныеПроцедуры.Добавить("Функция ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента(ВерсияКорреспондента, ИмяФормы, ИдентификаторНастройки) Экспорт");
	ОбязательныеПроцедуры.Добавить("Функция ОписаниеОграниченийПередачиДанных(НастройкаОтборовНаУзле, ВерсияКорреспондента, ИдентификаторНастройки) Экспорт");
	ОбязательныеПроцедуры.Добавить("Функция ОписаниеОграниченийПередачиДанныхБазыКорреспондента(НастройкаОтборовНаУзле, ВерсияКорреспондента, ИдентификаторНастройки) Экспорт");
	ОбязательныеПроцедуры.Добавить("Функция ОписаниеЗначенийПоУмолчанию(ЗначенияПоУмолчаниюНаУзле, ВерсияКорреспондента, ИдентификаторНастройки) Экспорт");
	ОбязательныеПроцедуры.Добавить("Функция ОписаниеЗначенийПоУмолчаниюБазыКорреспондента(ЗначенияПоУмолчаниюНаУзле, ВерсияКорреспондента, ИдентификаторНастройки) Экспорт");
	ОбязательныеПроцедуры.Добавить("Функция ИмяФайлаНастроекДляПриемника() Экспорт");
	ОбязательныеПроцедуры.Добавить("Функция ИспользуемыеТранспортыСообщенийОбмена() Экспорт");
	ОбязательныеПроцедуры.Добавить("Функция ИмяФормыСозданияНачальногоОбраза() Экспорт");
	ОбязательныеПроцедуры.Добавить("Функция ИспользоватьПомощникСозданияОбменаДанными() Экспорт");
	ОбязательныеПроцедуры.Добавить("Функция КраткаяИнформацияПоОбмену(ИдентификаторНастройки) Экспорт");
	ОбязательныеПроцедуры.Добавить("Функция ПодробнаяИнформацияПоОбмену(ИдентификаторНастройки) Экспорт");
	ОбязательныеПроцедуры.Добавить("Функция ОбщиеДанныеУзлов(ВерсияКорреспондента, ИмяФормы) Экспорт");
	ОбязательныеПроцедуры.Добавить("Функция ПланОбменаИспользуетсяВМоделиСервиса() Экспорт");
	ОбязательныеПроцедуры.Добавить("Функция ПояснениеДляНастройкиПараметровУчета() Экспорт");
	ОбязательныеПроцедуры.Добавить("Функция ПояснениеДляНастройкиПараметровУчетаБазыКорреспондента(ВерсияКорреспондента) Экспорт");
	
	Если Не ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиПовтИсп").ЭтоПланОбменаРаспределеннойИнформационнойБазы(ИмяПланаОбмена) Тогда
		ОбязательныеПроцедуры.Добавить("Процедура НастроитьИнтерактивнуюВыгрузку(Получатель, Параметры) Экспорт");
		ОбязательныеПроцедуры.Добавить("Функция ПредставлениеОтбораИнтерактивнойВыгрузки(Получатель, Параметры) Экспорт");
		ОбязательныеПроцедуры.Добавить("Функция ИмяКонфигурацииИсточника() Экспорт");
	КонецЕсли;
	
	Если ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиПовтИсп").ЭтоПланОбменаXDTO(ИмяПланаОбмена) Тогда
		ОбязательныеПроцедуры.Добавить("Функция ФорматОбмена() Экспорт");
		ОбязательныеПроцедуры.Добавить("Процедура ПолучитьВерсииФорматаОбмена(ВерсииФормата) Экспорт");
	КонецЕсли;
	
	Возврат ОбязательныеПроцедуры;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли