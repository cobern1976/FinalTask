#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Позволяет переопределить настройки плана обмена, заданные по умолчанию.
// Значения настроек по умолчанию см. в ОбменДаннымиСервер.НастройкиПланаОбменаПоУмолчанию.
// 
// Параметры:
//	Настройки - Структура - Содержит настройки по умолчанию.
//
Процедура ОпределитьНастройки(Настройки, ИдентификаторНастройки) Экспорт
	
	Настройки.ПредупреждатьОНесоответствииВерсийПравилОбмена = Истина;
	Настройки.ПутьКФайлуКомплектаПравилНаПользовательскомСайте = "https://users.v8.1c.ru/distribution/project/SSL22";
	Настройки.ПутьКФайлуКомплектаПравилВКаталогеШаблонов = "1c\SSL\";
	
	Если ИдентификаторНастройки = "ТолькоОтправка" Тогда
		Настройки.ЗаголовокКомандыДляСозданияНовогоОбменаДанными = НСтр("ru = 'Отправка данных'");
		ЗаголовокФормыПомощника = НСтр("ru='Отправка данных в 1С:Библиотека стандартных подсистем, редакция 2.3 (настройка)'");
		ЗаголовокФормыУзла      = НСтр("ru='Отправка данных в 1С:Библиотека стандартных подсистем, редакция 2.3'");
		Настройки.ОтображатьЗначенияПоУмолчаниюНаУзле = Ложь;
		Настройки.ОтображатьНастройкуОтборовНаУзлеБазыКорреспондента = Ложь;
	ИначеЕсли ИдентификаторНастройки = "ТолькоПолучение" Тогда
		Настройки.ЗаголовокКомандыДляСозданияНовогоОбменаДанными = НСтр("ru = 'Получение данных'");
		ЗаголовокФормыПомощника = НСтр("ru='Получение данных из 1С:Библиотека стандартных подсистем, редакция 2.3 (настройка)'");
		ЗаголовокФормыУзла      = НСтр("ru='Получение данных из 1С:Библиотека стандартных подсистем, редакция 2.3'");
		Настройки.ОтображатьНастройкуОтборовНаУзле = Ложь;
		Настройки.ОтображатьЗначенияПоУмолчаниюНаУзлеБазыКорреспондента = Ложь;
	ИначеЕсли ИдентификаторНастройки = "Двухсторонний" Тогда
		Настройки.ЗаголовокКомандыДляСозданияНовогоОбменаДанными = НСтр("ru = 'Полная синхронизация'");
		ЗаголовокФормыПомощника = НСтр("ru='Синхронизация данных с 1С:Библиотека стандартных подсистем, редакция 2.3 (настройка)'");
		ЗаголовокФормыУзла      = НСтр("ru='Синхронизация данных с 1С:Библиотека стандартных подсистем, редакция 2.3'");
	КонецЕсли;
	
	Настройки.Вставить("ЗаголовокПомощникаСозданияОбмена", ЗаголовокФормыПомощника);
	Настройки.Вставить("ЗаголовокУзлаПланаОбмена", ЗаголовокФормыУзла);
	Настройки.ВариантыНастроекОбмена = СформироватьМассивНастроек();
	
КонецПроцедуры

// Возвращает имя файла настроек по умолчанию;
// В этот файл будут выгружены настройки обмена для приемника;
// Это значение должно быть одинаковым в плане обмена источника и приемника.
// 
// Возвращаемое значение:
//	Строка - имя файла по умолчанию для выгрузки настроек обмена данными.
//
Функция ИмяФайлаНастроекДляПриемника() Экспорт
	
	Возврат НСтр("ru = 'Настройки синхронизации для БСП'");
	
КонецФункции

// Возвращает структуру отборов на узле плана обмена с установленными значениями по умолчанию;
// Структура настроек повторяет состав реквизитов шапки и табличных частей плана обмена;
// Для реквизитов шапки используются аналогичные по ключу и значению элементы структуры,
// а для табличных частей используются структуры,
// содержащие массивы значений полей табличных частей плана обмена.
// 
// Параметры:
//	ВерсияКорреспондента - Строка - Номер версии корреспондента. Используется, например, для
//									разного состава настроек на узле для разных версий корреспондента.
//	ИмяФормы - Строка - Имя используемой формы настройки узла. Возможно, например, использование
//						различных форм для разных версий корреспондента.
// 
// Возвращаемое значение:
//	СтруктураНастроек - Структура - структура отборов на узле плана обмена.
// 
Функция НастройкаОтборовНаУзле(ВерсияКорреспондента, ИмяФормы, ИдентификаторНастройки) Экспорт
	
	СтруктураТабличнойЧастиОрганизации = Новый Структура;
	СтруктураТабличнойЧастиОрганизации.Вставить("Организация", Новый Массив);
	
	СтруктураТабличнойЧастиПодразделения = Новый Структура;
	СтруктураТабличнойЧастиПодразделения.Вставить("Подразделение", Новый Массив);
	
	СтруктураТабличнойЧастиСклады = Новый Структура;
	СтруктураТабличнойЧастиСклады.Вставить("Склад",           Новый Массив);
	СтруктураТабличнойЧастиСклады.Вставить("СкладПолучатель", Новый Массив);
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ДатаНачалаВыгрузкиДокументов",      НачалоГода(ТекущаяДатаСеанса()));
	СтруктураНастроек.Вставить("ИспользоватьОтборПоОрганизациям",   Ложь);
	СтруктураНастроек.Вставить("ИспользоватьОтборПоПодразделениям", Ложь);
	СтруктураНастроек.Вставить("ИспользоватьОтборПоСкладам",        Ложь);
	СтруктураНастроек.Вставить("Организации",                       СтруктураТабличнойЧастиОрганизации);
	СтруктураНастроек.Вставить("Подразделения",                     СтруктураТабличнойЧастиПодразделения);
	СтруктураНастроек.Вставить("Склады",                            СтруктураТабличнойЧастиСклады);
	
	Если ИдентификаторНастройки = "ТолькоПолучение" Тогда
		
		РежимВыгрузкиДокументов = Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьВручную;
		РежимВыгрузкиДокументовКорреспондента = Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПоУсловию;
		
	ИначеЕсли ИдентификаторНастройки = "ТолькоОтправка" Тогда
		
		РежимВыгрузкиДокументов = Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПоУсловию;
		РежимВыгрузкиДокументовКорреспондента = Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьВручную;
		
	Иначе
		
		РежимВыгрузкиДокументов = Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПоУсловию;
		РежимВыгрузкиДокументовКорреспондента = Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПоУсловию;
		
	КонецЕсли;
	
	СтруктураНастроек.Вставить("РежимВыгрузкиДокументов",                 РежимВыгрузкиДокументов);
	СтруктураНастроек.Вставить("РежимВыгрузкиДокументовКорреспондента",   РежимВыгрузкиДокументовКорреспондента);
	СтруктураНастроек.Вставить("РежимВыгрузкиСправочников",               Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПоУсловию);
	СтруктураНастроек.Вставить("РежимВыгрузкиСправочниковКорреспондента", Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПоУсловию);
	
	Возврат СтруктураНастроек;
	
КонецФункции

// Возвращает структуру значений по умолчанию для узла;
// Структура настроек повторяет состав реквизитов шапки плана обмена;
// Для реквизитов шапки используются аналогичные по ключу и значению элементы структуры.
// 
// Параметры:
//	ВерсияКорреспондента - Строка - Номер версии корреспондента. Используется, например, для разного
//									состава значений по умолчанию на узле для разных версий корреспондента.
//	ИмяФормы - Строка - Имя используемой формы настройки значений по умолчанию.
//						Возможно, например, использование различных форм для разных версий корреспондента.
// 
// Возвращаемое значение:
//  СтруктураНастроек - Структура - структура значений по умолчанию на узле плана обмена.
// 
Функция ЗначенияПоУмолчаниюНаУзле(ВерсияКорреспондента, ИмяФормы, ИдентификаторНастройки) Экспорт
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("СтавкаНДСПоУмолчанию",    Справочники._ДемоСтавкиНДС.НайтиПоРеквизиту("Ставка", 18));
	СтруктураНастроек.Вставить("НоменклатураПоУмолчанию", Справочники._ДемоНоменклатура.ПустаяСсылка());
	
	Возврат СтруктураНастроек;
	
КонецФункции

// Возвращает строку описания ограничений миграции данных для пользователя;
// Прикладной разработчик на основе установленных отборов на узле должен сформировать строку описания ограничений 
// удобную для восприятия пользователем.
// 
// Параметры:
//	НастройкаОтборовНаУзле - Структура - структура отборов на узле плана обмена,
//										 полученная при помощи функции НастройкаОтборовНаУзле().
//	ВерсияКорреспондента - Строка - Номер версии корреспондента. Используется, например, для различного
//									описания ограничений передачи данных в зависимости от версии корреспондента.
// Возвращаемое значение:
//	Строка - Строка описания ограничений миграции данных для пользователя.
//
Функция ОписаниеОграниченийПередачиДанных(НастройкаОтборовНаУзле, ВерсияКорреспондента, ИдентификаторНастройки) Экспорт
	
	Если ИдентификаторНастройки = "ТолькоПолучение" Тогда
		
		ОписаниеОграниченийПередачиДанных = "";
		
	Иначе
		
		ПредставлениеДокументов = "";
		ПредставлениеНормативноСправочнойИнформации = "";
		ПредставлениеОграниченийОтправкиДанных = "";
		
		// Представление документов
		Если НастройкаОтборовНаУзле.РежимВыгрузкиДокументов = Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПоУсловию Тогда
			
			ПредставлениеПериода = "";
			
			Если ЗначениеЗаполнено(НастройкаОтборовНаУзле.ДатаНачалаВыгрузкиДокументов) Тогда
				ПредставлениеПериода = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = ', начиная с %1'"),
				Формат(НастройкаОтборовНаУзле.ДатаНачалаВыгрузкиДокументов, "ДЛФ=DD"));
			Иначе
				ПредставлениеПериода = " " + НСтр("ru = 'за весь период ведения учета в программе.'");
			КонецЕсли;
			
			ПредставлениеДокументов = НСтр("ru = 'Отправлять документы[ПредставлениеПериода]'");
			
			ПредставлениеДокументов = СтрЗаменить(ПредставлениеДокументов, "[ПредставлениеПериода]", ПредставлениеПериода);
			
		ИначеЕсли НастройкаОтборовНаУзле.РежимВыгрузкиДокументов = Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьВручную Тогда
			
			ПредставлениеДокументов = НСтр("ru = 'Отправлять документы только вручную.'");
			
		ИначеЕсли НастройкаОтборовНаУзле.РежимВыгрузкиДокументов = Перечисления.РежимыВыгрузкиОбъектовОбмена.НеВыгружать Тогда
			
			ПредставлениеДокументов = НСтр("ru = 'Не отправлять документы.'");
			
		КонецЕсли;
		
		// Нормативно-справочная информация.
		Если НастройкаОтборовНаУзле.РежимВыгрузкиСправочников = Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПоУсловию Тогда
			
			ПредставлениеНормативноСправочнойИнформации = НСтр("ru = 'Отправлять всю нормативно-справочную информацию.'");
			
		ИначеЕсли НастройкаОтборовНаУзле.РежимВыгрузкиСправочников = Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПриНеобходимости Тогда
			
			ПредставлениеНормативноСправочнойИнформации = НСтр("ru = 'Отправлять нормативно-справочную информацию, которая используется в отправляемых документах.'");
			
		ИначеЕсли НастройкаОтборовНаУзле.РежимВыгрузкиСправочников = Перечисления.РежимыВыгрузкиОбъектовОбмена.НеВыгружать Тогда
			
			ПредставлениеНормативноСправочнойИнформации = НСтр("ru = 'Не отправлять нормативно-справочную информацию.'");
			
		КонецЕсли;
		
		// Представление ограничений отправки данных.
		Если (НастройкаОтборовНаУзле.РежимВыгрузкиДокументов = Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПоУсловию)
			ИЛИ (НастройкаОтборовНаУзле.РежимВыгрузкиДокументов = Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьВручную)
			ИЛИ (НастройкаОтборовНаУзле.РежимВыгрузкиСправочников = Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПоУсловию) Тогда
			
			ПредставлениеОрганизаций = "";
			ПредставлениеПодразделений = "";
			ПредставлениеСкладов = "";
			
			// отбор по организациям
			Если НастройкаОтборовНаУзле.ИспользоватьОтборПоОрганизациям Тогда
				СтрокаПредставленияОтбора = СтрСоединить(НастройкаОтборовНаУзле.Организации.Организация, "; ");
				ПредставлениеОрганизаций = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Только по организациям: %1.'"), СтрокаПредставленияОтбора);
			Иначе
				ПредставлениеОрганизаций = НСтр("ru = 'По всем организациям.'");
			КонецЕсли;
			
			// отбор по подразделениям
			Если НастройкаОтборовНаУзле.ИспользоватьОтборПоПодразделениям Тогда
				СтрокаПредставленияОтбора = СтрСоединить(НастройкаОтборовНаУзле.Подразделения.Подразделение, "; ");
				ПредставлениеПодразделений = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Только по подразделениям: %1.'"), СтрокаПредставленияОтбора);
			Иначе
				ПредставлениеПодразделений = НСтр("ru = 'По всем подразделениям.'");
			КонецЕсли;
			
			// отбор по складам
			Если НастройкаОтборовНаУзле.ИспользоватьОтборПоСкладам Тогда
				СтрокаПредставленияОтбора = СтрСоединить(НастройкаОтборовНаУзле.Склады.Склад, "; ");
				ПредставлениеСкладов = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Только по складам: %1.'"), СтрокаПредставленияОтбора);
			Иначе
				ПредставлениеСкладов = НСтр("ru = 'По всем складам.'");
			КонецЕсли;
			
			ПредставлениеОграниченийОтправкиДанных = НСтр("ru = 'Отправлять данные:
			|[ПредставлениеОрганизаций]
			|[ПредставлениеПодразделений]
			|[ПредставлениеСкладов]'");
			
			ПредставлениеОграниченийОтправкиДанных = СтрЗаменить(ПредставлениеОграниченийОтправкиДанных, "[ПредставлениеОрганизаций]", ПредставлениеОрганизаций);
			ПредставлениеОграниченийОтправкиДанных = СтрЗаменить(ПредставлениеОграниченийОтправкиДанных, "[ПредставлениеПодразделений]", ПредставлениеПодразделений);
			ПредставлениеОграниченийОтправкиДанных = СтрЗаменить(ПредставлениеОграниченийОтправкиДанных, "[ПредставлениеСкладов]", ПредставлениеСкладов);
			
		КонецЕсли;
		
		Результат = НСтр("ru = '[ПредставлениеДокументов]
		|[ПредставлениеНормативноСправочнойИнформации]
		|
		|[ПредставлениеОграниченийОтправкиДанных]'");
		
		Результат = СтрЗаменить(Результат, "[ПредставлениеДокументов]", ПредставлениеДокументов);
		Результат = СтрЗаменить(Результат, "[ПредставлениеНормативноСправочнойИнформации]", ПредставлениеНормативноСправочнойИнформации);
		ОписаниеОграниченийПередачиДанных = СтрЗаменить(Результат, "[ПредставлениеОграниченийОтправкиДанных]", ПредставлениеОграниченийОтправкиДанных);
		
	КонецЕсли;
	
	Возврат ОписаниеОграниченийПередачиДанных;
	
КонецФункции

// Возвращает строку описания значений по умолчанию для пользователя;
// Прикладной разработчик на основе установленных значений по умолчанию на узле должен сформировать строку описания 
// удобную для восприятия пользователем.
// 
// Параметры:
//	ЗначенияПоУмолчаниюНаУзле - Структура - структура значений по умолчанию на узле плана обмена,
//											полученная при помощи функции ЗначенияПоУмолчаниюНаУзле().
//	ВерсияКорреспондента - Строка - Номер версии корреспондента. Используется, например, для различного
//									описания значений по умолчанию в зависимости от версии корреспондента.
// 
// Возвращаемое значение:
//  Строка - строка описания для пользователя значений по умолчанию.
//
Функция ОписаниеЗначенийПоУмолчанию(ЗначенияПоУмолчаниюНаУзле, ВерсияКорреспондента, ИдентификаторНастройки) Экспорт
	
	Если ИдентификаторНастройки = "ТолькоОтправка" Тогда
		
		ОписаниеЗначенийПоУмолчанию = "";
		
	Иначе
		
		// Ставка НДС
		Если ЗначениеЗаполнено(ЗначенияПоУмолчаниюНаУзле.СтавкаНДСПоУмолчанию) Тогда
			ОписаниеСтавкаНДС = НСтр("ru = 'В качестве ставки НДС в документах поступления будет использоваться ставка ""%1"".'");
			ОписаниеСтавкаНДС = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ОписаниеСтавкаНДС, ЗначенияПоУмолчаниюНаУзле.СтавкаНДСПоУмолчанию);
		Иначе
			ОписаниеСтавкаНДС = НСтр("ru = 'Ставка НДС в документах поступления указана не будет.'");
		КонецЕсли;
		
		// Номенклатура
		Если ЗначениеЗаполнено(ЗначенияПоУмолчаниюНаУзле.НоменклатураПоУмолчанию) Тогда
			НСтрока = НСтр("ru = 'Для документов списания в производство будет использоваться номенклатура ""%1"".'");
			ОписаниеНоменклатура = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтрока, ЗначенияПоУмолчаниюНаУзле.НоменклатураПоУмолчанию);
		Иначе
			ОписаниеНоменклатура = НСтр("ru = 'Для документов списания в производство номенклатура указана не будет.'");
		КонецЕсли;
		
		ШаблонОписанияЗначенийПоУмолчанию = НСтр("ru = '%1
		|%2'");
		
		ОписаниеЗначенийПоУмолчанию = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОписанияЗначенийПоУмолчанию, ОписаниеНоменклатура, ОписаниеСтавкаНДС);
		
	КонецЕсли;
	
	Возврат ОписаниеЗначенийПоУмолчанию;
	
КонецФункции

// Определяет, будет ли использоваться помощник для создания новых узлов плана обмена.
//
// Возвращаемое значение:
//  Булево - признак использования помощника.
//
Функция ИспользоватьПомощникСозданияОбменаДанными() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает пользовательскую форму для создания начального образа базы.
// Эта форма будет открыта после завершения настройки обмена с помощью помощника.
// Для планов обмена не РИБ функция возвращает пустую строку.
//
// Возвращаемое значение:
//  Строка - имя используемой формы.
//
// Пример:
//	Возврат "ПланОбмена.ОбменВРаспределеннойИнформационнойБазе.Форма.ФормаСозданияНачальногоОбраза";
//
Функция ИмяФормыСозданияНачальногоОбраза() Экспорт
	
	Возврат "";
	
КонецФункции

// Возвращает массив используемых транспортов сообщений для этого плана обмена.
//
// Возвращаемое значение:
//	Массив - массив содержит значения перечисления ВидыТранспортаСообщенийОбмена.
//
// Пример:
// 1. Если план обмена поддерживает только два транспорта сообщений FILE и FTP,
// то тело функции следует определить следующим образом:
//
//	Результат = Новый Массив;
//	Результат.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.FILE);
//	Результат.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.FTP);
//	Возврат Результат;
//
// 2. Если план обмена поддерживает все транспорты сообщений, определенных в конфигурации,
// то тело функции следует определить следующим образом:
//
//	Возврат ОбменДаннымиСервер.ВсеТранспортыСообщенийОбменаКонфигурации();
//
Функция ИспользуемыеТранспортыСообщенийОбмена() Экспорт
	
	Возврат ОбменДаннымиСервер.ВсеТранспортыСообщенийОбменаКонфигурации();
	
КонецФункции

// Устанавливает признак использования плана обмена для организации обмена в модели сервиса.
// Если признак установлен, то в сервисе можно включить обмен данными
// с использованием этого плана обмена.
// Если признак не установлен, то план обмена будет использоваться только
// для обмена в локальном режиме работы конфигурации.
//
// Возвращаемое значение:
//	Булево - признак использования плана обмена в модели сервиса.
//
Функция ПланОбменаИспользуетсяВМоделиСервиса() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Предназначена для точной идентификации имени этой конфигурации при настройке 
// синхронизации данных в модели сервиса.
// В случае если данная конфигурация разработана на основе оригинальной конфигурации
// и должна поддерживать обмен с другими прикладными решениями с помощью плана обмена,
// взятого из оригинальной конфигурации, то следует вернуть имя оригинальной конфигурации.
// Например, для конфигурации МояБухгалтерия, которая является доработанной конфигурацией БухгалтерияПредприятия,
// следует вернуть БухгалтерияПредприятия.
//
// Используется только для планов обмена в модели сервиса.
//
// Возвращаемое значение:
//	Строка - имя этой или другой конфигурации, от имени которой выполняется обмен данными
//			(имя конфигурации как задано в метаданных).
//
// Пример:
//  Возврат "БухгалтерияПредприятия";
//
Функция ИмяКонфигурацииИсточника() Экспорт
 
	// В демонстрационной конфигурации значение хранится в константе
	// _ДемоИмяКонфигурацииВОбменеСБиблиотекойСтандартныхПодсистем.
	// Это связано с необходимостью настройки обмена между идентичными конфигурациями "БСП-БСП".
	// Для настройки обмена между различными конфигурациями функция должна возвращать константное значение.
	УстановитьПривилегированныйРежим(Истина);
	Результат = Константы._ДемоИмяКонфигурацииВОбменеСБиблиотекойСтандартныхПодсистем.Получить();
	Возврат ?(ПустаяСтрока(Результат), Метаданные.Имя, Результат);
 
КонецФункции

// Возвращает признак того, что план обмена поддерживает обмен данными с корреспондентом, работающим в модели сервиса.
// Если признак установлен, то становится возможным создать обмен данными когда эта информационная база
// работает в локальном режиме, а корреспондент в модели сервиса.
//
// Возвращаемое значение:
//	Булево - признак возможности настройки обмена с корреспондентов в модели сервиса.
//
Функция КорреспондентВМоделиСервиса() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Задает краткую информацию по обмену, выводимую при настройке синхронизации данных.
//
// Возвращаемое значение:
//	Строка - краткая информация о настраиваемом обмене.
//
Функция КраткаяИнформацияПоОбмену(ИдентификаторНастройки) Экспорт
	
	Если ИдентификаторНастройки = "ТолькоОтправка" Тогда
		ПоясняющийТекст = НСтр("ru = 'Позволяет отправлять данные в программу 1С:Библиотека стандартных подсистем. Отправляются следующие типы данных: справочники (например, Организации), документы (например, Реализация товаров), регистры сведений (например, Курсы валют), план видов характеристик Дополнительные реквизиты и сведения, а также константы.'");
	ИначеЕсли ИдентификаторНастройки = "ТолькоПолучение" Тогда
		ПоясняющийТекст = НСтр("ru = 'Позволяет получать данные из программы 1С:Библиотека стандартных подсистем. Получаются следующие типы данных: справочники (например, Организации), документы (например, Реализация товаров), регистры сведений (например, Курсы валют), план видов характеристик Дополнительные реквизиты и сведения, а также константы.'");
	ИначеЕсли ИдентификаторНастройки = "Двухсторонний" Тогда
		ПоясняющийТекст = НСтр("ru = 'Позволяет синхронизировать данные между двумя однотипными программами 1С:Библиотека стандартных подсистем. В синхронизации участвуют следующие типы данных: справочники (например, Организации), документы (например, Реализация товаров), регистры сведений (например, Курсы валют), план видов характеристик Дополнительные реквизиты и сведения, а так же константы. Синхронизация является двухсторонней и позволяет иметь актуальные данные в каждой из информационных баз.'");
	КонецЕсли;
	
	Возврат ПоясняющийТекст;
	
КонецФункции

// Задает подробную информацию по обмену, выводимую при настройке синхронизации данных.
//
// Возвращаемое значение:
//	Строка - Ссылка на подробную информацию по настраиваемой синхронизации в виде гиперссылки или полного пути к форме.
//
Функция ПодробнаяИнформацияПоОбмену(ИдентификаторНастройки) Экспорт
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
	
		Возврат "http://its.1c.ru/db/bspdoc#content:120:1:IssOgl2_Обмен%2520с%2520Библиотекой%2520стандартных%2520подсистем";
	
	Иначе
		
		Возврат "ПланОбмена._ДемоОбменСБиблиотекойСтандартныхПодсистем.Форма.ПодробнаяИнформация";
		
	КонецЕсли;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Для работы через подключение к корреспонденту через внешнее соединение или веб-сервис.

// Возвращает имена реквизитов и табличных частей плана обмена, перечисленных через запятую,
// которые являются общими для пары обменивающихся конфигураций.
//
// Параметры:
//	ВерсияКорреспондента - Строка - Номер версии корреспондента. Используется, например, для разного
//									состава общих данных узлов в зависимости от версии корреспондента.
//	ИмяФормы - Строка - Имя используемой формы настройки значений по умолчанию.
//						Возможно, например, использование различных форм для разных версий корреспондента.
//
// Возвращаемое значение:
//	Строка - Список имен реквизитов.
//
Функция ОбщиеДанныеУзлов(ВерсияКорреспондента, ИмяФормы) Экспорт
	
	Возврат "ДатаНачалаВыгрузкиДокументов, РежимВыгрузкиСправочников, РежимВыгрузкиСправочниковКорреспондента, РежимВыгрузкиДокументов, РежимВыгрузкиДокументовКорреспондента, ИспользоватьОтборПоПодразделениям, ИспользоватьОтборПоСкладам, Подразделения, Склады";
	
КонецФункции

// Возвращает структуру отборов на узле плана обмена базы корреспондента с установленными значениями по умолчанию;
// Структура настроек повторяет состав реквизитов шапки и табличных частей плана обмена базы корреспондента;
// Для реквизитов шапки используются аналогичные по ключу и значению элементы структуры,
// а для табличных частей используются структуры,
// содержащие массивы значений полей табличных частей плана обмена.
// 
// Параметры:
//	ВерсияКорреспондента - Строка - Номер версии корреспондента. Используется, например, для
//									разного состава настроек на узле для разных версий корреспондента.
//	ИмяФормы - Строка - Имя используемой формы настройки узла. Возможно, например, использование
//						различных форм для разных версий корреспондента.
// 
// Возвращаемое значение:
//  СтруктураНастроек - Структура - структура отборов на узле плана обмена базы корреспондента.
// 
Функция НастройкаОтборовНаУзлеБазыКорреспондента(ВерсияКорреспондента, ИмяФормы, ИдентификаторНастройки) Экспорт
	
	СтруктураТабличнойЧастиОрганизации = Новый Структура;
	СтруктураТабличнойЧастиОрганизации.Вставить("Организация",      Новый Массив);
	СтруктураТабличнойЧастиОрганизации.Вставить("Организация_Ключ", Новый Массив);
	
	СтруктураТабличнойЧастиПодразделения = Новый Структура;
	СтруктураТабличнойЧастиПодразделения.Вставить("Подразделение",      Новый Массив);
	СтруктураТабличнойЧастиПодразделения.Вставить("Подразделение_Ключ", Новый Массив);
	
	СтруктураТабличнойЧастиСклады = Новый Структура;
	СтруктураТабличнойЧастиСклады.Вставить("Склад",                Новый Массив);
	СтруктураТабличнойЧастиСклады.Вставить("Склад_Ключ",           Новый Массив);
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ДатаНачалаВыгрузкиДокументов",      НачалоГода(ТекущаяДатаСеанса()));
	СтруктураНастроек.Вставить("ИспользоватьОтборПоОрганизациям",   Ложь);
	СтруктураНастроек.Вставить("ИспользоватьОтборПоПодразделениям", Ложь);
	СтруктураНастроек.Вставить("ИспользоватьОтборПоСкладам",        Ложь);
	
	СтруктураНастроек.Вставить("Организации",   СтруктураТабличнойЧастиОрганизации);
	СтруктураНастроек.Вставить("Подразделения", СтруктураТабличнойЧастиПодразделения);
	СтруктураНастроек.Вставить("Склады",        СтруктураТабличнойЧастиСклады);
	
	СтруктураНастроек.Вставить("ВариантНастройки", "Двухсторонний");
	
	Если ИдентификаторНастройки = "ТолькоПолучение" Тогда
		
		РежимВыгрузкиДокументов = Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПоУсловию;
		РежимВыгрузкиДокументовКорреспондента = Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьВручную;
		
	ИначеЕсли ИдентификаторНастройки = "ТолькоОтправка" Тогда
		
		РежимВыгрузкиДокументов = Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьВручную;
		РежимВыгрузкиДокументовКорреспондента = Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПоУсловию;
		
	Иначе
		
		РежимВыгрузкиДокументов = Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПоУсловию;
		РежимВыгрузкиДокументовКорреспондента = Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПоУсловию;
		
	КонецЕсли;
	
	СтруктураНастроек.Вставить("РежимВыгрузкиДокументов",                 РежимВыгрузкиДокументов);
	СтруктураНастроек.Вставить("РежимВыгрузкиДокументовКорреспондента",   РежимВыгрузкиДокументовКорреспондента);
	СтруктураНастроек.Вставить("РежимВыгрузкиСправочников",               Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПоУсловию);
	СтруктураНастроек.Вставить("РежимВыгрузкиСправочниковКорреспондента", Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПоУсловию);
	
	Возврат СтруктураНастроек;
	
КонецФункции

// Возвращает структуру значений по умолчанию для узла базы корреспондента;
// Структура настроек повторяет состав реквизитов шапки плана обмена базы корреспондента;
// Для реквизитов шапки используются аналогичные по ключу и значению элементы структуры.
// 
// Параметры:
//	ВерсияКорреспондента - Строка - Номер версии корреспондента. Используется, например, для разного
//									состава значений по умолчанию на узле для разных версий корреспондента.
//	ИмяФормы - Строка - Имя используемой формы настройки значений по умолчанию.
//						Возможно, например, использование различных форм для разных версий корреспондента.
// 
// Возвращаемое значение:
//  СтруктураНастроек - Структура - структура значений по умолчанию на узле плана обмена базы корреспондента.
//
Функция ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента(ВерсияКорреспондента, ИмяФормы, ИдентификаторНастройки) Экспорт
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("СтавкаНДСПоУмолчанию",    "");
	СтруктураНастроек.Вставить("НоменклатураПоУмолчанию", "");
	
	СтруктураНастроек.Вставить("СтавкаНДСПоУмолчанию_Ключ",    "");
	СтруктураНастроек.Вставить("НоменклатураПоУмолчанию_Ключ", "");
	
	Возврат СтруктураНастроек;
	
КонецФункции

// Возвращает строку описания ограничений миграции данных для базы корреспондента, которая отображается пользователю;
// Прикладной разработчик на основе установленных отборов на узле базы корреспондента должен сформировать строку
// описания ограничений  удобную для восприятия пользователем.
// 
// Параметры:
//	НастройкаОтборовНаУзле - Структура - структура отборов на узле плана обмена базы корреспондента,
//                                       полученная при помощи функции НастройкаОтборовНаУзлеБазыКорреспондента().
//	ВерсияКорреспондента - Строка - Номер версии корреспондента. Используется, например, для различного
//									описания ограничений передачи данных в зависимости от версии корреспондента.
// 
// Возвращаемое значение:
//	Строка - строка описания ограничений миграции данных для пользователя.
//
Функция ОписаниеОграниченийПередачиДанныхБазыКорреспондента(НастройкаОтборовНаУзле, ВерсияКорреспондента, ИдентификаторНастройки) Экспорт
	
	Если ИдентификаторНастройки = "ТолькоОтправка" Тогда
		ОписаниеОграниченийПередачиДанныхБазыКорреспондента = "";
	Иначе
		// СДемо-обмен БСП-БСП" - это обмен между идентичными конфигурациями, поэтому описание совпадает для текущей базы и
		// базы-корреспондента.
		ОписаниеОграниченийПередачиДанныхБазыКорреспондента = ОписаниеОграниченийПередачиДанных(НастройкаОтборовНаУзле, ВерсияКорреспондента, ИдентификаторНастройки);
	КонецЕсли;
	
	Возврат ОписаниеОграниченийПередачиДанныхБазыКорреспондента;
	
КонецФункции

// Возвращает строку описания значений по умолчанию для базы корреспондента, которая отображается пользователю;
// Прикладной разработчик на основе установленных значений по умолчанию на узле базы корреспондента должен сформировать
// строку описания
// удобную для восприятия пользователем.
// 
// Параметры:
//  ЗначенияПоУмолчаниюНаУзле - Структура - структура значений по умолчанию на узле плана обмена базы корреспондента,
//                                       полученная при помощи функции ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента().
//	ВерсияКорреспондента - Строка - Номер версии корреспондента. Используется, например, для различного
//									описания значений по умолчанию в зависимости от версии корреспондента.
// 
// Возвращаемое значение:
//  Строка - строка описания для пользователя значений по умолчанию.
//
Функция ОписаниеЗначенийПоУмолчаниюБазыКорреспондента(ЗначенияПоУмолчаниюНаУзле, ВерсияКорреспондента, ИдентификаторНастройки) Экспорт
	
	Если ИдентификаторНастройки = "ТолькоПолучение" Тогда
		ОписаниеЗначенийПоУмолчаниюБазыКорреспондента = "";
	Иначе
		// СДемо-обмен БСП-БСП" - это обмен между идентичными конфигурациями, поэтому описание совпадает для текущей базы и
		// базы-корреспондента.
		ОписаниеЗначенийПоУмолчаниюБазыКорреспондента = ОписаниеЗначенийПоУмолчанию(ЗначенияПоУмолчаниюНаУзле, ВерсияКорреспондента, ИдентификаторНастройки);
	КонецЕсли;
	
	Возврат ОписаниеЗначенийПоУмолчаниюБазыКорреспондента;
	
КонецФункции

// Определяет текст пояснения для настройки параметров учета базы-корреспондента.
// 
// Параметры:
//	ВерсияКорреспондента - Строка - Номер версии корреспондента. Используется, например, для различного
//									пояснения для настройки параметров учета в зависимости от версии корреспондента.
// 
// Возвращаемое значение:
//  Строка - строка описания пояснения для настройки параметров учета базы-корреспондента.
//
Функция ПояснениеДляНастройкиПараметровУчетаБазыКорреспондента(ВерсияКорреспондента) Экспорт
	
	Возврат НСтр("ru = 'Требуется указать ответственных для организаций во втором приложении.
		|Для этого перейдите во второе приложение, в разделе ""Синхронизация данных"" выберите команду ""Ответственные лица организаций"".'");
	
КонецФункции

// Процедура предназначена для получения дополнительных данных, используемых при настройке обмена в базе-корреспонденте.
//
// Параметры:
//	ДополнительныеДанные - Структура. Дополнительные данные, которые будут использованы
//	в базе-корреспонденте при настройке обмена.
//	В качестве значений структуры применимы только значения, поддерживающие XDTO-сериализацию.
//
Процедура ПолучитьДополнительныеДанныеДляКорреспондента(ДополнительныеДанные) Экспорт
	
	ДополнительныеДанные.Вставить("ИспользоватьУчетНДС", ПолучитьФункциональнуюОпцию("_ДемоУчитыватьНДС"));
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Константы и проверка параметров учета.

// Определяет текст пояснения для настройки параметров учета.
// 
// Возвращаемое значение:
//	Строка - строка описания пояснения для настройки параметров учета.
//
Функция ПояснениеДляНастройкиПараметровУчета() Экспорт
	
	Возврат НСтр("ru = 'Требуется указать ответственных для организаций.
		|Для этого перейдите в раздел ""Синхронизация данных"" и выберите команду ""Ответственные лица организаций"".'");
	
КонецФункции

// Проверяет корректность настройки параметров учета.
//
// Параметры:
//	Отказ - Булево - Признак невозможности продолжения настройки обмена из-за некорректно настроенных параметров учета.
//	Получатель - ПланОбменаСсылка - Узел обмена, для которого выполняется проверка параметров учета.
//	Сообщение - Строка - Содержит текст сообщения о некорректных параметрах учета.
//
Процедура ОбработчикПроверкиПараметровУчета(Отказ, Получатель, Сообщение) Экспорт
	
	Отбор = Неопределено;
	
	СвойстваПолучателя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Получатель, "ИспользоватьОтборПоОрганизациям, Организации");
	
	Если СвойстваПолучателя.ИспользоватьОтборПоОрганизациям Тогда
		
		Отбор = СвойстваПолучателя.Организации.Выгрузить().ВыгрузитьКолонку("Организация");
		
	КонецЕсли;
	
	Если Не РегистрыСведений._ДемоОтветственныеЛица.ДляВсехОрганизацийНазначеныОтветственные(Отбор, Сообщение) Тогда
		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий

// Обработчик события при подключении к корреспонденту.
// Событие возникает при успешном подключении к корреспонденту и получении версии конфигурации корреспондента
// при настройке обмена с использованием помощника через прямое подключение
// или при подключении к корреспонденту через Интернет.
// В обработчике можно проанализировать версию корреспондента и,
// если настройка обмена не поддерживается с корреспондентом указанной версии, то вызвать исключение.
//
// Параметры:
//	ВерсияКорреспондента - Строка - версия конфигурации корреспондента, например, "2.1.5.1".
//
Процедура ПриПодключенииККорреспонденту(ВерсияКорреспондента) Экспорт
	
	Если ВерсияКорреспондента = "0.0.0.0" Тогда
		ВерсияКорреспондента = "2.0.1.1";
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ВерсияКорреспондента, "1.0.6.8") < 0 Тогда
		
		ВызватьИсключение НСтр("ru = 'Настройка синхронизации данных поддерживается только с демонстрационной конфигурацией
			|""Библиотека стандартных подсистем"" версии 1.0.6 и выше.'");
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события при отправке данных узла-отправителя.
// Событие возникает при отправке данных узла-отправителя из текущей базы в корреспондент,
// до помещения данных узла в сообщения обмена.
// В обработчике можно изменить отправляемые данные или вовсе отказаться от отправки данных узла.
//
// Параметры:
//	Отправитель - ПланОбменаОбъект, Структура - узел плана обмена, от имени которого выполняется отправка данных.
//	Игнорировать - Булево - признак отказа от выгрузки данных узла.
//							Если в обработчике установить значение этого параметра в Истина,
//							то отправка данных узла выполнена не будет. Значение по умолчанию - Ложь.
//
Процедура ПриОтправкеДанныхОтправителя(Отправитель, Игнорировать) Экспорт
	
КонецПроцедуры

// Обработчик события при получении данных узла-отправителя.
// Событие возникает при получении данных узла-отправителя,
// когда данные узла прочитаны из сообщения обмена, но не записаны в информационную базу.
// В обработчике можно изменить полученные данные или вовсе отказаться от получения данных узла.
//
// Параметры:
//	Отправитель - ПланОбменаОбъект, Структура - узел плана обмена, от имени которого выполняется получение данных.
//	Игнорировать - Булево - признак отказа от получения данных узла.
//							Если в обработчике установить значение этого параметра в Истина,
//							то получение данных узла выполнена не будет. Значение по умолчанию - Ложь.
//
Процедура ПриПолученииДанныхОтправителя(Отправитель, Игнорировать) Экспорт
	
	Если ТипЗнч(Отправитель) = Тип("Структура") Тогда
		
		Если Отправитель.Свойство("РежимВыгрузкиСправочников") Тогда
			ПоменятьЗначения(Отправитель, "РежимВыгрузкиСправочников", "РежимВыгрузкиСправочниковКорреспондента");
		КонецЕсли;
		
		Если Отправитель.Свойство("РежимВыгрузкиДокументов") Тогда
			ПоменятьЗначения(Отправитель, "РежимВыгрузкиДокументов", "РежимВыгрузкиДокументовКорреспондента");
		КонецЕсли;
		
	Иначе
		
		ПоменятьЗначения(Отправитель, "РежимВыгрузкиСправочников", "РежимВыгрузкиСправочниковКорреспондента");
		ПоменятьЗначения(Отправитель, "РежимВыгрузкиДокументов", "РежимВыгрузкиДокументовКорреспондента");
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Переопределяемая настройка дополнения выгрузки.

// Предназначена для настройки вариантов интерактивной настройки выгрузки по сценарию узла.
// Для настройки необходимо установить значения свойств параметров в необходимые значения.
//
// Используется для контроля режимов работы помощника интерактивного обмена данными.
//
// Параметры:
//	Получатель - ПланОбменаСсылка - Узел, для которого производится настройка.
//	Параметры  - Структура        - Параметры для изменения. Содержит поля:
//		*ВариантБезДополнения - Структура     - настройки типового варианта "Не добавлять". Содержит поля:
//			*Использование - Булево - флаг разрешения использования варианта. По умолчанию Истина.
//			*Порядок       - Число  - порядок размещения варианта на форме помощника, сверху вниз. По умолчанию 1.
//			*Заголовок     - Строка - позволяет переопределить название типового варианта.
//			*Пояснение     - Строка - позволяет переопределить текст пояснения варианта для пользователя.
//		*ВариантВсеДокументы - Структура      - настройки типового варианта "Добавить все документы за период". Содержит
//		                                        поля:
//			*Использование - Булево - флаг разрешения использования варианта. По умолчанию Истина.
//			*Порядок       - Число  - порядок размещения варианта на форме помощника, сверху вниз. По умолчанию 2.
//			*Заголовок     - Строка - позволяет переопределить название типового варианта.
//			*Пояснение     - Строка - позволяет переопределить текст пояснения варианта для пользователя.
//		*ВариантПроизвольныйОтбор - Структура - настройки типового варианта "Добавить данные с произвольным отбором".
//		                                        Содержит поля:
//			*Использование - Булево - флаг разрешения использования варианта. По умолчанию Истина.
//			*Порядок       - Число  - порядок размещения варианта на форме помощника, сверху вниз. По умолчанию 3.
//			*Заголовок     - Строка - позволяет переопределить название типового варианта.
//			*Пояснение     - Строка - позволяет переопределить текст пояснения варианта для пользователя.
//		*ВариантДополнительно - Структура     - настройки дополнительного варианта по сценарию узла. Содержит поля:
//			*Использование            - Булево            - флаг разрешения использования варианта. По умолчанию Ложь.
//			*Порядок                  - Число             - порядок размещения варианта на форме помощника, сверху вниз. По
//			                                                умолчанию 4.
//			*Заголовок                - Строка            - название варианта для отображения на форме.
//			*ИмяФормыОтбора           - Строка            - Имя формы, вызываемой для редактирования настроек.
//			*ЗаголовокКомандыФормы    - Строка            - Заголовок для отрисовки на форме команды открытия формы настроек.
//			*ИспользоватьПериодОтбора - Булево            - флаг того, что необходим общий отбор по периоду. По умолчанию Ложь.
//			*ПериодОтбора             - СтандартныйПериод - значение периода общего отбора, предлагаемого по умолчанию.
//			*Отбор                    - ТаблицаЗначений   - содержит строки с описанием подробных отборов по сценарию узла.
//			                                                Содержит колонки:
//				*ПолноеИмяМетаданных - Строка                - полное имя метаданных регистрируемого объекта, отбор которого
//				                                               описывает строка.
//                                                             Например "Документ._ДемоПоступлениеТоваров". Можно
//                                                             использовать специальные  значения "ВсеДокументы" и
//                                                             "ВсеСправочники" для отбора соответственно всех
//                                                             документов и всех справочников, регистрирующихся на узле
//                                                             Получатель.
//				*ВыборПериода        - Булево                - флаг того, что данная строка описывает отбор с общим периодом.
//				*Период              - СтандартныйПериод     - значение периода общего отбора для метаданных строки,
//				                                               предлагаемого по умолчанию.
//				*Отбор               - ОтборКомпоновкиДанных - отбор по умолчанию. Поля отбора формируются в соответствии с общим
//				                                               правилами
//                                                             формирования полей компоновки. Например, для указания
//                                                             отбора по реквизиту документа "Организация", необходимо
//                                                             использовать поле "Ссылка.Организация".
//
// Если для всех вариантов флаги разрешения использования установлены в Ложь, то страница дополнения выгрузки в
// помощнике интерактивного обмена данными будет пропущена и дополнительная регистрация объектов производится не будет.
// Например, инициализация вида:
//
//	Параметры.ВариантВсеДокументы.Использование      = Ложь;
//	Параметры.ВариантБезДополнения.Использование     = Ложь;
//	Параметры.ВариантПроизвольныйОтбор.Использование = Ложь;
//	Параметры.ВариантДополнительно.Использование     = Ложь;
//
//	Приведет к тому, что шаг дополнения выгрузки будет полностью пропущен.
//
Процедура НастроитьИнтерактивнуюВыгрузку(Получатель, Параметры) Экспорт
	
	// Настраиваем стандартные варианты.
	Параметры.ВариантБезДополнения.Использование     = Истина;
	Параметры.ВариантБезДополнения.Порядок           = 2;
	Параметры.ВариантВсеДокументы.Использование      = Ложь;
	Параметры.ВариантПроизвольныйОтбор.Использование = Ложь;
	
	// Настраиваем вариант дополнения по сценарию узла.
	Параметры.ВариантДополнительно.Использование  = Истина;
	Параметры.ВариантДополнительно.Порядок        = 1;
	Параметры.ВариантДополнительно.Заголовок      = НСтр("ru='Отправить поступления товаров по организациям:'");
	Параметры.ВариантДополнительно.Пояснение      = НСтр("ru='Дополнительно будут отправлены документы поступления товаров за указанный период по выбранным организациям.'");
	
	Параметры.ВариантДополнительно.ИмяФормыОтбора        = "ПланОбмена._ДемоОбменСБиблиотекойСтандартныхПодсистем.Форма.НастройкаВыгрузки";
	Параметры.ВариантДополнительно.ЗаголовокКомандыФормы = НСтр("ru='Выбрать организации'");
	
	// Вычисляем и устанавливаем параметры сценария.
	ПараметрыПоУмолчанию = ПараметрыВыгрузкиПоУмолчанию(Получатель);
	
	Параметры.ВариантДополнительно.ИспользоватьПериодОтбора = Истина;
	Параметры.ВариантДополнительно.ПериодОтбора = ПараметрыПоУмолчанию.Период;
	
	// Добавляем строку настройки отбора.
	СтрокаОтбора = Параметры.ВариантДополнительно.Отбор.Добавить();
	СтрокаОтбора.ПолноеИмяМетаданных = "Документ._ДемоПоступлениеТоваров";
	СтрокаОтбора.ВыборПериода = Истина;
	СтрокаОтбора.Период       = ПараметрыПоУмолчанию.Период;
	СтрокаОтбора.Отбор        = ПараметрыПоУмолчанию.Отбор;
	
КонецПроцедуры

// Возвращает представление отбора для варианта дополнения выгрузки по сценарию узла.
// См. описание "ВариантДополнительно" в процедуре "НастроитьИнтерактивнуюВыгрузку".
//
// Параметры:
//	Получатель - ПланОбменаСсылка - Узел, для которого определяется представление отбора.
//	Параметры  - Структура        - Характеристики отбора. Содержит поля:
//		*ИспользоватьПериодОтбора - Булево            - флаг того, что необходимо использовать общий отбор по периоду.
//		*ПериодОтбора             - СтандартныйПериод - значение периода общего отбора.
//		*Отбор                    - ТаблицаЗначений   - содержит строки с описанием подробных отборов по сценарию узла.
//		                                                Содержит колонки:
//			*ПолноеИмяМетаданных - Строка                - полное имя метаданных регистрируемого объекта, отбор которого
//			                                               описывает строка.
//                                                         Например "Документ._ДемоПоступлениеТоваров". Могут быть
//                                                         использованы специальные  значения "ВсеДокументы" и
//                                                         "ВсеСправочники" для отбора соответственно всех документов и
//                                                         всех справочников, регистрирующихся на узле Получатель.
//			*ВыборПериода        - Булево                - флаг того, что данная строка описывает отбор с общим периодом.
//			*Период              - СтандартныйПериод     - значение периода общего отбора для метаданных строки.
//			*Отбор               - ОтборКомпоновкиДанных - поля отбора. Поля отбора формируются в соответствии с общим
//			                                               правилами формирования полей компоновки. Например, для указания
//			                                               отбора по реквизиту документа "Организация", будет использовано
//			                                               поле "Ссылка.Организация".
//
// Возвращаемое значение:
//	Строка - описание отбора
//
Функция ПредставлениеОтбораИнтерактивнойВыгрузки(Получатель, Параметры) Экспорт
	
	Если Параметры.ИспользоватьПериодОтбора Тогда
		Если ЗначениеЗаполнено(Параметры.ПериодОтбора) Тогда
			ОписаниеПериода = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='за период: %1'"), НРег(Параметры.ПериодОтбора));
		Иначе
			ДатаНачалаВыгрузки = Получатель.ДатаНачалаВыгрузкиДокументов;
			Если ЗначениеЗаполнено(ДатаНачалаВыгрузки) Тогда
				ОписаниеПериода = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='начиная с даты начала отправки документов: %1'"), Формат(ДатаНачалаВыгрузки, "ДЛФ=DD"));
			Иначе
				ОписаниеПериода = НСтр("ru='за весь период учета'");
			КонецЕсли;
		КонецЕсли;
	Иначе
		ОписаниеПериода = "";
	КонецЕсли;
	
	СписокОрганизаций = ОрганизацииОтбораИнтерактивнойВыгрузки(Параметры.Отбор);
	Если СписокОрганизаций.Количество()=0 Тогда
		ОписаниеОтбораОрганизации = НСтр("ru='по всем организациям'");
	Иначе
		ОписаниеОтбораОрганизации = "";
		Для Каждого Элемент Из СписокОрганизаций Цикл
			ОписаниеОтбораОрганизации = ОписаниеОтбораОрганизации+ ", " + Элемент.Представление;
		КонецЦикла;
		ОписаниеОтбораОрганизации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='по организациям: %1'"), СокрЛП(Сред(ОписаниеОтбораОрганизации, 2)));
	КонецЕсли;

	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Будут отправлены поступления товаров %1,
		         |%2'"),
		ОписаниеПериода,  ОписаниеОтбораОрганизации);
КонецФункции

// Аналог НастроитьИнтерактивнуюВыгрузку для работы в модели сервиса.
//
// В текущей версии обрабатывается только использование стандартных вариантов дополнения выгрузки,
// Пользовательский сценарий, описание, расположение и т.п. не учитывается.
// 
// Если для всех вариантов флаги разрешения использования установлены в Ложь, то страница дополнения
// выгрузки в помощнике интерактивного обмена данными будет пропущена.
// 
// Параметры:
//	См. описание параметров в НастроитьИнтерактивнуюВыгрузку.
//
Процедура НастроитьИнтерактивнуюВыгрузкуВМоделиСервиса(Получатель, Параметры) Экспорт
	
	Параметры.ВариантБезДополнения.Использование     = Истина;
	Параметры.ВариантВсеДокументы.Использование      = Истина;
	Параметры.ВариантПроизвольныйОтбор.Использование = Истина;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Групповое изменение объектов.

// Возвращает реквизиты объекта, которые не рекомендуется редактировать
// с помощью обработки группового изменения реквизитов.
//
// Возвращаемое значение:
//  Массив - список имен реквизитов объекта.
Функция РеквизитыНеРедактируемыеВГрупповойОбработке() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить("РегистрироватьИзменения");
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры и функции.
// Используются в демонстрационных целях.

// Возвращает список организаций по таблице отбора (см "ПредставлениеОтбораИнтерактивнойВыгрузки").
// Также используется из демонстрационной формы "НастройкаВыгрузки" этого плана обмена.
//
// Параметры:
//	ТаблицаОтбора - ТаблицаЗначений   - содержит строки с описанием подробных отборов по сценарию узла. Содержит колонки:
//		*ПолноеИмяМетаданных - Строка.
//		*ВыборПериода        - Булево.
//		*Период              - СтандартныйПериод.
//		*Отбор               - ОтборКомпоновкиДанных.
//
// Возвращаемое значение:
//	СписокЗначений - значение - ссылка на организацию, представление - наименование.
//
Функция ОрганизацииОтбораИнтерактивнойВыгрузки(Знач ТаблицаОтбора) Экспорт
	
	Результат = Новый СписокЗначений;
	
	Если ТаблицаОтбора.Количество()=0 Или ТаблицаОтбора[0].Отбор.Элементы.Количество()=0 Тогда
		// Нет данных отбора
		Возврат Результат;
	КонецЕсли;
		
	// Мы знаем состав отбора, так как помещали туда сами - или из "НастроитьИнтерактивнуюВыгрузку"
	// или как результат редактирования в форме.
	
	СтрокаДанных = ТаблицаОтбора[0].Отбор.Элементы[0];
	Отобранные   = СтрокаДанных.ПравоеЗначение;
	ТипКоллекции = ТипЗнч(Отобранные);
	
	Если ТипКоллекции=Тип("СписокЗначений") Тогда
		Для Каждого Элемент Из Отобранные Цикл
			ДобавитьСписокОрганизаций(Результат, Элемент.Значение);
		КонецЦикла;
		
	ИначеЕсли ТипКоллекции=Тип("Массив") Тогда
		ДобавитьСписокОрганизаций(Результат, Отобранные);
		 
	ИначеЕсли ТипКоллекции=Тип("СправочникСсылка.Организации") Тогда
		Если Результат.НайтиПоЗначению(Отобранные)=Неопределено Тогда
			Результат.Добавить(Отобранные, Отобранные.Наименование);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Добавляет в список организаций коллекцию.
//
// Параметры:
//	Список      - СписокЗначений - дополняемый список.
//	Организации - коллекция организаций.
// 
Процедура ДобавитьСписокОрганизаций(Список, Знач Организации)
	Для Каждого Организация Из Организации Цикл
		
		Если ТипЗнч(Организация)=Тип("Массив") Тогда
			ДобавитьСписокОрганизаций(Список, Организация);
			Продолжить;
		КонецЕсли;
		
		Если Список.НайтиПоЗначению(Организация)=Неопределено Тогда
			Список.Добавить(Организация, Организация.Наименование);
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры

Процедура ПоменятьЗначения(Данные, Знач Свойство1, Знач Свойство2)
	
	Значение = Данные[Свойство1];
	
	Данные[Свойство1] = Данные[Свойство2];
	Данные[Свойство2] = Значение;
	
КонецПроцедуры

// Расчет параметров выгрузки по умолчанию.
//
// Параметры:
//     Получатель - ПланОбменаСсылка - Узел, для которого производится настройка.
//
// Возвращаемое значение - Структура - содержит поля:
//     ПредставлениеОтбора - Строка - текстовое описание отбора по умолчанию.
//     Период              - СтандартныйПериод     - значение периода общего отбора по умолчанию.
//     Отбор               - ОтборКомпоновкиДанных - отбор.
//
Функция ПараметрыВыгрузкиПоУмолчанию(Получатель)
	
	Результат = Новый Структура;
	
	// Период по умолчанию
	Результат.Вставить("Период", Новый СтандартныйПериод);
	Результат.Период.Вариант = ВариантСтандартногоПериода.ПрошлыйМесяц;
	
	// Отбор по умолчанию и его представление.
	КомпоновщикОтбора = Новый КомпоновщикНастроекКомпоновкиДанных;
	Результат.Вставить("Отбор", КомпоновщикОтбора.Настройки.Отбор);
	
	ОтборПоОрганизации = Результат.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборПоОрганизации.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Ссылка.Организация");
	ОтборПоОрганизации.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборПоОрганизации.Использование  = Истина;
	ОтборПоОрганизации.ПравоеЗначение = Новый Массив;
	
	// Элементы, предлагаемые первый раз по умолчанию, считываем из настроек узла.
	Если Получатель.ИспользоватьОтборПоОрганизациям Тогда
		// Организации из табличной части.
		ЗапросИсточника = Новый Запрос("
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ОрганизацииПланаОбмена.Организация              КАК Организация,
			|	ОрганизацииПланаОбмена.Организация.Наименование КАК Наименование
			|ИЗ
			|	ПланОбмена._ДемоОбменСБиблиотекойСтандартныхПодсистем.Организации КАК ОрганизацииПланаОбмена
			|ГДЕ
			|	ОрганизацииПланаОбмена.Ссылка = &Получатель
			|");
		ЗапросИсточника.УстановитьПараметр("Получатель", Получатель);
	Иначе
		// Все доступные организации
		ЗапросИсточника = Новый Запрос("
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Организации.Ссылка       КАК Организация,
			|	Организации.Наименование КАК Наименование
			|ИЗ
			|	Справочник.Организации КАК Организации
			|ГДЕ
			|	НЕ Организации.ПометкаУдаления
			|");
	КонецЕсли;
		
	ОтборПоОрганизацииСтрокой = "";
	Выборка = ЗапросИсточника.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОтборПоОрганизации.ПравоеЗначение.Добавить(Выборка.Организация);
		ОтборПоОрганизацииСтрокой = ОтборПоОрганизацииСтрокой + ", " + Выборка.Наименование;
	КонецЦикла;
	ОтборПоОрганизацииСтрокой = СокрЛП(Сред(ОтборПоОрганизацииСтрокой, 2));
	
	// Общее представление, период не включаем, так как в этом сценарии поле периода будет редактироваться отдельно.
	Результат.Вставить("ПредставлениеОтбора", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Будут отправлены поступления товаров по организациям:
		         |%1'"),
		ОтборПоОрганизацииСтрокой));
	
	Возврат Результат;
КонецФункции

Процедура ОпределитьРежимыВыгрузкиДокументов(Знач ВариантСинхронизацииДокументов, Знач Данные) Экспорт
	
	Если ВариантСинхронизацииДокументов = "ОтправлятьИПолучатьАвтоматически" Тогда
		
		Данные.РежимВыгрузкиДокументов               = Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПоУсловию;
		Данные.РежимВыгрузкиДокументовКорреспондента = Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПоУсловию;
		
	ИначеЕсли ВариантСинхронизацииДокументов = "ОтправлятьАвтоматически" Тогда
		
		Данные.РежимВыгрузкиДокументов               = Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПоУсловию;
		Данные.РежимВыгрузкиДокументовКорреспондента = Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьВручную;
		
	ИначеЕсли ВариантСинхронизацииДокументов = "ПолучатьАвтоматически" Тогда
		
		Данные.РежимВыгрузкиДокументов               = Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьВручную;
		Данные.РежимВыгрузкиДокументовКорреспондента = Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПоУсловию;
		
	ИначеЕсли ВариантСинхронизацииДокументов = "ОтправлятьИПолучатьВручную" Тогда
		
		Данные.РежимВыгрузкиДокументов               = Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьВручную;
		Данные.РежимВыгрузкиДокументовКорреспондента = Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьВручную;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОпределитьРежимыВыгрузкиСправочников(Знач ВариантСинхронизацииСправочников, Знач Данные) Экспорт
	
	Если ВариантСинхронизацииСправочников = "ОтправлятьИПолучатьАвтоматически" Тогда
		
		Данные.РежимВыгрузкиСправочников               = Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПоУсловию;
		Данные.РежимВыгрузкиСправочниковКорреспондента = Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПоУсловию;
		
	ИначеЕсли ВариантСинхронизацииСправочников = "ОтправлятьИПолучатьПриНеобходимости" Тогда
		
		Данные.РежимВыгрузкиСправочников               = Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПриНеобходимости;
		Данные.РежимВыгрузкиСправочниковКорреспондента = Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПриНеобходимости;
		
	ИначеЕсли ВариантСинхронизацииСправочников = "ОтправлятьИПолучатьВручную" Тогда
		
		Данные.РежимВыгрузкиСправочников               = Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьВручную;
		Данные.РежимВыгрузкиСправочниковКорреспондента = Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьВручную;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОпределитьВариантСинхронизацииДокументов(ВариантСинхронизацииДокументов, Знач Данные) Экспорт
	
	Если Данные.РежимВыгрузкиДокументов                = Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПоУсловию
		И Данные.РежимВыгрузкиДокументовКорреспондента = Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПоУсловию Тогда
		
		ВариантСинхронизацииДокументов = "ОтправлятьИПолучатьАвтоматически"
		
	ИначеЕсли Данные.РежимВыгрузкиДокументов           = Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПоУсловию
		И Данные.РежимВыгрузкиДокументовКорреспондента = Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьВручную Тогда
		
		ВариантСинхронизацииДокументов = "ОтправлятьАвтоматически"
		
	ИначеЕсли Данные.РежимВыгрузкиДокументов           = Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьВручную
		И Данные.РежимВыгрузкиДокументовКорреспондента = Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПоУсловию Тогда
		
		ВариантСинхронизацииДокументов = "ПолучатьАвтоматически"
		
	ИначеЕсли Данные.РежимВыгрузкиДокументов           = Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьВручную
		И Данные.РежимВыгрузкиДокументовКорреспондента = Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьВручную Тогда
		
		ВариантСинхронизацииДокументов = "ОтправлятьИПолучатьВручную"
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОпределитьВариантСинхронизацииСправочников(ВариантСинхронизацииСправочников, Знач Данные) Экспорт
	
	Если Данные.РежимВыгрузкиСправочников                = Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПоУсловию
		И Данные.РежимВыгрузкиСправочниковКорреспондента = Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПоУсловию Тогда
		
		ВариантСинхронизацииСправочников = "ОтправлятьИПолучатьАвтоматически"
		
	ИначеЕсли Данные.РежимВыгрузкиСправочников           = Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПриНеобходимости
		И Данные.РежимВыгрузкиСправочниковКорреспондента = Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПриНеобходимости Тогда
		
		ВариантСинхронизацииСправочников = "ОтправлятьИПолучатьПриНеобходимости"
		
	ИначеЕсли Данные.РежимВыгрузкиСправочников           = Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьВручную
		И Данные.РежимВыгрузкиСправочниковКорреспондента = Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьВручную Тогда
		
		ВариантСинхронизацииСправочников = "ОтправлятьИПолучатьВручную"
		
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьМассивНастроек()
	
	МассивДопустимыхНастроек = Новый Массив;
	
	МассивДопустимыхНастроек.Добавить("ТолькоОтправка");
	МассивДопустимыхНастроек.Добавить("ТолькоПолучение");
	МассивДопустимыхНастроек.Добавить("Двухсторонний");
	
	Возврат МассивДопустимыхНастроек;
	
КонецФункции

#КонецОбласти

#КонецЕсли
