#Область ОписаниеПеременных

&НаКлиенте
Перем КонтекстВыбора;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);
	АвторСтрокой = Строка(Объект.Автор);
	УстановитьПривилегированныйРежим(Ложь);
	
	// Для нового объекта выполняем код инициализации формы в ПриСозданииНаСервере.
	// Для существующего - в ПриЧтенииНаСервере.
	Если Объект.Ссылка.Пустая() Тогда
		ИнициализацияФормы();
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ИнициализацияФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ВРег(ИсточникВыбора.ИмяФормы) = ВРег("ОбщаяФорма.ВыборРолиИсполнителя") Тогда
		
		Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
			Если КонтекстВыбора = "РольНажатие" Тогда
				УстановитьРоль(ВыбранноеЗначение);
			ИначеЕсли КонтекстВыбора = "РольПроверяющегоНажатие" Тогда
				УстановитьРольПроверяющего(ВыбранноеЗначение);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипИсполнителяПриИзменении(Элемент)
	УстановитьРоль(Неопределено);
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Проверяем заполнение во всех случаях при записи, а не только при старте.
	Если НачальныйПризнакСтарта И ТекущийОбъект.Стартован 
		Или (НЕ НачальныйПризнакСтарта И НЕ ТекущийОбъект.Стартован) Тогда
		
		Если Не ТекущийОбъект.ПроверитьЗаполнение() Тогда
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ГлавнаяЗадачаНажатие(Элемент, СтандартнаяОбработка)
	
	ПоказатьЗначение(,Объект.ГлавнаяЗадача);
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура РольНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	КонтекстВыбора = "РольНажатие";
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РольИсполнителя", Объект.РольИсполнителя);
	ПараметрыФормы.Вставить("ОсновнойОбъектАдресации", Объект.ОсновнойОбъектАдресации);
	ПараметрыФормы.Вставить("ДополнительныйОбъектАдресации", Объект.ДополнительныйОбъектАдресации);
	
	ОткрытьФорму("ОбщаяФорма.ВыборРолиИсполнителя", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметНажатие(Элемент, СтандартнаяОбработка)
	
	ПоказатьЗначение(,Объект.Предмет);
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура РольПроверяющегоНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	КонтекстВыбора = "РольПроверяющегоНажатие";
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РольИсполнителя", Объект.РольПроверяющего);
	ПараметрыФормы.Вставить("ОсновнойОбъектАдресации", Объект.ОсновнойОбъектАдресацииПроверяющий);
	ПараметрыФормы.Вставить("ДополнительныйОбъектАдресации", Объект.ДополнительныйОбъектАдресацииПроверяющий);
	
	ОткрытьФорму("ОбщаяФорма.ВыборРолиИсполнителя", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ТипЗнч(ТипИсполнителя) = Тип("СправочникСсылка.Пользователи") Тогда
		Объект.Исполнитель = ИсполнительПоНазначению;
		Объект.РольИсполнителя = Неопределено;
	Иначе
		УстановитьИсполнителяПоДаннымФормы(ИсполнительПоНазначению);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверяющийПриИзменении(Элемент)
	
	Если Объект.ПроверитьВыполнение И ЗначениеЗаполнено(ПроверяющийПоНазначению) Тогда
		Если ТипЗнч(ТипПроверяющего) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
			Объект.РольПроверяющего = ПроверяющийПоНазначению;
			Объект.Проверяющий = Неопределено;
		Иначе
			Объект.Проверяющий = ПроверяющийПоНазначению;
			Объект.РольПроверяющего = Неопределено;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыполнениеПриИзменении(Элемент)
	УстановитьСостояниеЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ТипЗнч(ТипИсполнителя) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
		Если НЕ ПользователиКлиентСервер.ЭтоСеансВнешнегоПользователя() Тогда 
			СтандартнаяОбработка = Ложь;
			КонтекстВыбора = "РольНажатие";
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("РольИсполнителя", Объект.РольИсполнителя);
			ПараметрыФормы.Вставить("ОсновнойОбъектАдресации", Объект.ОсновнойОбъектАдресации);
			ПараметрыФормы.Вставить("ДополнительныйОбъектАдресации", Объект.ДополнительныйОбъектАдресации);
			
			ОткрытьФорму("ОбщаяФорма.ВыборРолиИсполнителя", ПараметрыФормы, ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПроверяющийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ТипЗнч(ТипПроверяющего) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
		Если НЕ ПользователиКлиентСервер.ЭтоСеансВнешнегоПользователя() Тогда 
			СтандартнаяОбработка = Ложь;
			КонтекстВыбора = "РольПроверяющегоНажатие";
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("РольИсполнителя", Объект.РольПроверяющего);
			ПараметрыФормы.Вставить("ОсновнойОбъектАдресации", Объект.ОсновнойОбъектАдресацииПроверяющий);
			ПараметрыФормы.Вставить("ДополнительныйОбъектАдресации", Объект.ДополнительныйОбъектАдресацииПроверяющий);
			
			ОткрытьФорму("ОбщаяФорма.ВыборРолиИсполнителя", ПараметрыФормы, ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры


#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	ОчиститьСообщения();
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;	
	КонецЕсли;
	
	Записать();
	Закрыть();
	
КонецПроцедуры

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтотОбъект, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Исполнитель.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТипАдресации");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Исполнитель");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Роль.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТипАдресации");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 1;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РольИсполнителя");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Проверяющий.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПроверяющийТипАдресации");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Проверяющий");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РольПроверяющего.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПроверяющийТипАдресации");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 1;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РольПроверяющего");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);

КонецПроцедуры

&НаСервере
Процедура ИнициализацияФормы()
	
	ИспользоватьДатуИВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	Элементы.Дата.Формат = ?(ИспользоватьДатуИВремяВСрокахЗадач, "ДЛФ=DT", "ДЛФ=D");
	
	Элементы.ГруппаСостояние.Видимость = Объект.Завершен Или Объект.Стартован;
	Если Объект.Завершен Тогда
		ДатаЗавершенияСтрокой = ?(ИспользоватьДатуИВремяВСрокахЗадач, 
			Формат(Объект.ДатаЗавершения, "ДЛФ=DT"), Формат(Объект.ДатаЗавершения, "ДЛФ=D"));
		Элементы.ДекорацияТекст.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Задание выполнено %1.'"),	ДатаЗавершенияСтрокой);
			
		Для каждого Элемент Из Элементы Цикл
			Если ТипЗнч(Элемент) <> Тип("ПолеФормы") И ТипЗнч(Элемент) <> Тип("ГруппаФормы") Тогда
				Продолжить;
			КонецЕсли;
			Элемент.ТолькоПросмотр = Истина;
		КонецЦикла;
	Иначе
		ТекстСостояния = ?(ПолучитьФункциональнуюОпцию("ИзменятьЗаданияЗаднимЧислом"), 
			НСтр("ru = 'Изменения формулировки, важности, автора, а также перенос сроков исполнения и проверки задания 
				|вступят в силу немедленно для ранее выданной задачи.'"), 
			НСтр("ru = 'Изменения формулировки, важности, автора, а также перенос сроков исполнения и проверки задания 
				|не будут отражены в ранее выданной задаче.'"));
		Элементы.ДекорацияТекст.Заголовок = ТекстСостояния;
	
	КонецЕсли;
	
	Элементы.ФормаСтартИЗакрыть.Видимость = Не Объект.Стартован; 
	Элементы.ФормаСтартИЗакрыть.КнопкаПоУмолчанию = Не Объект.Стартован;
	Элементы.ФормаСтарт.Видимость = Не Объект.Стартован; 
	Элементы.ФормаЗаписатьИЗакрыть.Видимость = Объект.Стартован; 
	Элементы.ФормаЗаписатьИЗакрыть.КнопкаПоУмолчанию = Объект.Стартован;
	
	ПроверяющийТипАдресации = ?(Объект.РольПроверяющего.Пустая(), 0, 1);
	Элементы.Предмет.Гиперссылка = Объект.Предмет <> Неопределено И НЕ Объект.Предмет.Пустая();
	ПредметСтрокой = ОбщегоНазначения.ПредметСтрокой(Объект.Предмет);
	НачальныйПризнакСтарта = Объект.Стартован;
	УстановитьСостояниеЭлементов();
	
	Если Объект.ГлавнаяЗадача = Неопределено Или Объект.ГлавнаяЗадача.Пустая() Тогда
		Элементы.ГлавнаяЗадача.Гиперссылка = Ложь;
		ГлавнаяЗадачаСтрокой = НСтр("ru = 'не задана'");
	Иначе	
		ГлавнаяЗадачаСтрокой = Строка(Объект.ГлавнаяЗадача);
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьПодчиненныеБизнесПроцессы") Тогда
		Элементы.ГлавнаяЗадача.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ТипИсполнителя.СписокВыбора.Очистить();
	Элементы.ТипПроверяющего.СписокВыбора.Очистить();
	Элементы.ТипИсполнителя.СписокВыбора.Добавить(Справочники.РолиИсполнителей.ПустаяСсылка(),  НСтр("ru = 'Роль исполнителя'"));
	Элементы.ТипПроверяющего.СписокВыбора.Добавить(Справочники.РолиИсполнителей.ПустаяСсылка(), НСтр("ru = 'Роль исполнителя'"));

	Если ПользователиКлиентСервер.ЭтоСеансВнешнегоПользователя() Тогда
		ОпределитьОтображениеФормыДляВнешнегоПользователя();
	Иначе
		ОпределитьОтображениеФормыДляПользователя();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьОтображениеФормыДляПользователя()
	
	Элементы.ТипИсполнителя.СписокВыбора.Добавить(Справочники.Пользователи.ПустаяСсылка(), НСтр("ru = 'Пользователь'"));
	Элементы.ТипПроверяющего.СписокВыбора.Добавить(Справочники.Пользователи.ПустаяСсылка(), НСтр("ru = 'Пользователь'"));
	
	Если ПравоДоступа("Чтение", Метаданные.Справочники.ВнешниеПользователи) Тогда
		Для каждого ТипВнешнегоИсполнителя Из Метаданные.ОпределяемыеТипы.ВнешнийПользователь.Тип.Типы() Цикл
			МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипВнешнегоИсполнителя);
			Представление = МетаданныеОбъекта.РасширенноеПредставлениеОбъекта;
			Значение = Справочники[МетаданныеОбъекта.Имя].ПустаяСсылка();
			Если ПустаяСтрока(Представление) Тогда
				Представление = МетаданныеОбъекта.ПредставлениеОбъекта;
				Если ПустаяСтрока(Представление) Тогда
					Представление = МетаданныеОбъекта.Синоним;
					Если ПустаяСтрока(Представление) Тогда
						Представление = МетаданныеОбъекта.Имя;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Элементы.ТипИсполнителя.СписокВыбора.Добавить(Значение, Представление);
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Предмет) Тогда
		МетаданныеОбъекта = Объект.Предмет.Метаданные();
		Если МетаданныеОбъекта.Реквизиты.Найти("Ответственный") <> Неопределено Тогда
			ТипПроверяющего = Элементы.ТипИсполнителя.СписокВыбора.НайтиПоЗначению(Справочники[Объект.Предмет.Ответственный.Метаданные().Имя].ПустаяСсылка()).Значение;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Исполнитель) Тогда
		Если ТипЗнч(Объект.Исполнитель) = Тип("СправочникСсылка.ВнешниеПользователи") Тогда
			ТипИсполнителя = Элементы.ТипИсполнителя.СписокВыбора.НайтиПоЗначению(Справочники[Объект.Исполнитель.ОбъектАвторизации.Метаданные().Имя].ПустаяСсылка()).Значение;
			ИсполнительПоНазначению = Объект.Исполнитель.ОбъектАвторизации;
		ИначеЕсли ТипЗнч(Объект.Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда
			ТипИсполнителя = Элементы.ТипИсполнителя.СписокВыбора.НайтиПоЗначению(Справочники.Пользователи.ПустаяСсылка()).Значение;
			ИсполнительПоНазначению = Объект.Исполнитель;
		КонецЕсли;
	Иначе
		ТипИсполнителя = Элементы.ТипИсполнителя.СписокВыбора.НайтиПоЗначению(Справочники.РолиИсполнителей.ПустаяСсылка()).Значение;
		ИсполнительПоНазначению = Объект.РольИсполнителя;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Проверяющий) Тогда
		ТипПроверяющего = Элементы.ТипПроверяющего.СписокВыбора.НайтиПоЗначению(Справочники.Пользователи.ПустаяСсылка()).Значение;
		ПроверяющийПоНазначению = Объект.Проверяющий;
	Иначе
		ТипПроверяющего = Элементы.ТипПроверяющего.СписокВыбора.НайтиПоЗначению(Справочники.РолиИсполнителей.ПустаяСсылка()).Значение;
		ПроверяющийПоНазначению = Объект.РольПроверяющего;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОпределитьОтображениеФормыДляВнешнегоПользователя()
	
	Если Объект.Ссылка.Пустая()Тогда
		ТипИсполнителя = Справочники.РолиИсполнителей.ПустаяСсылка();
		ОбъектАвторизацииПустаяСсылка = Справочники[ПользователиКлиентСервер.ТекущийВнешнийПользователь().ОбъектАвторизации.Метаданные().Имя].ПустаяСсылка();
		Объект.Исполнитель = Справочники.РолиИсполнителей.ПустаяСсылка();
		
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РолиИсполнителейНазначение.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.РолиИсполнителей.Назначение КАК РолиИсполнителейНазначение
		|ГДЕ
		|	РолиИсполнителейНазначение.ТипПользователей = &ТипПользователей");
		
		Запрос.УстановитьПараметр("ТипПользователей", ОбъектАвторизацииПустаяСсылка);
		ТаблицаРолей = Запрос.Выполнить().Выгрузить();
		Элементы.Исполнитель.СвязьПоТипу = Новый СвязьПоТипу();
		ИсполнительПоНазначению = Справочники.РолиИсполнителей.ПустаяСсылка();
		
		Если ТаблицаРолей.Количество() = 1 Тогда
			ИсполнительПоНазначению = ТаблицаРолей[0].Ссылка;
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(Объект.РольИсполнителя) Тогда
			ТипИсполнителя = Объект.РольИсполнителя.Ссылка;
			ИсполнительПоНазначению = Объект.РольИсполнителя;
		Иначе
			ИсполнительСтрокой = Строка(Объект.Исполнитель);
			Элементы.ИсполнительСтрокой.Видимость = Истина;
			Элементы.Исполнитель.Видимость = Ложь;
			Элементы.Исполнитель.ТолькоПросмотр = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.Автор.Видимость = Ложь;
	Элементы.АвторСтрокой.Видимость = Истина;
	Элементы.ГруппаПроверитьИсполнение.Видимость = Ложь;
	Элементы.ТипИсполнителя.Видимость = Ложь;

КонецПроцедуры

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки


&НаСервере
Процедура УстановитьСостояниеЭлементов()
	РольСтрокой = РольСтрокой(Объект.ОсновнойОбъектАдресации, Объект.ДополнительныйОбъектАдресации);
	Элементы.Роль.Видимость = ?(ЗначениеЗаполнено(РольСтрокой), Истина, Ложь);

	РольПроверяющегоСтрокой = РольСтрокой(Объект.ОсновнойОбъектАдресацииПроверяющий,
		Объект.ДополнительныйОбъектАдресацииПроверяющий);
	Элементы.РольПроверяющего.Видимость = ?(ЗначениеЗаполнено(РольПроверяющегоСтрокой), Истина, Ложь);
	
	Элементы.ГруппаПроверка.Доступность = Объект.ПроверитьВыполнение;
	
КонецПроцедуры

&НаСервере
Функция РольСтрокой(ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации)
	Результат = "";
	Если ОсновнойОбъектАдресации <> Неопределено Тогда
		Результат = НСтр("ru = 'Объект адресации'") + ": " + Строка(ОсновнойОбъектАдресации);
		Если ДополнительныйОбъектАдресации <> Неопределено Тогда
			Результат = Результат + " ," + Строка(ДополнительныйОбъектАдресации);
		КонецЕсли;
	КонецЕсли;
	Возврат Результат;
КонецФункции

&НаСервере
Функция УстановитьИсполнителяПоДаннымФормы(ИсполнительПоНазначению)
	
	Если ЗначениеЗаполнено(ИсполнительПоНазначению) Тогда
		Если ТипЗнч(ТипИсполнителя) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
			Если ПользователиКлиентСервер.ЭтоСеансВнешнегоПользователя() Тогда
				Объект.Исполнитель = Справочники.Пользователи.ПустаяСсылка();
				Объект.РольИсполнителя = ИсполнительПоНазначению;
			КонецЕсли;
			УстановитьСостояниеЭлементов();
		Иначе
			Объект.Исполнитель = Справочники.ВнешниеПользователи.НайтиПоРеквизиту("ОбъектАвторизации", ИсполнительПоНазначению);
			Объект.РольИсполнителя = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура УстановитьРольПроверяющего(РольСтруктура)
	Объект.Проверяющий = Справочники.Пользователи.ПустаяСсылка();
	Объект.РольПроверяющего = РольСтруктура.РольИсполнителя;
	ПроверяющийПоНазначению = РольСтруктура.РольИсполнителя;
	Объект.ОсновнойОбъектАдресацииПроверяющий = РольСтруктура.ОсновнойОбъектАдресации;
	Объект.ДополнительныйОбъектАдресацииПроверяющий = РольСтруктура.ДополнительныйОбъектАдресации;
	УстановитьСостояниеЭлементов();
КонецПроцедуры

&НаСервере
Процедура УстановитьРоль(РольСтруктура)
	Объект.Исполнитель = Справочники.Пользователи.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(РольСтруктура) Тогда
		Объект.РольИсполнителя = РольСтруктура.РольИсполнителя;
		ИсполнительПоНазначению = РольСтруктура.РольИсполнителя;
		Объект.ОсновнойОбъектАдресации = РольСтруктура.ОсновнойОбъектАдресации;
		Объект.ДополнительныйОбъектАдресации = РольСтруктура.ДополнительныйОбъектАдресации;
	Иначе
		Объект.РольИсполнителя = Неопределено;
		ИсполнительПоНазначению = Неопределено;
		Объект.ОсновнойОбъектАдресации = Неопределено;
		Объект.ДополнительныйОбъектАдресации = Неопределено;
	КонецЕсли;
	УстановитьСостояниеЭлементов();
	УстановитьИсполнителяПоДаннымФормы(ИсполнительПоНазначению);
КонецПроцедуры

#КонецОбласти
