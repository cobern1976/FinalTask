////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы демонстрационной конфигурации (БиблиотекаСтандартныхПодсистемДемо).
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Сведения о библиотеке (или конфигурации).

// См. описание в общем модуле ОбновлениеИнформационнойБазыБСП.
Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	Описание.Имя = "БиблиотекаСтандартныхПодсистемДемо";
	Описание.Версия = "2.3.2.81";
	
	// Требуется библиотека стандартных подсистем.
	Описание.ТребуемыеПодсистемы.Добавить("СтандартныеПодсистемы");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики обновления информационной базы.

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре.
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.РежимВыполнения     = "Монопольно";
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	// Обработчики, выполняемые при каждом обновлении ИБ.
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.УправлениеОбработчиками = Истина;
	Обработчик.МонопольныйРежим = Истина; // Для демонстрации условного выполнения в монопольном режиме.
	Обработчик.Процедура = "_ДемоОбновлениеИнформационнойБазыБСП.ВыполнятьВсегдаПриСменеВерсии";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.Процедура = "_ДемоОбновлениеИнформационнойБазыБСП.ОбработчикСОшибкой";
	Обработчик.РежимВыполнения = "Оперативно";
	
	// Обработчики, выполняемые при заполнении пустой ИБ.
	//
	
	Обработчик = Обработчики.Добавить();
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "_ДемоОбновлениеИнформационнойБазыБСП.ПервыйЗапуск";
	
	// Обработчики, выполняемые при заполнении пустой ИБ и при переходе на новую версию.
	//
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.1.6";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "_ДемоОбновлениеИнформационнойБазыБСП.ВыполнитьПервоначальноеЗаполнениеВалют";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.1.34";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "_ДемоОбновлениеИнформационнойБазыБСП.ОбновитьПредопределенныеВидыКонтактнойИнформации";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.Приоритет = 99;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.2.10";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.Процедура = "_ДемоОбновлениеИнформационнойБазыБСП.ОбновитьПредопределенныеКлючевыеОперации";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.1.8";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "_ДемоОбновлениеИнформационнойБазыБСП.ИнициализироватьРолиИсполнителей";
	
	Если Не ОбщегоНазначенияПовтИсп.РазделениеВключено() И Не ОбменДаннымиПовтИсп.ЭтоАвтономноеРабочееМесто() Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "*";
		Обработчик.Процедура = "_ДемоОбновлениеИнформационнойБазыБСП.ЗагрузитьДополнительныеОтчетыИОбработкиИзОбщихМакетов";
		Обработчик.РежимВыполнения = "Оперативно";
	КонецЕсли;
	
	// Обработчики, выполняемые при переходе на новую версию.
	//
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.1.5";
	Обработчик.Процедура = "_ДемоОбновлениеИнформационнойБазыБСП.ОбновитьДополнительныеОбработки_2_0_1_5";
	
	// Обработчики оперативного обновления.
	//
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = Метаданные.Версия; // для целей тестирования
	Обработчик.Процедура = "_ДемоОбновлениеИнформационнойБазыБСП.ЗаполнитьСтатусыЗаказовПокупателейЗаПоследнийМесяц";
	Обработчик.РежимВыполнения = "Оперативно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.1.28";
	Обработчик.Процедура = "_ДемоОбновлениеИнформационнойБазыБСП.ЗаполнитьКонстантыДляОрганизаций";
	Обработчик.РежимВыполнения = "Оперативно";
	
	// Обработчики отложенного обновления.
	//
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = Метаданные.Версия; // для целей тестирования
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("39e98a12-69b3-40a0-95e9-03469462f506");
	Обработчик.Процедура = "_ДемоОбновлениеИнформационнойБазыБСП.ОтложенныйОбработчикСОшибкой";
	Обработчик.Комментарий = НСтр("ru = 'Демонстрационный обработчик отложенного обновления данных.
		|Для имитации нештатной ситуации нажать на кнопку ""Имитировать ошибку при отложенном обновлении"" в инструменте разработчика и выполнить перезапуск программы.'");
	Обработчик.РежимВыполнения = "Отложенно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = Метаданные.Версия; // для целей тестирования
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("b3be66c5-708d-42c8-a019-818036d09d06");
	Обработчик.Процедура = "_ДемоОбновлениеИнформационнойБазыБСП.ЗаполнитьСтатусыЗаказовПокупателей";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение значения нового реквизита ""Статус заказа"" у документов ""Демо: Заказ покупателя"" прошлых периодов.
		|До завершения обработки ""Статус заказа"" данных документов будет отображаться некорректно.'");
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.ПроцедураПроверки = "_ДемоОбновлениеИнформационнойБазыБСП.ЗаказПокупателяОбработан";
	Обработчик.БлокируемыеОбъекты = "Документ._ДемоЗаказПокупателя, Отчет._ДемоСтатусыЗаказовПокупателей";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.1.23";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("4791ffe5-a25f-477f-8724-e75f61b38bb3");
	Обработчик.Процедура = "_ДемоОбновлениеИнформационнойБазыБСП.ОбновитьПериодРегистрацииДокументовРасчета";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение значения нового реквизита ""Период регистрации"" у документов ""Демо: Начисление зарплаты"".
		|До завершения обработки ""Период регистрации"" данных документов будет отображаться некорректно.'");
	Обработчик.РежимВыполнения = "Отложенно";
	
	// Не обновлять в исправительных.
	Версии = СтрРазделить(Метаданные.Версия, ".");
	Версии.Установить(Версии.ВГраница(), "1");
	ВариантыОтчетов.ДобавитьОбработчикиПолногоОбновления(Обработчики, СтрСоединить(Версии, "."));
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.2.28";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("41b5e98c-f692-489b-b812-cb8fdb8985fc");
	Обработчик.Процедура = "_ДемоОбновлениеИнформационнойБазыБСП.ВосстановитьДвиженияДокументов";
	Обработчик.Комментарий = НСтр("ru = 'Перепроведение документов без движений по бухгалтерским и расчетным регистрам.
		|До завершения обработки отчет ""Демо: Оборотно-сальдовая ведомость"" может выводить некорректные данные.'");
	Обработчик.РежимВыполнения = "Отложенно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.3.2";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("006d0801-c822-4904-8fbc-30e02de23673");
	Обработчик.Процедура = "_ДемоОбновлениеИнформационнойБазыБСП.ЗаполнитьПоследовательностьДвиженияТоваров";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение данных последовательности документов движения товаров.
		|До завершения обработки отчет ""Демо: Оборотно-сальдовая ведомость"" может выводить некорректные данные.'");
	Обработчик.РежимВыполнения = "Отложенно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.3.26";
	Обработчик.Процедура = "_ДемоОбновлениеИнформационнойБазыБСП.ЗаполнитьРеквизитГруппаДоступаУСправочниковГруппЗначенийДоступа";
	Обработчик.РежимВыполнения = "Оперативно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.4.33";
	Обработчик.Процедура = "_ДемоОбновлениеИнформационнойБазыБСП.ОбновитьПредопределенныеВидыКонтактнойИнформацииФизическихЛиц";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.Приоритет = 99;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.5.8";
	Обработчик.Процедура = "_ДемоОбновлениеИнформационнойБазыБСП.ОбновитьПредопределенныеВидыКонтактнойИнформацииКонтрагентов";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.Приоритет = 99;
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.1.7";
	Обработчик.Процедура = "_ДемоОбновлениеИнформационнойБазыБСП.ОбновитьПредопределенныйВидКонтактнойИнформации";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.Приоритет = 99;
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Версия    = "2.3.1.10";
	Обработчик.Процедура = "_ДемоОбновлениеИнформационнойБазыБСП.СброситьНастройкиОтчетов";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "2.3.1.19";
	Обработчик.Процедура = "_ДемоОбновлениеИнформационнойБазыБСП.ОбновитьИспользованиеКонтактнойИнформацииКонтактныхЛицПартнеров";
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.ОбщиеДанные      = Ложь;
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "2.3.1.21";
	Обработчик.Процедура = "_ДемоОбновлениеИнформационнойБазыБСП.ОбновитьИспользованиеНаборовСвойствВнешнихПользователей";
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "2.3.1.33";
	Обработчик.Процедура = "_ДемоОбновлениеИнформационнойБазыБСП.ОбновитьПорядокВидовКонтактнойИнформацииКонтрагентов";
	Обработчик.РежимВыполнения = "Оперативно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "2.3.1.44";
	Обработчик.Процедура = "_ДемоОбновлениеИнформационнойБазыБСП.УстановитьНазначенияРолейИсполнителей";
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.1.59";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("423736c1-7be4-439d-bb61-3a420cbc09c0");
	Обработчик.Процедура = "_ДемоОбновлениеИнформационнойБазыБСП.ЗаполнитьКонтактнуюИнформациюДляСписков";
	Обработчик.Комментарий = НСтр("ru = 'Добавление контактной информации в списки и отчеты.
		|Если в списках и отчетах добавить новые колонки с контактной информацией, то до завершения этой процедуры обработки они будут незаполненными.'");
	Обработчик.РежимВыполнения = "Отложенно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "2.3.1.64";
	Обработчик.Процедура = "_ДемоОбновлениеИнформационнойБазыБСП.ВключитьОграничениеПоПартнерамПриИспользованииВнешнихПользователей";
	Обработчик.РежимВыполнения = "Оперативно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "2.3.2.4";
	Обработчик.Процедура = "_ДемоОбновлениеИнформационнойБазыБСП.НастроитьИсториюКонтактнойИнформацииИМногострочноеПоле";
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.2.21";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("AFB1DC88-66C3-4fd6-9C6F-766669FEBAC4");
	Обработчик.Процедура = "_ДемоОбновлениеИнформационнойБазыБСП.ОбновитьНаборыЗначенийДоступаЗаданийСРолевойАдресацией";
	Обработчик.Комментарий = НСтр("ru = 'Обновление прав доступа для бизнес-процесса ""Демо: Задание"". 
		|До завершения обработки будут действовать прежние права доступа к заданиям.'");
	Обработчик.РежимВыполнения = "Отложенно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.2.25";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("260e546d-4032-44be-9889-c5eb67fb4cc0");
	Обработчик.Процедура = "_ДемоОбновлениеИнформационнойБазыБСП.ОбновитьКонтактнуюИнформациюЗаказовПокупателя";
	Обработчик.Комментарий = НСтр("ru = 'Для документов ""Демо: Заказ покупателя"" заполняет реквизиты
		|АдресДоставкиСтрокой и ЭлектроннаяПочтаСтрокой.'");
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.ПроцедураПроверки = "_ДемоОбновлениеИнформационнойБазыБСП.ЗаполненыДанныеДляСпискаЗаказПокупателя";
	Обработчик.БлокируемыеОбъекты = "Документ._ДемоЗаказПокупателя, Отчет._ДемоСтатусыЗаказовПокупателей";
	
КонецПроцедуры

// Вызывается перед процедурами-обработчиками обновления данных ИБ.
//
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
КонецПроцедуры

// Вызывается после завершения обновления данных ИБ.
// 
// Параметры:
//   ПредыдущаяВерсия       - Строка - версия до обновления. "0.0.0.0" для "пустой" ИБ.
//   ТекущаяВерсия          - Строка - версия после обновления.
//   ВыполненныеОбработчики - ДеревоЗначений - список выполненных процедур-обработчиков обновления,
//                                             сгруппированных по номеру версии.
//   ВыводитьОписаниеОбновлений - Булево - если установить Истина, то будет выведена форма
//                                с описанием обновлений. По умолчанию, Истина.
//                                Возвращаемое значение.
//   МонопольныйРежим           - Булево - Истина, если обновление выполнялось в монопольном режиме.
//
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
		Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
	
КонецПроцедуры

// Вызывается при подготовке табличного документа с описанием изменений в программе.
//
// Параметры:
//   Макет - ТабличныйДокумент - описание обновления всех библиотек и конфигурации.
//           Макет можно дополнить или заменить.
//           См. также общий макет ОписаниеИзмененийСистемы.
//
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
	
КонецПроцедуры

// Позволяет переопределить режим обновления данных информационной базы.
// Для использования в редких (нештатных) случаях перехода, не предусмотренных в
// стандартной процедуре определения режима обновления.
//
// Параметры:
//   РежимОбновленияДанных - Строка - в обработчике можно присвоить одно из значений:
//              "НачальноеЗаполнение"     - если это первый запуск пустой базы (области данных);
//              "ОбновлениеВерсии"        - если выполняется первый запуск после обновление конфигурации базы данных;
//              "ПереходСДругойПрограммы" - если выполняется первый запуск после обновление конфигурации базы данных, 
//                                          в которой изменилось имя основной конфигурации.
//
//   СтандартнаяОбработка  - Булево - если присвоить Ложь, то стандартная процедура
//                                    определения режима обновления не выполняется, 
//                                    а используется значение РежимОбновленияДанных.
//
Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Добавляет в список процедуры-обработчики перехода с другой программы (с другим именем конфигурации).
// Например, для перехода между разными, но родственными конфигурациями: базовая -> проф -> корп.
// Вызывается перед началом обновления данных ИБ.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - с колонками:
//    * ПредыдущееИмяКонфигурации - Строка - имя конфигурации, с которой выполняется переход;
//                                           или "*", если нужно выполнять при переходе с любой конфигурации.
//    * Процедура                 - Строка - полное имя процедуры-обработчика перехода с программы
//                                           ПредыдущееИмяКонфигурации.
//                                  Например, "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику"
//                                  Обязательно должна быть экспортной.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.ПредыдущееИмяКонфигурации  = "УправлениеТорговлей";
//  Обработчик.Процедура                  = "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику";
//
Процедура ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ПредыдущееИмяКонфигурации = "БиблиотекаСтандартныхПодсистемДемоБазовая";
	Обработчик.Процедура = "_ДемоОбновлениеИнформационнойБазыБСП.ПерейтиСБазовойВерсииНаПРОФ";
	
КонецПроцедуры

// Вызывается после выполнения всех процедур-обработчиков перехода с другой программы (с другим именем конфигурации),
// и до начала выполнения обновления данных ИБ.
//
// Параметры:
//  ПредыдущееИмяКонфигурации    - Строка - имя конфигурации до перехода.
//  ПредыдущаяВерсияКонфигурации - Строка - имя предыдущей конфигурации (до перехода).
//  Параметры                    - Структура - 
//    * ВыполнитьОбновлениеСВерсии   - Булево - по умолчанию Истина. Если установить Ложь, 
//        то будут выполнена только обязательные обработчики обновления (с версией "*").
//    * ВерсияКонфигурации           - Строка - номер версии после перехода. 
//        По умолчанию, равен значению версии конфигурации в свойствах метаданных.
//        Для того чтобы выполнить, например, все обработчики обновления с версии ПредыдущаяВерсияКонфигурации, 
//        следует установить значение параметра в ПредыдущаяВерсияКонфигурации.
//        Для того чтобы выполнить вообще все обработчики обновления, установить значение "0.0.0.1".
//    * ОчиститьСведенияОПредыдущейКонфигурации - Булево - по умолчанию Истина. 
//        Для случаев когда предыдущая конфигурация совпадает по имени с подсистемой текущей конфигурации, следует
//        указать Ложь.
//
Процедура ПриЗавершенииПереходаСДругойПрограммы(Знач ПредыдущееИмяКонфигурации, 
	Знач ПредыдущаяВерсияКонфигурации, Параметры) Экспорт
	
	Если ПредыдущееИмяКонфигурации = "ПредыдущееИмяКонфигурацииБазовая" Тогда
		Параметры.ВерсияКонфигурации = ПредыдущаяВерсияКонфигурации;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Заполнение пустой ИБ

// Демонстрирует процедуру-обработчик обновления и первоначального заполнения
// данных ИБ, которая выполняется однократно при переходе на версию 1.0.0.0.
//
Процедура ПервыйЗапуск() Экспорт
	
	// Код для первоначального заполнения информационной базы.
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обновление ИБ

// Демонстрирует процедуру-обработчик обновления данных ИБ, 
// которая выполняется каждый раз при смене версии конфигурации.
//
Процедура ВыполнятьВсегдаПриСменеВерсии(Параметры = Неопределено) Экспорт
	
	Если Параметры <> Неопределено И НЕ Параметры.МонопольныйРежим Тогда
		Параметры.МонопольныйРежим = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ОбновлениеИБ", "ВыполнятьМонопольноеОбновление", Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Демо-пример установки значений реквизитов предопределенных элементов справочника.
// РолиИсполнителей.
//
Процедура ИнициализироватьРолиИсполнителей() Экспорт
	
	РольОбъект = Справочники.РолиИсполнителей._ДемоРуководительКомпании.ПолучитьОбъект();
	РольОбъект.ИспользуетсяБезОбъектовАдресации = Истина;
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(РольОбъект);
	
	РольОбъект = Справочники.РолиИсполнителей._ДемоГлавныйБухгалтер.ПолучитьОбъект();
	РольОбъект.ИспользуетсяБезОбъектовАдресации = Истина;
	РольОбъект.ИспользуетсяСОбъектамиАдресации = Истина;
	РольОбъект.ТипыОсновногоОбъектаАдресации = ПланыВидовХарактеристик.ОбъектыАдресацииЗадач._ДемоОрганизация;
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(РольОбъект);
	
	РольОбъект = Справочники.РолиИсполнителей._ДемоРуководительПодразделения.ПолучитьОбъект();
	РольОбъект.ИспользуетсяСОбъектамиАдресации = Истина;
	РольОбъект.ТипыОсновногоОбъектаАдресации = ПланыВидовХарактеристик.ОбъектыАдресацииЗадач._ДемоПодразделение;
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(РольОбъект);
	
	РольОбъект = Справочники.РолиИсполнителей._ДемоРуководительПроекта.ПолучитьОбъект();
	РольОбъект.ИспользуетсяСОбъектамиАдресации = Истина;
	РольОбъект.ТипыОсновногоОбъектаАдресации = ПланыВидовХарактеристик.ОбъектыАдресацииЗадач._ДемоПроект;
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(РольОбъект);
	
КонецПроцедуры

// Процедура выполняет заполнение справочника Валюты для новой области данных.
//
Процедура ВыполнитьПервоначальноеЗаполнениеВалют() Экспорт
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		СписокВалют = Новый Массив; 
		СписокВалют.Добавить("840");
		СписокВалют.Добавить("643");
		СписокВалют.Добавить("978");
		
		Ссылки = РаботаСКурсамиВалют.ДобавитьВалютыПоКоду(СписокВалют);
		
	КонецЕсли;

КонецПроцедуры

// Конвертация имен разделов на ссылки справочника ИОМ 
// для подсистемы "Дополнительные отчеты и обработки".
//
Процедура ОбновитьДополнительныеОбработки_2_0_1_5() Экспорт
	СоответствиеИменКомандРазделам = Новый Соответствие;
	
	СоответствиеИменКомандРазделам.Вставить(
		"_ДемоДополнительныеОбработкиРабочийСтол", 
		ДополнительныеОтчетыИОбработкиКлиентСервер.ИдентификаторРабочегоСтола());
	
	СоответствиеИменКомандРазделам.Вставить(
		"_ДемоДополнительныеОбработкиАдминистрирование", 
		Метаданные.Подсистемы.Администрирование);
	
	СоответствиеИменКомандРазделам.Вставить(
		"_ДемоДополнительныеОбработкиИнтегрируемыеПодсистемы", 
		Метаданные.Подсистемы._ДемоИнтегрируемыеПодсистемы);
	
	СоответствиеИменКомандРазделам.Вставить(
		"_ДемоДополнительныеОтчетыРабочийСтол", 
		ДополнительныеОтчетыИОбработкиКлиентСервер.ИдентификаторРабочегоСтола());
	
	СоответствиеИменКомандРазделам.Вставить(
		"_ДемоДополнительныеОтчетыАдминистрирование", 
		Метаданные.Подсистемы.Администрирование);
	
	СоответствиеИменКомандРазделам.Вставить(
		"_ДемоДополнительныеОтчетыИнтегрируемыеПодсистемы", 
		Метаданные.Подсистемы._ДемоИнтегрируемыеПодсистемы);
	
	ДополнительныеОтчетыИОбработки.ЗаменитьИменаРазделовНаИдентификаторы(СоответствиеИменКомандРазделам);
КонецПроцедуры

// Демонстрирует процедуру-обработчик обновления и первоначального заполнения
// данных ИБ, которая выполняет обновление данных подсистемы "Дополнительные отчеты и обработки"
// из-за изменения состава и формата вызова обработок.
//
Процедура ЗагрузитьДополнительныеОтчетыИОбработкиИзОбщихМакетов() Экспорт
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Возврат;
	#КонецЕсли
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеОтчетыИОбработки") Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкиИзМакетов = Новый ТаблицаЗначений();
	ОбработкиИзМакетов.Колонки.Добавить("ИмяМакета",           Новый ОписаниеТипов("Строка"));
	ОбработкиИзМакетов.Колонки.Добавить("АктуальноеИмяФайла",  Новый ОписаниеТипов("Строка"));
	ОбработкиИзМакетов.Колонки.Добавить("СтарыеИменаОбъектов", Новый ОписаниеТипов("Массив"));
	ОбработкиИзМакетов.Колонки.Добавить("СтарыеИменаФайлов",   Новый ОписаниеТипов("Массив"));
	
	// Отчеты.
	
	СтрокаТаблицы = ОбработкиИзМакетов.Добавить();
	СтрокаТаблицы.ИмяМакета          = "_ДемоДополнительныйОтчет";
	СтрокаТаблицы.АктуальноеИмяФайла = "ДополнительныйОтчет.erf";
	СтрокаТаблицы.СтарыеИменаОбъектов.Добавить("ГлобальныйОтчет");
	СтрокаТаблицы.СтарыеИменаФайлов.Добавить("ГлобальныйОтчет.erf");
	СтрокаТаблицы.СтарыеИменаФайлов.Добавить("_ДемоДополнительныйОтчет.erf");
	
	СтрокаТаблицы = ОбработкиИзМакетов.Добавить();
	СтрокаТаблицы.ИмяМакета          = "_ДемоДополнительныйОтчетНазначаемый";
	СтрокаТаблицы.АктуальноеИмяФайла = "КонтекстныйОтчет.erf";
	СтрокаТаблицы.СтарыеИменаОбъектов.Добавить("Отчет");
	СтрокаТаблицы.СтарыеИменаОбъектов.Добавить("_ДемоКонтекстныйОтчет");
	СтрокаТаблицы.СтарыеИменаФайлов.Добавить("Отчет.erf");
	СтрокаТаблицы.СтарыеИменаФайлов.Добавить("_ДемоДополнительныйОтчетНазначаемый.erf");
	
	// Обработки.
	
	СтрокаТаблицы = ОбработкиИзМакетов.Добавить();
	СтрокаТаблицы.ИмяМакета          = "_ДемоДополнительнаяОбработка";
	СтрокаТаблицы.АктуальноеИмяФайла = "ДополнительнаяОбработка.epf";
	СтрокаТаблицы.СтарыеИменаОбъектов.Добавить("ГлобальнаяОбработка");
	СтрокаТаблицы.СтарыеИменаФайлов.Добавить("ГлобальнаяОбработка.epf");
	СтрокаТаблицы.СтарыеИменаФайлов.Добавить("_ДемоДополнительнаяОбработка.epf");
	
	СтрокаТаблицы = ОбработкиИзМакетов.Добавить();
	СтрокаТаблицы.ИмяМакета          = "_ДемоДополнительнаяОбработкаЗаполненияНазначаемая";
	СтрокаТаблицы.АктуальноеИмяФайла = "ЗаполнениеОбъекта.epf";
	СтрокаТаблицы.СтарыеИменаОбъектов.Добавить("ЗаполнениеОбъекта");
	СтрокаТаблицы.СтарыеИменаФайлов.Добавить("_ДемоДополнительнаяОбработкаЗаполненияНазначаемая.epf");
	
	СтрокаТаблицы = ОбработкиИзМакетов.Добавить();
	СтрокаТаблицы.ИмяМакета           = "_ДемоДополнительнаяОбработкаЗагрузкаИзФайла";
	СтрокаТаблицы.АктуальноеИмяФайла  = "ЗагрузкаКонтрагентовИзФайла.epf";
	СтрокаТаблицы.СтарыеИменаФайлов.Добавить("_ДемоДополнительнаяОбработкаЗагрузкаИзФайла.epf");
	
	СтрокаТаблицы = ОбработкиИзМакетов.Добавить();
	СтрокаТаблицы.ИмяМакета          = "_ДемоДополнительнаяОбработкаПечатиMSWordНазначаемая";
	СтрокаТаблицы.АктуальноеИмяФайла = "Печать_Word.epf";
	СтрокаТаблицы.СтарыеИменаОбъектов.Добавить("ПечатнаяФорма");
	СтрокаТаблицы.СтарыеИменаФайлов.Добавить("_ДемоДополнительнаяОбработкаПечатиMSWordНазначаемая.epf");
	СтрокаТаблицы.СтарыеИменаФайлов.Добавить("Печать_MSWord_OO.epf");
	
	СтрокаТаблицы = ОбработкиИзМакетов.Добавить();
	СтрокаТаблицы.ИмяМакета          = "_ДемоДополнительнаяОбработкаПечатиMXLНазначаемая";
	СтрокаТаблицы.АктуальноеИмяФайла = "Печать_MXL.epf";
	СтрокаТаблицы.СтарыеИменаОбъектов.Добавить("ПечатнаяФорма");
	СтрокаТаблицы.СтарыеИменаФайлов.Добавить("_ДемоДополнительнаяОбработкаПечатиMXLНазначаемая.epf");
	
	СтрокаТаблицы = ОбработкиИзМакетов.Добавить();
	СтрокаТаблицы.ИмяМакета          = "_ДемоДополнительнаяОбработкаСозданияСвязанныхОбъектовНазначаемая";
	СтрокаТаблицы.АктуальноеИмяФайла = "СозданиеСвязанныхОбъектов.epf";
	СтрокаТаблицы.СтарыеИменаОбъектов.Добавить("СоздатьНаОсновании");
	СтрокаТаблицы.СтарыеИменаФайлов.Добавить("_ДемоДополнительнаяОбработкаСозданияСвязанныхОбъектовНазначаемая.epf");
	
	СтрокаТаблицы = ОбработкиИзМакетов.Добавить();
	СтрокаТаблицы.ИмяМакета          = "_ДемоДополнительнаяОбработкаЗагрузкаПрайсЛистаСПрофилем";
	СтрокаТаблицы.АктуальноеИмяФайла = "ЗагрузкаНоменклатурыИзПрайсЛистаСПрофилем.epf";
	СтрокаТаблицы.СтарыеИменаОбъектов.Добавить("ЗагрузкаПрайсЛиста");
	СтрокаТаблицы.СтарыеИменаОбъектов.Добавить("_ДемоДополнительнаяОбработкаЗагрузкаПрайсЛиста");
	СтрокаТаблицы.СтарыеИменаФайлов.Добавить("ЗагрузкаПрайсЛиста.epf");
	СтрокаТаблицы.СтарыеИменаФайлов.Добавить("_ДемоДополнительнаяОбработкаЗагрузкаПрайсЛиста.epf");
	
	СтрокаТаблицы = ОбработкиИзМакетов.Добавить();
	СтрокаТаблицы.ИмяМакета          = "_ДемоДополнительнаяОбработкаЗагрузкаПрайсЛистаСоСценарием";
	СтрокаТаблицы.АктуальноеИмяФайла = "ЗагрузкаНоменклатурыИзПрайсЛистаСоСценарием.epf";
	СтрокаТаблицы.СтарыеИменаОбъектов.Добавить("_ДемоДополнительнаяОбработкаЗагрузкаПрайсЛистаСоСценарием");
	СтрокаТаблицы.СтарыеИменаОбъектов.Добавить("_ДемоДополнительнаяОбработкаЗагрузкаПрайсЛистаВБезопасномРежиме");
	СтрокаТаблицы.СтарыеИменаФайлов.Добавить("ЗагрузкаПрайсЛистаВБезопасномРежиме.epf");
	СтрокаТаблицы.СтарыеИменаФайлов.Добавить("_ДемоДополнительнаяОбработкаЗагрузкаПрайсЛистаВБезопасномРежиме.epf");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДополнительныеОтчетыИОбработки.Ссылка,
	|	ДополнительныеОтчетыИОбработки.Версия,
	|	ДополнительныеОтчетыИОбработки.ИмяОбъекта,
	|	ДополнительныеОтчетыИОбработки.ИмяФайла
	|ИЗ
	|	Справочник.ДополнительныеОтчетыИОбработки КАК ДополнительныеОтчетыИОбработки";
	
	ОбработкиИзКонфигурации = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ОбработкаКонфигурации Из ОбработкиИзКонфигурации Цикл
		ОбработкаКонфигурации.ИмяОбъекта = ВРег(ОбработкаКонфигурации.ИмяОбъекта);
		ОбработкаКонфигурации.ИмяФайла   = ВРег(ОбработкаКонфигурации.ИмяФайла);
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из ОбработкиИзМакетов Цикл
		СтрокаТаблицы.СтарыеИменаФайлов.Вставить(0, СтрокаТаблицы.АктуальноеИмяФайла);
		СтрокаТаблицы.СтарыеИменаОбъектов.Вставить(0, СтрокаТаблицы.ИмяМакета);
		Расширение = Сред(СтрокаТаблицы.АктуальноеИмяФайла, СтрНайти(СтрокаТаблицы.АктуальноеИмяФайла, ".")+1);
		
		НайденнаяСсылка = Неопределено;
		Для Каждого ИмяФайла Из СтрокаТаблицы.СтарыеИменаФайлов Цикл
			НайденнаяСтрока = ОбработкиИзКонфигурации.Найти(ВРег(ИмяФайла), "ИмяФайла");
			Если НайденнаяСтрока <> Неопределено Тогда
				НайденнаяСсылка = НайденнаяСтрока.Ссылка;
				ОбработкиИзКонфигурации.Удалить(НайденнаяСтрока);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если НайденнаяСсылка = Неопределено Тогда
			Для Каждого ИмяОбъекта Из СтрокаТаблицы.СтарыеИменаОбъектов Цикл
				НайденнаяСтрока = ОбработкиИзКонфигурации.Найти(ВРег(ИмяОбъекта), "ИмяОбъекта");
				Если НайденнаяСтрока <> Неопределено Тогда
					НайденнаяСсылка = НайденнаяСтрока.Ссылка;
					ОбработкиИзКонфигурации.Удалить(НайденнаяСтрока);
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если НайденнаяСсылка = Неопределено Тогда
			СправочникОбъект = Справочники.ДополнительныеОтчетыИОбработки.СоздатьЭлемент();
			СправочникОбъект.ИспользоватьДляФормыОбъекта = Истина;
			СправочникОбъект.ИспользоватьДляФормыСписка  = Истина;
			СправочникОбъект.Ответственный               = Пользователи.ТекущийПользователь();
		Иначе
			СправочникОбъект = НайденнаяСсылка.ПолучитьОбъект();
		КонецЕсли;
		
		ДвоичныеДанные    = ПолучитьОбщийМакет(СтрокаТаблицы.ИмяМакета);
		АдресДанных       = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
		Менеджер          = ?(Расширение = "erf", ВнешниеОтчеты, ВнешниеОбработки);
		ИмяОбъекта        = Менеджер.Подключить(АдресДанных, , Истина);
		ВнешнийОбъект     = Менеджер.Создать(ИмяОбъекта);
		ОбработкаСведения = ВнешнийОбъект.СведенияОВнешнейОбработке();
		
		Если Не СправочникОбъект.ЭтоНовый()
			И ВерсияЧислом(СправочникОбъект.Версия) >= ВерсияЧислом(ОбработкаСведения.Версия) Тогда
			Продолжить;
		КонецЕсли;
		
		ВнешнийОбъектМетаданные = ВнешнийОбъект.Метаданные();
		Если ОбработкаСведения.Наименование = Неопределено ИЛИ ОбработкаСведения.Информация = Неопределено Тогда
			Если ОбработкаСведения.Наименование = Неопределено Тогда
				ОбработкаСведения.Наименование = ВнешнийОбъектМетаданные.Представление();
			КонецЕсли;
			Если ОбработкаСведения.Информация = Неопределено Тогда
				ОбработкаСведения.Информация = ВнешнийОбъектМетаданные.Комментарий;
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СправочникОбъект, ОбработкаСведения, "Наименование, БезопасныйРежим, Версия, Информация");
		
		// Выгрузка настроек команд, которые переопределяются администратором.
		ПоискЗаданий = Новый Соответствие;
		Для Каждого СтараяКоманда Из СправочникОбъект.Команды Цикл
			Если ЗначениеЗаполнено(СтараяКоманда.РегламентноеЗаданиеGUID) Тогда
				ПоискЗаданий.Вставить(ВРег(СтараяКоманда.Идентификатор), СтараяКоманда.РегламентноеЗаданиеGUID);
			КонецЕсли;
		КонецЦикла;
		
		ПараметрыРегистрации = Новый Структура;
		ПараметрыРегистрации.Вставить("АдресДанныхОбработки", АдресДанных);
		ПараметрыРегистрации.Вставить("ЭтоОтчет", ВРег(Расширение) = "ERF");
		ПараметрыРегистрации.Вставить("ОтключатьКонфликтующие", Ложь);
		ПараметрыРегистрации.Вставить("ИмяФайла", СтрокаТаблицы.АктуальноеИмяФайла);
		ПараметрыРегистрации.Вставить("ОтключатьПубликацию", Ложь);
		
		СправочникОбъект.ИмяОбъекта = Неопределено;
		СправочникОбъект.Публикация = Перечисления.ВариантыПубликацииДополнительныхОтчетовИОбработок.Используется;
		СправочникОбъект.Вид        = ДополнительныеОтчетыИОбработки.ПолучитьВидОбработкиПоСтроковомуПредставлениюВида(
			ОбработкаСведения.Вид);
		
		Результат = ДополнительныеОтчетыИОбработки.ЗарегистрироватьОбработку(СправочникОбъект, ПараметрыРегистрации);
		Если Не Результат.Успех Тогда
			Если Результат.ИмяОбъектаЗанято Тогда
				Результат.ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Имя ""%1"" занято объектами ""%2""'"),
					ИмяОбъекта,
					Строка(Результат.Конфликтующие));
			КонецЕсли;
			ЗаписьЖурналаРегистрации(
				ДополнительныеОтчетыИОбработкиКлиентСервер.НаименованиеПодсистемы(Ложь),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.ОбщиеМакеты.Найти(СтрокаТаблицы.ИмяМакета),
				,
				Результат.ТекстОшибки);
			Продолжить;
		КонецЕсли;
		
		СправочникОбъект.ХранилищеОбработки = Новый ХранилищеЗначения(ДвоичныеДанные);
		СправочникОбъект.ИмяОбъекта         = ВнешнийОбъектМетаданные.Имя;
		СправочникОбъект.ИмяФайла           = СтрокаТаблицы.АктуальноеИмяФайла;
		
		// Очистка и загрузка новых команд.
		Для Каждого Команда Из СправочникОбъект.Команды Цикл
			РегламентноеЗаданиеGUID = ПоискЗаданий.Получить(ВРег(Команда.Идентификатор));
			Если РегламентноеЗаданиеGUID <> Неопределено Тогда
				Команда.РегламентноеЗаданиеGUID = РегламентноеЗаданиеGUID;
				ПоискЗаданий.Удалить(ВРег(Команда.Идентификатор));
			КонецЕсли;
		КонецЦикла;
		
		// Удаление неактуальных заданий.
		Для Каждого КлючИЗначение Из ПоискЗаданий Цикл
			Попытка
				Задание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(КлючИЗначение.Значение);
				Задание.Удалить();
			Исключение
				ЗаписьЖурналаРегистрации(
					ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
					УровеньЖурналаРегистрации.Ошибка,
					Метаданные.Справочники.ДополнительныеОтчетыИОбработки,
					СправочникОбъект.Ссылка,
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Ошибка при удалении задания ""%1"":%2'"),
						КлючИЗначение.Значение,
						Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
			КонецПопытки;
		КонецЦикла;
		
		Если ДополнительныеОтчетыИОбработки.ПроверитьГлобальнаяОбработка(СправочникОбъект.Вид) Тогда
			ТаблицаОбъектовМетаданных = ДополнительныеОтчетыИОбработки.ПодключенныеОбъектыМетаданных(СправочникОбъект.Вид);
			Для Каждого СтрокаТаблицы Из ТаблицаОбъектовМетаданных Цикл
				РазделСсылка = СтрокаТаблицы.Ссылка;
				СтрокаРаздела = СправочникОбъект.Разделы.Найти(РазделСсылка, "Раздел");
				Если СтрокаРаздела = Неопределено Тогда
					СтрокаРаздела = СправочникОбъект.Разделы.Добавить();
					СтрокаРаздела.Раздел = РазделСсылка;
				КонецЕсли;
			КонецЦикла;
		Иначе
			Для Каждого ОписаниеНазначения Из ОбработкаСведения.Назначение Цикл
				ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ОписаниеНазначения);
				Если ОбъектМетаданных = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				ОбъектНазначенияСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ОбъектМетаданных);
				СтрокаНазначения = СправочникОбъект.Назначение.Найти(ОбъектНазначенияСсылка, "ОбъектНазначения");
				Если СтрокаНазначения = Неопределено Тогда
					СтрокаНазначения = СправочникОбъект.Назначение.Добавить();
					СтрокаНазначения.ОбъектНазначения = ОбъектНазначенияСсылка;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СправочникОбъект, , Истина);
	КонецЦикла;
КонецПроцедуры

// Преобразует строковое представление версии в числовое.
//
Функция ВерсияЧислом(ВерсияСтрокой)
	Если ПустаяСтрока(ВерсияСтрокой) Или ВерсияСтрокой = "0.0.0.0" Тогда
		Возврат 0;
	КонецЕсли;
	
	Разряд = 0;
	
	Результат = 0;
	
	Остаток = ВерсияСтрокой;
	ПозицияТочки = СтрНайти(Остаток, ".");
	Пока ПозицияТочки > 0 Цикл
		ЧислоСтрокой = Лев(Остаток, ПозицияТочки - 1);
		Число = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ЧислоСтрокой);
		Если Число = Неопределено Тогда
			Возврат 0;
		КонецЕсли;
		Результат = Результат * 1000 + Число;
		Остаток = Сред(Остаток, ПозицияТочки + 1);
		ПозицияТочки = СтрНайти(Остаток, ".");
		Разряд = Разряд + 1;
	КонецЦикла;
	
	Число = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Остаток);
	Если Число = Неопределено Тогда
		Возврат 0;
	КонецЕсли;
	Результат = Результат * 1000 + Число;
	Разряд = Разряд + 1;
	
	// Номера версии после 4 точки возвращает после запятой.
	// Например, для версии "1.2.3.4.5.6.7" вернет 1002003004,005006007.
	Если Разряд > 4 Тогда
		Результат = Результат / Pow(1000, Разряд - 4);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Обновляет значения реквизитов предопределенных видов контактной информации.
Процедура ОбновитьПредопределенныеВидыКонтактнойИнформации() Экспорт
	
	// Справочник "Партнеры"
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Адрес);
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации._ДемоАдресПартнера;
	ПараметрыВида.Подсказка = НСтр("ru='Адрес партнера'");
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 1;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Телефон);
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации._ДемоТелефонПартнера;
	ПараметрыВида.Подсказка = НСтр("ru='Телефон партнера'");
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 2;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации._ДемоEmailПартнера;
	ПараметрыВида.Подсказка = НСтр("ru='Адрес электронной почты партнера'");
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Истина;
	ПараметрыВида.Порядок = 3;
	ПараметрыВида.НастройкиПроверки.ПроверятьКорректность = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	// Справочник "Физические лица".
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации._ДемоEmailФизическогоЛица;
	ПараметрыВида.Подсказка = НСтр("ru='Адрес электронной почты физического лица'");
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Истина;
	ПараметрыВида.Порядок = 1;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	// Справочник "Контактные лица партнеров".
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Адрес);
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации._ДемоАдресКонтактногоЛица;
	ПараметрыВида.Подсказка = НСтр("ru='Адрес контактного лица партнера'");
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 1;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации._ДемоEmailКонтактногоЛица;
	ПараметрыВида.Подсказка = НСтр("ru='Адрес электронной почты контактного лица партнера'");
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Истина;
	ПараметрыВида.Порядок = 2;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	// Справочник "Контрагенты"
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Адрес);
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации._ДемоАдресКонтрагента;
	ПараметрыВида.Подсказка = НСтр("ru='Адрес контрагента'");
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 1;
	ПараметрыВида.НастройкиПроверки.АдресТолькоРоссийский = Истина;
	ПараметрыВида.НастройкиПроверки.ПроверятьКорректность = Истина;
	ПараметрыВида.НастройкиПроверки.ПроверятьПоФИАС = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации._ДемоEmailКонтрагента;
	ПараметрыВида.Подсказка = НСтр("ru='Адрес электронной почты контрагента'");
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Истина;
	ПараметрыВида.Порядок = 2;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	// Документ Заказ покупателя"
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Адрес);
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации._ДемоПартнерыИКонтактныеЛицаАдресПартнера;
	ПараметрыВида.Подсказка = НСтр("ru='Адрес партнера'");
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 1;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Телефон);
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации._ДемоПартнерыИКонтактныеЛицаТелефонПартнера;
	ПараметрыВида.Подсказка = НСтр("ru='Телефон партнера'");
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 2;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации._ДемоПартнерыИКонтактныеЛицаEmailПартнера;
	ПараметрыВида.Подсказка = НСтр("ru='Адрес электронной почты партнера'");
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 3;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
КонецПроцедуры

// Вызывается при переходе на версию конфигурации 2.2.4.33.
Процедура ОбновитьПредопределенныеВидыКонтактнойИнформацииФизическихЛиц() Экспорт
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации._ДемоEmailФизическогоЛица;
	ПараметрыВида.Подсказка = НСтр("ru='Адрес электронной почты физического лица'");
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Истина;
	ПараметрыВида.Порядок = 1;
	
КонецПроцедуры

// Вызывается при переходе на версию конфигурации 2.2.5.8.
Процедура ОбновитьПредопределенныеВидыКонтактнойИнформацииКонтрагентов() Экспорт
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Адрес);
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации._ДемоАдресКонтрагента;
	ПараметрыВида.Подсказка = НСтр("ru='Адрес контрагента'");
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.ЗапретитьРедактированиеПользователем = Истина;
	ПараметрыВида.Порядок = 1;
	ПараметрыВида.НастройкиПроверки.АдресТолькоРоссийский = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации._ДемоEmailКонтрагента;
	ПараметрыВида.Подсказка = НСтр("ru='Адрес электронной почты контрагента'");
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Истина;
	ПараметрыВида.ЗапретитьРедактированиеПользователем = Истина;
	ПараметрыВида.Порядок = 2;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
КонецПроцедуры

// Тестовый обработчик, предназначенный для имитации ошибки при обновлении.
//
Процедура ОбработчикСОшибкой() Экспорт
	
	ИмитироватьОшибку = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"ОбновлениеИБ", "ИмитироватьОшибкуПриОбновлении", , ИмяПользователя());
	Если ИмитироватьОшибку = Истина Тогда
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ОбновлениеИБ",
			"ИмитироватьОшибкуПриОбновлении", Ложь, ИмяПользователя());
		ТекстСообщения = НСтр("ru = 'Процедура ОбработчикСОшибкой выполнилась с ошибкой.'");
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Информация,,,
			ТекстСообщения);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
КонецПроцедуры

// Заполнить значение нового реквизита СтатусЗаказа у документов _ДемоЗаказПокупателя за последний месяц.
// 
Процедура ЗаполнитьСтатусыЗаказовПокупателейЗаПоследнийМесяц() Экспорт
	
	// Выбрать все заказы покупателя с неинициализированным значением нового реквизита.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	_ДемоЗаказПокупателя.Ссылка
	|ИЗ
	|	Документ._ДемоЗаказПокупателя КАК _ДемоЗаказПокупателя
	|ГДЕ
	|	_ДемоЗаказПокупателя.Дата >= &НачалоМесяца
	|	И _ДемоЗаказПокупателя.СтатусЗаказа = &ПустаяСсылка";
	
	Запрос.Параметры.Вставить("НачалоМесяца", ТекущаяДатаСеанса() - 30 * 24 * 60 * 60); // за последний месяц
	Запрос.Параметры.Вставить("ПустаяСсылка", Перечисления._ДемоСтатусыЗаказовПокупателей.ПустаяСсылка());
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Для Каждого ЗаказПокупателя Из РезультатЗапроса Цикл
		
		Попытка
			ЗаполнитьСтатусЗаказаПокупателя(ЗаказПокупателя);
		Исключение
			// Если не удалось обработать какой-либо заказ, пропускаем и обрабатываем позднее (отложенно).
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось обработать заказ покупателя: %1 по причине:
					|%2'"), 
					ЗаказПокупателя.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Документы._ДемоЗаказПокупателя, ЗаказПокупателя.Ссылка, ТекстСообщения);
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполнить значение констант ИспользоватьНесколькоОрганизаций и _ДемоОсновнаяОрганизация.
// 
Процедура ЗаполнитьКонстантыДляОрганизаций() Экспорт
	
	Константы.ИспользоватьНесколькоОрганизаций.Установить(Справочники.Организации.КоличествоОрганизаций() > 1);
	Константы._ДемоОсновнаяОрганизация.Установить(Справочники.Организации.ОрганизацияПоУмолчанию());
	
КонецПроцедуры

// Обновляет значения реквизитов предопределенных ключевых операций.
Процедура ОбновитьПредопределенныеКлючевыеОперации() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КлючевыеОперации.Ссылка,
	               |	КлючевыеОперации.ИмяПредопределенныхДанных
	               |ИЗ
	               |	Справочник.КлючевыеОперации КАК КлючевыеОперации
	               |ГДЕ
	               |	КлючевыеОперации.Имя = """"
	               |	И КлючевыеОперации.Предопределенный";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		КлючеваяОперация = Выборка.Ссылка.ПолучитьОбъект();
		КлючеваяОперация.Имя = Выборка.ИмяПредопределенныхДанных;
		КлючеваяОперация.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Заполнить реквизит ГруппаДоступа у справочников содержащих группы значений доступа,
// в данном случае у справочников _ДемоГруппыДоступаНоменклатуры, _ДемоГруппыДоступаПартнеров,
// чтобы использовать ограничение доступа этих справочников.
Процедура ЗаполнитьРеквизитГруппаДоступаУСправочниковГруппЗначенийДоступа() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	_ДемоГруппыДоступаНоменклатуры.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник._ДемоГруппыДоступаНоменклатуры КАК _ДемоГруппыДоступаНоменклатуры
	|ГДЕ
	|	_ДемоГруппыДоступаНоменклатуры.ГруппаДоступа <> _ДемоГруппыДоступаНоменклатуры.Ссылка
	|	И НЕ _ДемоГруппыДоступаНоменклатуры.ЭтоГруппа
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	_ДемоГруппыДоступаПартнеров.Ссылка
	|ИЗ
	|	Справочник._ДемоГруппыДоступаПартнеров КАК _ДемоГруппыДоступаПартнеров
	|ГДЕ
	|	_ДемоГруппыДоступаПартнеров.ГруппаДоступа <> _ДемоГруппыДоступаПартнеров.Ссылка
	|	И НЕ _ДемоГруппыДоступаПартнеров.ЭтоГруппа";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Объект.ГруппаДоступа = Объект.Ссылка;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
	КонецЦикла;
	
КонецПроцедуры

// Примеры обработчиков отложенного обновления.

// Заполнить значение нового реквизита СтатусЗаказа у документа _ДемоЗаказПокупателя.
// 
Процедура ЗаполнитьСтатусыЗаказовПокупателей(Параметры) Экспорт
	
	// Получаем ранее сохраненную дату обработанных документов.
	ДатаОбработанныхДокументов = Неопределено;
	Параметры.Свойство("ДатаОбработанныхДокументов", ДатаОбработанныхДокументов);
	
	// Расчет общего количества обрабатываемых объектов.
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(_ДемоЗаказПокупателя.Ссылка) КАК Количество
		|ИЗ
		|	Документ._ДемоЗаказПокупателя КАК _ДемоЗаказПокупателя
		|ГДЕ
		|	_ДемоЗаказПокупателя.СтатусЗаказа = &ПустаяСсылка";
		Запрос.Параметры.Вставить("ПустаяСсылка", Перечисления._ДемоСтатусыЗаказовПокупателей.ПустаяСсылка());
		
		РезультатЗапроса = Запрос.Выполнить().Выгрузить();
		Параметры.ПрогрессВыполнения.ВсегоОбъектов = РезультатЗапроса[0].Количество;
	КонецЕсли;
	
	// Выбрать все заказы покупателя с неинициализированным значением нового реквизита.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 50
	|	_ДемоЗаказПокупателя.Ссылка,
	|	_ДемоЗаказПокупателя.Дата
	|ИЗ
	|	Документ._ДемоЗаказПокупателя КАК _ДемоЗаказПокупателя
	|ГДЕ
	|	_ДемоЗаказПокупателя.СтатусЗаказа = &ПустаяСсылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	_ДемоЗаказПокупателя.Дата УБЫВ";
	
	Запрос.Параметры.Вставить("ПустаяСсылка", Перечисления._ДемоСтатусыЗаказовПокупателей.ПустаяСсылка());
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Если РезультатЗапроса.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	Параметры.ОбработкаЗавершена = Ложь;
	
	ПроблемныхОбъектов = 0;
	ОбъектовОбработано = 0;
	
	Для Каждого ЗаказПокупателя Из РезультатЗапроса Цикл
		
		Попытка
			
			ЗаполнитьСтатусЗаказаПокупателя(ЗаказПокупателя);
			ДатаОбработанныхДокументов = ЗаказПокупателя.Дата;
			ОбъектовОбработано = ОбъектовОбработано + 1;
			
		Исключение
			// Если не удалось обработать какой-либо заказ, повторяем попытку снова.
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось обработать заказ покупателя: %1 по причине:
					|%2'"), 
					ЗаказПокупателя.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Документы._ДемоЗаказПокупателя, ЗаказПокупателя.Ссылка, ТекстСообщения);
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбъектовОбработано;
	Если ОбъектовОбработано = 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Процедуре ЗаполнитьСтатусыЗаказовПокупателей не удалось обработать некоторые заказы покупателей (пропущены): %1'"), 
				ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	Иначе
		Параметры.Вставить("ДатаОбработанныхДокументов", ДатаОбработанныхДокументов);
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,
			Метаданные.Документы._ДемоЗаказПокупателя,,
				НСтр("ru = 'Процедура ЗаполнитьСтатусыЗаказовПокупателей обработала очередную порцию заказов покупателей: 50'"));
	КонецЕсли;
	
КонецПроцедуры

// Заполняет значение нового реквизита СтатусЗаказ у переданного документа.
//
Процедура ЗаполнитьСтатусЗаказаПокупателя(ЗаказПокупателя)
	
	НачатьТранзакцию();
	Попытка
	
		// Блокируем объект от изменения другими сеансами.
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Документ._ДемоЗаказПокупателя");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ЗаказПокупателя.Ссылка);
		Блокировка.Заблокировать();
		
		ДокументОбъект = ЗаказПокупателя.Ссылка.ПолучитьОбъект();
		
		// Если объект ранее был удален или обработан другими сеансами, пропускаем его.
		Если ДокументОбъект = Неопределено Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		Если ДокументОбъект.СтатусЗаказа <> Перечисления._ДемоСтатусыЗаказовПокупателей.ПустаяСсылка() Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		// Обработка объекта.
		Если Не ДокументОбъект.УдалитьЗаказЗакрыт И Не ДокументОбъект.Проведен Тогда
			ДокументОбъект.СтатусЗаказа = Перечисления._ДемоСтатусыЗаказовПокупателей.НеСогласован;
		ИначеЕсли Не ДокументОбъект.УдалитьЗаказЗакрыт И ДокументОбъект.Проведен Тогда
			ДокументОбъект.СтатусЗаказа = Перечисления._ДемоСтатусыЗаказовПокупателей.Согласован;
		Иначе
			ДокументОбъект.СтатусЗаказа = Перечисления._ДемоСтатусыЗаказовПокупателей.Закрыт;
		КонецЕсли;
		
		// Запись обработанного объекта.
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Проверяет, что обработчик отложенного обновления обработал документ _ДемоЗаказПокупателя.
//
// Параметры:
//  Параметры - Структура - см. ОбновлениеИнформационнойБазы.МетаданныеИОтборПоДанным.
//
Функция ЗаказПокупателяОбработан(Параметры) Экспорт
	
	Если ТипЗнч(Параметры.Данные) = Тип("ДокументСсылка._ДемоЗаказПокупателя") Тогда
		СтатусЗаказа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Данные, "СтатусЗаказа");
	Иначе
		СтатусЗаказа = Параметры.Данные.СтатусЗаказа;
	КонецЕсли;
	
	Возврат СтатусЗаказа <> Перечисления._ДемоСтатусыЗаказовПокупателей.ПустаяСсылка();
	
КонецФункции

// Проверяет, что обработчик отложенного обновления обработал документ _ДемоЗаказПокупателя.
//
// Параметры:
//  Параметры - Структура - см. ОбновлениеИнформационнойБазы.МетаданныеИОтборПоДанным.
//
Функция ЗаполненыДанныеДляСпискаЗаказПокупателя(Параметры) Экспорт
	
	Если ТипЗнч(Параметры.Данные) = Тип("ДокументСсылка._ДемоЗаказПокупателя") Тогда
		ДанныеАдреса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Параметры.Данные, "АдресДоставки,АдресДоставкиСтрокой,ЭлектроннаяПочта,ЭлектроннаяПочтаСтрокой");
	Иначе
		ДанныеАдреса = Параметры.Данные;
	КонецЕсли;
	
	АдресОбработан = (Не ПустаяСтрока(ДанныеАдреса.АдресДоставки) И Не ПустаяСтрока(ДанныеАдреса.АдресДоставкиСтрокой))
		Или (ПустаяСтрока(ДанныеАдреса.АдресДоставки) И ПустаяСтрока(ДанныеАдреса.АдресДоставкиСтрокой));
		
	ЭлектроннаяПочтаОбработана = (Не ПустаяСтрока(ДанныеАдреса.ЭлектроннаяПочта) И Не ПустаяСтрока(ДанныеАдреса.ЭлектроннаяПочтаСтрокой))
		Или (ПустаяСтрока(ДанныеАдреса.ЭлектроннаяПочта) И ПустаяСтрока(ДанныеАдреса.ЭлектроннаяПочтаСтрокой));
		
	Возврат АдресОбработан И ЭлектроннаяПочтаОбработана;
	
КонецФункции

// Обновить значение реквизита ПериодРегистрации.
//
Процедура ОбновитьПериодРегистрацииДокументовРасчета(Параметры) Экспорт
	
	Запрос = Новый Запрос(" 
		|ВЫБРАТЬ ПЕРВЫЕ 50
		|	_ДемоНачислениеЗарплаты.Ссылка КАК Ссылка
		|ИЗ
		|	Документ._ДемоНачислениеЗарплаты КАК _ДемоНачислениеЗарплаты
		|ГДЕ
		|	_ДемоНачислениеЗарплаты.ПериодРегистрации = ДАТАВРЕМЯ(1, 1, 1)
		|");
		
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Ложь;
	
	КоличествоОшибок = 0;
	Обработано       = 0;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокументРасчета = Выборка.Ссылка;
		Попытка
			ЗаполнитьПериодРегистрацииДокументаРасчета(ДокументРасчета);
			Обработано = Обработано + 1;
		Исключение
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось обработать документ расчета %1 по причине %2'"), 
					ДокументРасчета, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				ДокументРасчета.Метаданные(), ДокументРасчета, ТекстСообщения);
				
			КоличествоОшибок = КоличествоОшибок + 1;
		КонецПопытки;
	КонецЦикла;
	
	Если Обработано = 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Процедуре ""ОбновитьПериодРегистрацииДокументовРасчета"" не удалось обработать некоторые документы расчета (пропущены): %1'"), 
				КоличествоОшибок);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,
		Метаданные.Документы._ДемоЗаказПокупателя,,
			НСтр("ru = 'Процедура ""ОбновитьПериодРегистрацииДокументовРасчета"" обработала очередную порцию документов расчета: 50'"));
КонецПроцедуры

// Заполняет значение нового реквизита ПериодРегистрации у документа расчета.
//
Процедура ЗаполнитьПериодРегистрацииДокументаРасчета(Знач ДокументРасчета)
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить( ДокументРасчета.Метаданные().ПолноеИмя() );
	ЭлементБлокировки.УстановитьЗначение("Ссылка", ДокументРасчета);
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		
		ДокументОбъект = ДокументРасчета.ПолучитьОбъект();
		Если ДокументОбъект <> Неопределено
			И ДокументОбъект.ПериодРегистрации = '00010101' Тогда
			// Заполняем корректным значением.
			ДокументОбъект.ПериодРегистрации = ДокументОбъект.Дата;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Восстанавливает движения проведенных документов.
//
Процедура ВосстановитьДвиженияДокументов(Параметры) Экспорт
	
	Запрос = Новый Запрос(" 
		|ВЫБРАТЬ ПЕРВЫЕ 100
		|	ПорцияДляОбработки.Ссылка          КАК Ссылка,
		|	ПорцияДляОбработки.РегистрДвижений КАК РегистрДвижений
		|ИЗ (
		|
		|	ВЫБРАТЬ ПЕРВЫЕ 100
		|		Документы.Ссылка  КАК Ссылка,
		|		""_ДемоОсновной"" КАК РегистрДвижений
		|	ИЗ
		|		Документ._ДемоПоступлениеТоваров КАК Документы,
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		Документ._ДемоПоступлениеТоваров.Товары КАК ИсточникДвижений
		|	ПО 
		|		ИсточникДвижений.Ссылка = Документы.Ссылка
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрБухгалтерии._ДемоОсновной КАК Движения
		|	ПО 
		|		Движения.Регистратор ССЫЛКА Документ._ДемоПоступлениеТоваров
		|		И Документы.Ссылка = Движения.Регистратор
		|	ГДЕ
		|		Документы.Проведен
		|	СГРУППИРОВАТЬ ПО
		|		Документы.Ссылка
		|	ИМЕЮЩИЕ
		|		КОЛИЧЕСТВО(Движения.Регистратор) = 0
		|
		|	ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ПЕРВЫЕ 100
		|		Документы.Ссылка  КАК Ссылка,
		|		""_ДемоОсновной"" КАК РегистрДвижений
		|	ИЗ
		|		Документ._ДемоРеализацияТоваров КАК Документы,
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		Документ._ДемоРеализацияТоваров.Товары КАК ИсточникДвижений
		|	ПО 
		|		ИсточникДвижений.Ссылка = Документы.Ссылка
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрБухгалтерии._ДемоОсновной КАК Движения
		|	ПО 
		|		Движения.Регистратор ССЫЛКА Документ._ДемоРеализацияТоваров
		|		И Документы.Ссылка = Движения.Регистратор
		|	ГДЕ
		|		Документы.Проведен
		|	СГРУППИРОВАТЬ ПО
		|		Документы.Ссылка
		|	ИМЕЮЩИЕ
		|		КОЛИЧЕСТВО(Движения.Регистратор) = 0
		|
		|	ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ПЕРВЫЕ 100
		|		Документы.Ссылка            КАК Ссылка,
		|		""_ДемоОсновныеНачисления"" КАК РегистрДвижений
		|	ИЗ
		|		Документ._ДемоНачислениеЗарплаты КАК Документы,
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		Документ._ДемоНачислениеЗарплаты.Зарплата КАК ИсточникДвижений
		|	ПО 
		|		ИсточникДвижений.Ссылка = Документы.Ссылка
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрРасчета._ДемоОсновныеНачисления КАК Движения
		|	ПО 
		|		Движения.Регистратор ССЫЛКА Документ._ДемоНачислениеЗарплаты
		|		И Документы.Ссылка = Движения.Регистратор
		|	ГДЕ
		|		Документы.Проведен
		|	СГРУППИРОВАТЬ ПО
		|		Документы.Ссылка
		|	ИМЕЮЩИЕ
		|		КОЛИЧЕСТВО(Движения.Регистратор) = 0
		|
		|) КАК ПорцияДляОбработки
		|");
		
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Ложь;
	
	КоличествоОшибок = 0;
	Обработано       = 0;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		ТекущийДокумент = Выборка.Ссылка;
		Попытка
			ВосстановитьДвиженияДокумента(ТекущийДокумент, Выборка.РегистрДвижений);
			Обработано = Обработано + 1;
		Исключение
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось восстановить движения документа %1 по причине %2'"), 
					ТекущийДокумент, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				ТекущийДокумент.Метаданные(), ТекущийДокумент, ТекстСообщения);
				
			КоличествоОшибок = КоличествоОшибок + 1;
		КонецПопытки;
	КонецЦикла;
	
	Если Обработано = 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Процедуре ""ВосстановитьДвиженияДокументов"" не удалось обработать некоторые документы (пропущены): %1'"), 
				КоличествоОшибок);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация, , ,
		НСтр("ru = 'Процедура ""ВосстановитьДвиженияДокументов"" обработала очередную порцию документов: 100'"));
	
КонецПроцедуры

// Перепроводит один документ, если тот еще не обработан.
//
Процедура ВосстановитьДвиженияДокумента(Знач ТекущийДокумент, Знач РегистрДвижений)
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить( ТекущийДокумент.Метаданные().ПолноеИмя() );
	ЭлементБлокировки.УстановитьЗначение("Ссылка", ТекущийДокумент);
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		
		ДокументОбъект = ТекущийДокумент.ПолучитьОбъект();
		Если ДокументОбъект <> Неопределено И ДокументОбъект.Движения[РегистрДвижений].Количество() = 0 Тогда
			// Не удален и все еще нет движений.
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Заполняет корректными данными измерения последовательности документов движения товаров.
//
Процедура ЗаполнитьПоследовательностьДвиженияТоваров(Параметры) Экспорт 
	
	Запрос = Новый Запрос(" 
		|// Размер порции рассчитывается по документам. В порции будет обработано 5*4 = 20 документов максимум. 
		|// Каждый документ может относится к нескольким записям, поэтому количество записей порции может быть разным.
		|
		|ВЫБРАТЬ
		|	ПорцияОбработки.Ссылка               КАК Ссылка,
		|	ПорцияОбработки.Ссылка.Дата          КАК Период,
		|	ПорцияОбработки.Ссылка.МоментВремени КАК МоментВремени,
		|	
		|	ПорцияОбработки.Номенклатура  КАК Номенклатура,
		|	ПорцияОбработки.МестоХранения КАК МестоХранения
		|ИЗ (
		|	
		|	// Некорректное по поступлениям
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		Поступление.Ссылка               КАК Ссылка,
		|		Поступление.Номенклатура         КАК Номенклатура,
		|		Поступление.Ссылка.МестоХранения КАК МестоХранения
		|	ИЗ
		|		Документ._ДемоПоступлениеТоваров.Товары КАК Поступление
		|	ГДЕ
		|		Поступление.Ссылка В (
		|			ВЫБРАТЬ ПЕРВЫЕ 5
		|				Заполняемое.Регистратор
		|			ИЗ
		|				Последовательность._ДемоДвижениеТоваров КАК Заполняемое
		|			ГДЕ
		|				Заполняемое.Регистратор ССЫЛКА Документ._ДемоПоступлениеТоваров
		|				И Заполняемое.Номенклатура = ЗНАЧЕНИЕ(Справочник._ДемоНоменклатура.ПустаяСсылка)
		|			
		|			ОБЪЕДИНИТЬ ВСЕ
		|			
		|			ВЫБРАТЬ ПЕРВЫЕ 5
		|				Заполняемое.Регистратор
		|			ИЗ
		|				Последовательность._ДемоДвижениеТоваров КАК Заполняемое
		|			ГДЕ
		|				Заполняемое.Регистратор ССЫЛКА Документ._ДемоПоступлениеТоваров
		|				И Заполняемое.МестоХранения = ЗНАЧЕНИЕ(Справочник._ДемоМестаХранения.ПустаяСсылка)
		|			
		|			ОБЪЕДИНИТЬ ВСЕ
		|			
		|			ВЫБРАТЬ ПЕРВЫЕ 5
		|				Поступление.Ссылка
		|			ИЗ
		|				Документ._ДемоПоступлениеТоваров.Товары КАК Поступление
		|			ЛЕВОЕ СОЕДИНЕНИЕ
		|				Последовательность._ДемоДвижениеТоваров КАК Заполняемое
		|			ПО
		|				ВЫРАЗИТЬ(Заполняемое.Регистратор КАК Документ._ДемоПоступлениеТоваров) = Поступление.Ссылка
		|			ГДЕ
		|				Заполняемое.Регистратор ЕСТЬ NULL
		|		)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	// Некорректное по реализации
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		Реализация.Ссылка               КАК Ссылка,
		|		Реализация.Номенклатура         КАК Номенклатура,
		|		Реализация.Ссылка.МестоХранения КАК МестоХранения
		|	ИЗ
		|		Документ._ДемоРеализацияТоваров.Товары КАК Реализация
		|	ГДЕ
		|		Реализация.Ссылка В (
		|			ВЫБРАТЬ ПЕРВЫЕ 5
		|				Заполняемое.Регистратор
		|			ИЗ
		|				Последовательность._ДемоДвижениеТоваров КАК Заполняемое
		|			ГДЕ
		|				Заполняемое.Регистратор ССЫЛКА Документ._ДемоРеализацияТоваров
		|				И Заполняемое.Номенклатура = ЗНАЧЕНИЕ(Справочник._ДемоНоменклатура.ПустаяСсылка)
		|			
		|			ОБЪЕДИНИТЬ ВСЕ
		|			
		|			ВЫБРАТЬ ПЕРВЫЕ 5
		|				Заполняемое.Регистратор
		|			ИЗ
		|				Последовательность._ДемоДвижениеТоваров КАК Заполняемое
		|			ГДЕ
		|				Заполняемое.Регистратор ССЫЛКА Документ._ДемоРеализацияТоваров
		|				И Заполняемое.МестоХранения = ЗНАЧЕНИЕ(Справочник._ДемоМестаХранения.ПустаяСсылка)
		|			
		|			ОБЪЕДИНИТЬ ВСЕ
		|			
		|			ВЫБРАТЬ ПЕРВЫЕ 5
		|				Реализация.Ссылка
		|			ИЗ
		|				Документ._ДемоРеализацияТоваров.Товары КАК Реализация
		|			ЛЕВОЕ СОЕДИНЕНИЕ
		|				Последовательность._ДемоДвижениеТоваров КАК Заполняемое
		|			ПО
		|				ВЫРАЗИТЬ(Заполняемое.Регистратор КАК Документ._ДемоРеализацияТоваров) = Реализация.Ссылка
		|			ГДЕ
		|				Заполняемое.Регистратор ЕСТЬ NULL
		|		)
		|		
		|) КАК ПорцияОбработки
		|
		|ИТОГИ ПО
		|	Ссылка
		|");
		
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Ложь;
	
	КоличествоОшибок = 0;
	Обработано       = 0;
	
	// Обходим верхний уровень выборки - документ-источник.
	Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ДокументовПорции = Выборка.Количество();
	
	Пока Выборка.Следующий() Цикл
		ТекущийДокумент = Выборка.Ссылка;
		ВыборкаНабора   = Выборка.Выбрать();
		Попытка
			ЗаполнитьЗаписиДвиженияТоваровДокумента(ТекущийДокумент, ВыборкаНабора);
			Обработано = Обработано + 1;
		Исключение
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось заполнить последовательность движений товаров для документа %1 по причине %2'"), 
					ТекущийДокумент, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				ТекущийДокумент.Метаданные(), ТекущийДокумент, ТекстСообщения);
				
			КоличествоОшибок = КоличествоОшибок + 1;
		КонецПопытки;
	КонецЦикла;
	
	Если Обработано = 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Процедуре ""ЗаполнитьПоследовательностьДвиженияТоваров"" не удалось обработать некоторые документы (пропущены): %1'"), 
				КоличествоОшибок);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Процедура ""ЗаполнитьПоследовательностьДвиженияТоваров"" обработала очередную порцию документов: %1'"),
		ДокументовПорции);
		
	ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация, , , ТекстСообщения);
КонецПроцедуры

// Заполняет данными записи последовательности документов движения товаров.
//
Процедура ЗаполнитьЗаписиДвиженияТоваровДокумента(Знач Ссылка, Знач ВыборкаНабора)
	
	Блокировка = Новый БлокировкаДанных;
	
	ЭлементБлокировки = Блокировка.Добавить( Ссылка.Метаданные().ПолноеИмя() );
	ЭлементБлокировки.УстановитьЗначение("Ссылка", Ссылка);
	
	ЭлементБлокировки = Блокировка.Добавить("Последовательность._ДемоДвижениеТоваров.НаборЗаписей");
	ЭлементБлокировки.УстановитьЗначение("Регистратор", Ссылка);
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		
		ДокументОбъект = Ссылка.ПолучитьОбъект();
		Если ДокументОбъект <> Неопределено Тогда
			// Документ не удален
			
			Набор = Последовательности._ДемоДвижениеТоваров.СоздатьНаборЗаписей();
			Набор.Отбор.Регистратор.Установить(Ссылка);
			Пока ВыборкаНабора.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(Набор.Добавить(), ВыборкаНабора);
			КонецЦикла;
			Набор.Записать(Истина);
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
		
КонецПроцедуры

// Тестовый обработчик отложенного обновления для демонстрации нештатной ситуации.
//
Процедура ОтложенныйОбработчикСОшибкой(Параметры) Экспорт
	
	ИмитироватьОшибку = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ОбновлениеИБ", "ИмитироватьОшибкуПриОтложенномОбновлении", Ложь);
	Если Не ИмитироватьОшибку Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Параметры.Свойство("КоличествоЗапусков") Тогда
		Параметры.Вставить("КоличествоЗапусков", 1);
	Иначе
		Параметры.КоличествоЗапусков = Параметры.КоличествоЗапусков + 1;
	КонецЕсли;
	
	Если Параметры.КоличествоЗапусков = 3 Тогда
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ОбновлениеИБ", "ИмитироватьОшибкуПриОтложенномОбновлении", Ложь);
	КонецЕсли;
	ВызватьИсключение НСтр("ru = 'Процедура ТестированиеОтложенногоОбновления завершилась с ошибкой.'");
	
КонецПроцедуры

// Пример перехода с конфигурации с именем "БиблиотекаСтандартныхПодсистемДемоБазовая".
// 
Процедура ПерейтиСБазовойВерсииНаПРОФ() Экспорт
	
	ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация,,,
		НСтр("ru = 'Выполнен обработчик перехода ПерейтиСБазовойВерсииНаПРОФ'", Метаданные.ОсновнойЯзык.КодЯзыка));
	
КонецПроцедуры

// Вызывается при переходе на версию конфигурации 2.3.1.5.
Процедура ОбновитьПредопределенныйВидКонтактнойИнформации() Экспорт
	
	// Добавление нового предопределенного вида контактной информации Skype.
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Skype);
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации._ДемоSkypeКонтрагенты;
	ПараметрыВида.Подсказка = НСтр("ru='Skype'");
	ПараметрыВида.Порядок = 3;
	ПараметрыВида.МожноИзменятьСпособРедактирования = Ложь;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
КонецПроцедуры

// [2.3.1.10] Сбрасывает пользовательские настройки отчетов.
Процедура СброситьНастройкиОтчетов() Экспорт
	
	ВариантыОтчетов.СброситьПользовательскиеНастройки(Метаданные.Отчеты._ДемоДинамикаИзмененийФайлов);
	
КонецПроцедуры

// Выполняется на версию 2.3.1.19. Актуализирует признак использования
// видов контактной информации справочника КонтактныхЛицПартнеров.
//
Процедура ОбновитьИспользованиеКонтактнойИнформацииКонтактныхЛицПартнеров() Экспорт
	
	// Начальная инициализация новой константы
	Константы._ДемоИспользоватьКонтактныеЛицаПартнеров.Установить(Истина);
	
	КонтактныеЛицПартнеров = Справочники.ВидыКонтактнойИнформации.Справочник_ДемоКонтактныеЛицаПартнеров.ПолучитьОбъект();
	КонтактныеЛицПартнеров.Используется = ПолучитьФункциональнуюОпцию("_ДемоИспользоватьКонтактныеЛицаПартнеров");
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(КонтактныеЛицПартнеров);
	
КонецПроцедуры

// Выполняется на версию 2.3.1.21. Актуализирует признак использования
// наборов свойств справочника Внешние пользователи.
//
Процедура ОбновитьИспользованиеНаборовСвойствВнешнихПользователей() Экспорт
	
	ПараметрыНабора = УправлениеСвойствами.СтруктураПараметровНабораСвойств();
	ПараметрыНабора.Используется = ПолучитьФункциональнуюОпцию("ИспользоватьВнешнихПользователей");
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Справочник_ВнешниеПользователи", ПараметрыНабора);
	
КонецПроцедуры

// Обновляет нумерацию видов контактной информации контрагентов
Процедура ОбновитьПорядокВидовКонтактнойИнформацииКонтрагентов() Экспорт
	
	ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации._ДемоАдресКонтрагента.ПолучитьОбъект();
	ВидКонтактнойИнформации.РеквизитДопУпорядочивания = 1;
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(ВидКонтактнойИнформации);
	
	ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации._ДемоEmailКонтрагента.ПолучитьОбъект();
	ВидКонтактнойИнформации.РеквизитДопУпорядочивания = 2;
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(ВидКонтактнойИнформации);
	
	ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации._ДемоSkypeКонтрагенты.ПолучитьОбъект();
	ВидКонтактнойИнформации.РеквизитДопУпорядочивания = 3;
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(ВидКонтактнойИнформации);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВидыКонтактнойИнформации.Ссылка
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|ГДЕ
	|	НЕ ВидыКонтактнойИнформации.Предопределенный
	|	И ВидыКонтактнойИнформации.Родитель = &Родитель";
	
	Запрос.УстановитьПараметр("Родитель", Справочники.ВидыКонтактнойИнформации.Справочник_ДемоКонтрагенты);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ВидКонтактнойИнформации = Выборка.Ссылка.ПолучитьОбъект();
		ВидКонтактнойИнформации.РеквизитДопУпорядочивания = 0;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ВидКонтактнойИнформации,, Истина);
		
	КонецЦикла;
	
КонецПроцедуры

// Обновляет нумерацию видов контактной информации контрагентов
Процедура УстановитьНазначенияРолейИсполнителей() Экспорт
	
	ЭлементСправочника = Справочники.РолиИсполнителей.Выбрать();
	Пока ЭлементСправочника.Следующий() Цикл
		Если ЭлементСправочника.Назначение.Количество() = 0 Тогда
			РольОбъект = ЭлементСправочника.ПолучитьОбъект();
			РольОбъект.Назначение.Добавить().ТипПользователей = Справочники.Пользователи.ПустаяСсылка();
			Если  ЭлементСправочника.Ссылка = Справочники.РолиИсполнителей._ДемоРуководительКомпании Тогда
				РольОбъект.Назначение.Добавить().ТипПользователей = Справочники._ДемоПартнеры.ПустаяСсылка();
				РольОбъект.Назначение.Добавить().ТипПользователей = Справочники._ДемоКонтактныеЛицаПартнеров.ПустаяСсылка();
			КонецЕсли;
			РольОбъект.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет поле ВидДляСписка у табличных частей контактной информации
Процедура ЗаполнитьКонтактнуюИнформациюДляСписков(Параметры) Экспорт
	
	УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформациюДляСписковОтложенно(Параметры);
	
КонецПроцедуры

Процедура ОбновитьНаборыЗначенийДоступаЗаданийСРолевойАдресацией(Параметры) Экспорт
	
	БизнесПроцесс = Метаданные.БизнесПроцессы._ДемоЗаданиеСРолевойАдресацией;
	ИмяПроцедуры = "_ДемоОбновлениеИнформационнойБазыБСП.ОбновитьНаборыЗначенийДоступаЗаданийСРолевойАдресацией";
	
	БизнесПроцессыИЗадачиСервер.НачатьОбновлениеПорцииНаборовЗначенийДоступа(Параметры, БизнесПроцесс, ИмяПроцедуры, 1000);
	Если Параметры.ОбработкаЗавершена Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЗаданиеСсылка Из Параметры.ОбъектыКОбработке Цикл
		
		Попытка
			ОбновитьНаборыЗначенийДоступаЗадания(ЗаданиеСсылка);
			Параметры.ОбъектовОбработано = Параметры.ОбъектовОбработано + 1;
		Исключение
			// Если не удалось обработать какой-либо объект, в следующий раз повторим попытку снова.
			Параметры.ПроблемныеОбъекты.Добавить(ЗаданиеСсылка);
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось обновить права доступа для ""%1"" в обработчике ""%2"" по причине:
					|%3'"), 
					ЗаданиеСсылка, ИмяПроцедуры, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				БизнесПроцесс, ЗаданиеСсылка, ТекстСообщения);
		КонецПопытки;
		
	КонецЦикла;
	
	БизнесПроцессыИЗадачиСервер.ЗавершитьОбновлениеПорцииНаборовЗначенийДоступа(Параметры);
	
КонецПроцедуры	

Процедура ОбновитьКонтактнуюИнформациюЗаказовПокупателя(Параметры) Экспорт
	
	// Расчет общего количества обрабатываемых объектов.
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Количество(_ДемоЗаказПокупателя.Ссылка) КАК Количество
		|ИЗ
		|	Документ._ДемоЗаказПокупателя КАК _ДемоЗаказПокупателя
		|ГДЕ
		|	((ВЫРАЗИТЬ(_ДемоЗаказПокупателя.АдресДоставки КАК СТРОКА(100))) <> """"
		|				И _ДемоЗаказПокупателя.АдресДоставкиСтрокой = """"
		|			ИЛИ (ВЫРАЗИТЬ(_ДемоЗаказПокупателя.ЭлектроннаяПочта КАК СТРОКА(100))) <> """"
		|				И _ДемоЗаказПокупателя.ЭлектроннаяПочтаСтрокой = """")";
		
		РезультатЗапроса = Запрос.Выполнить().Выгрузить();
		Параметры.ПрогрессВыполнения.ВсегоОбъектов = РезультатЗапроса[0].Количество;
	КонецЕсли;
	
	// Выбрать все заказы покупателя с неинициализированным значением нового реквизита.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 50
	|	_ДемоЗаказПокупателя.Ссылка КАК Ссылка
	|ИЗ
	|	Документ._ДемоЗаказПокупателя КАК _ДемоЗаказПокупателя
	|ГДЕ
	|	((ВЫРАЗИТЬ(_ДемоЗаказПокупателя.АдресДоставки КАК СТРОКА(100))) <> """"
	|				И _ДемоЗаказПокупателя.АдресДоставкиСтрокой = """"
	|			ИЛИ (ВЫРАЗИТЬ(_ДемоЗаказПокупателя.ЭлектроннаяПочта КАК СТРОКА(100))) <> """"
	|				И _ДемоЗаказПокупателя.ЭлектроннаяПочтаСтрокой = """")
	|
	|УПОРЯДОЧИТЬ ПО
	|	_ДемоЗаказПокупателя.Дата УБЫВ";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Если РезультатЗапроса.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	Параметры.ОбработкаЗавершена = Ложь;
	
	ПроблемныхОбъектов = 0;
	ОбъектовОбработано = 0;
	
	Для Каждого ЗаказПокупателя Из РезультатЗапроса Цикл
		
		Попытка
			ДокументОбъект = ЗаказПокупателя.Ссылка.ПолучитьОбъект();
			ДокументОбъект.АдресДоставкиСтрокой = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(ДокументОбъект.АдресДоставки);
			ДокументОбъект.ЭлектроннаяПочтаСтрокой = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(ДокументОбъект.ЭлектроннаяПочта);
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			ОбъектовОбработано = ОбъектовОбработано + 1;
		Исключение
			// Если не удалось обработать какой-либо заказ, повторяем попытку снова.
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось обработать заказ покупателя: %1 по причине:
					|%2'"), 
					ЗаказПокупателя.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Документы._ДемоЗаказПокупателя, ЗаказПокупателя.Ссылка, ТекстСообщения);
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбъектовОбработано;
	Если ОбъектовОбработано = 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Процедуре ОбновитьКонтактнуюИнформациюЗаказовПокупателя не удалось обработать некоторые заказы покупателей (пропущены): %1'"), 
				ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	Иначе
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,
			Метаданные.Документы._ДемоЗаказПокупателя,,
				НСтр("ru = 'Процедура ОбновитьКонтактнуюИнформациюЗаказовПокупателя обработала очередную порцию заказов покупателей: 50'"));
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьНаборыЗначенийДоступаЗадания(ЗаданиеСсылка) 
	
	НачатьТранзакцию();
	Попытка
	
		// Блокируем объект от изменения другими сеансами.
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("БизнесПроцесс._ДемоЗаданиеСРолевойАдресацией");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ЗаданиеСсылка);
		Блокировка.Заблокировать();
		
		ЗаданиеОбъект = ЗаданиеСсылка.ПолучитьОбъект();
		// Если объект ранее был удален или обработан другими сеансами, пропускаем его.
		Если ЗаданиеОбъект = Неопределено Тогда 
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		УправлениеДоступом.ОбновитьНаборыЗначенийДоступа(ЗаданиеОбъект);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
		
КонецПроцедуры

// Включает константу _ДемоОграничиватьДоступПоПартнерам, если RLS включен и
// внешние пользователи используются.
//
Процедура ВключитьОграничениеПоПартнерамПриИспользованииВнешнихПользователей() Экспорт
	
	Если Константы.ОграничиватьДоступНаУровнеЗаписей.Получить()
		И Константы.ИспользоватьВнешнихПользователей.Получить()
		И Не Константы._ДемоОграничиватьДоступПоПартнерам.Получить() Тогда
		
		Константы._ДемоОграничиватьДоступПоПартнерам.Установить(Истина);
	КонецЕсли;
	
КонецПроцедуры

// Выполняется для обновления видов контактной информации для версии БСП 2.3.2.4 и выше.
// Для юридического адреса организации устанавливает флаг ХранитьИсториюИзменений.
// Для сохранения обратной совместимости всех элементов с видом контактной информации Другое
// свойство МногострочноеПоле устанавливается в Истина.
//
Процедура НастроитьИсториюКонтактнойИнформацииИМногострочноеПоле() Экспорт
	
	ЮридическийАдресОрганизации = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации.ПолучитьОбъект();
	ЮридическийАдресОрганизации .ХранитьИсториюИзменений = Истина;
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(ЮридическийАдресОрганизации );
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыКонтактнойИнформации.Ссылка
		|ИЗ
		|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
		|ГДЕ
		|	ВидыКонтактнойИнформации.Тип = &Тип";
	
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Другое);
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Пока РезультатЗапроса.Следующий() Цикл
		ВидКонтактнойИнформации = РезультатЗапроса.Ссылка.ПолучитьОбъект();
		ВидКонтактнойИнформации.МногострочноеПоле = Истина;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ВидКонтактнойИнформации);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти