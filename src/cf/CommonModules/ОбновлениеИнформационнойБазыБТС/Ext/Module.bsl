////////////////////////////////////////////////////////////////////////////////
// ОбновлениеИнформационнойБазыБТС: Библиотека технологии сервиса (БТС).
// Процедуры и функции БТС.
//
////////////////////////////////////////////////////////////////////////////////


#Область ПрограммныйИнтерфейс

// См. описание в общем модуле ОбновлениеИнформационнойБазыБСП.
//
Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	Описание.Имя    = "БиблиотекаТехнологииСервиса";
	Описание.Версия = ТехнологияСервиса.ВерсияБиблиотеки();
	
	// Используются служебные события и обработчики служебных событий
	Описание.ДобавлятьСлужебныеСобытия            = Истина;
	Описание.ДобавлятьОбработчикиСлужебныхСобытий = Истина;
	
	// Требуется библиотека стандартных подсистем.
	Описание.ТребуемыеПодсистемы.Добавить("СтандартныеПодсистемы");
	
КонецПроцедуры

// Доопределяет события, к которым можно будет добавить обработчики
// через процедуру ПриДобавленииОбработчиковСлужебныхСобытий.
//
// Параметры:
//  КлиентскиеСобытия – Массив, где значения типа Строка - полное имя события.
//  СерверныеСобытия  – Массив, где значения типа Строка - полное имя события.
//
// Для упрощения поддержки, рекомендуется делать вызов такой же
// процедуры в общем модуле библиотеки.
//
// Пример использования в общем модуле библиотеки:
//
//	// Переопределяет стандартное предупреждение открытием произвольной формы активных пользователей.
//	//
//	// Параметры:
//	//  ИмяФормы - Строка (возвращаемое значение).
//	//
//	// Синтаксис:
//	// Процедура ПриОткрытииФормыАктивныхПользователей(ИмяФормы) Экспорт
//	//
//	СерверныеСобытия.Добавить(
//		"СтандартныеПодсистемы.БазоваяФункциональность\ПриОпределенииФормыАктивныхПользователей");
//
// Комментарий можно копировать при создании нового обработчика.
// Раздел "Синтаксис:" используется для создания новой процедуры обработчика.
//
Процедура ПриДобавленииСлужебныхСобытий(КлиентскиеСобытия, СерверныеСобытия) Экспорт
	
	// Обязательные подсистемы
	ТехнологияСервиса.ПриДобавленииСлужебныхСобытий(КлиентскиеСобытия, СерверныеСобытия);
	ВыгрузкаЗагрузкаДанныхСлужебныйСобытия.ПриДобавленииСлужебныхСобытий(КлиентскиеСобытия, СерверныеСобытия);
	АвтономнаяРаботаСлужебный.ПриДобавленииСлужебныхСобытий(КлиентскиеСобытия, СерверныеСобытия);
	
	// Опциональные подситемы
	
	Если ТехнологияСервисаИнтеграцияСБСП.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.ФайловыеФункцииВМоделиСервиса") Тогда
		МодульФайловыеФункцииСлужебныйВМоделиСервисаБТС = ТехнологияСервисаИнтеграцияСБСП.ОбщийМодуль("ФайловыеФункцииСлужебныйВМоделиСервисаБТС");
		МодульФайловыеФункцииСлужебныйВМоделиСервисаБТС.ПриДобавленииСлужебныхСобытий(КлиентскиеСобытия, СерверныеСобытия);
	КонецЕсли;
	
	Если ТехнологияСервисаИнтеграцияСБСП.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.ПодсистемыЦККВМоделиСервиса") Тогда
		МодульИнцидентыЦККСлужебный = ТехнологияСервисаИнтеграцияСБСП.ОбщийМодуль("ИнцидентыЦККСлужебный");
		МодульИнцидентыЦККСлужебный.ПриДобавленииСлужебныхСобытий(КлиентскиеСобытия, СерверныеСобытия);
	КонецЕсли;
	
	
КонецПроцедуры

// См. описание этой же процедуры в модуле СтандартныеПодсистемыСервер.
Процедура ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики) Экспорт
	
	// СЕРВЕРНЫЕ ОБРАБОТЧИКИ.
	
	ТехнологияСервиса.ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики);
	
	Если ТехнологияСервисаИнтеграцияСБСП.ПодсистемаСуществует("ТехнологияСервиса.ИнформационныйЦентр") Тогда
		
		МодульИнформационныйЦентрСлужебный = ТехнологияСервисаИнтеграцияСБСП.ОбщийМодуль("ИнформационныйЦентрСлужебный");
		МодульИнформационныйЦентрСлужебный.ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики);
		
	КонецЕсли;
	
	Если ТехнологияСервисаИнтеграцияСБСП.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.ПодсистемыЦККВМоделиСервиса") Тогда
		
		МодульИнцидентыСлужебный = ТехнологияСервисаИнтеграцияСБСП.ОбщийМодуль("ИнцидентыЦККСлужебный");
		МодульИнцидентыСлужебный.ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики);
		
	КонецЕсли;
	
	Если ТехнологияСервисаИнтеграцияСБСП.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.БазоваяФункциональностьВМоделиСервиса") Тогда
		
		МодульРаботаВМоделиСервисаБТС = ТехнологияСервисаИнтеграцияСБСП.ОбщийМодуль("РаботаВМоделиСервисаБТС");
		МодульРаботаВМоделиСервисаБТС.ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики);
		
		МодульРаботаВБезопасномРежимеСлужебныйВМоделиСервиса = ТехнологияСервисаИнтеграцияСБСП.ОбщийМодуль("РаботаВБезопасномРежимеСлужебныйВМоделиСервиса");
		МодульРаботаВБезопасномРежимеСлужебныйВМоделиСервиса.ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики);
		
	КонецЕсли;
	
	Если ТехнологияСервисаИнтеграцияСБСП.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.ДополнительныеОтчетыИОбработкиВМоделиСервиса") Тогда
		
		МодульДополнительныеОтчетыИОбработкиВМоделиСервиса = ТехнологияСервисаИнтеграцияСБСП.ОбщийМодуль("ДополнительныеОтчетыИОбработкиВМоделиСервиса");
		МодульДополнительныеОтчетыИОбработкиВМоделиСервиса.ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики);
		
		МодульДополнительныеОтчетыИОбработкиВАвтономномРежиме = ТехнологияСервисаИнтеграцияСБСП.ОбщийМодуль("ДополнительныеОтчетыИОбработкиВАвтономномРежиме");
		МодульДополнительныеОтчетыИОбработкиВАвтономномРежиме.ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики);
		
	КонецЕсли;
	
	Если ТехнологияСервисаИнтеграцияСБСП.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса") Тогда
		
		МодульОбменДаннымиВМоделиСервиса = ТехнологияСервисаИнтеграцияСБСП.ОбщийМодуль("ОбменДаннымиВМоделиСервиса");
		МодульОбменДаннымиВМоделиСервиса.ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики);
		
	КонецЕсли;
	
	Если ТехнологияСервисаИнтеграцияСБСП.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.ОбновлениеВерсииИБВМоделиСервиса") Тогда
		
		МодульОбновлениеИнформационнойБазыСлужебныйВМоделиСервисаБТС = ТехнологияСервисаИнтеграцияСБСП.ОбщийМодуль("ОбновлениеИнформационнойБазыСлужебныйВМоделиСервисаБТС");
		МодульОбновлениеИнформационнойБазыСлужебныйВМоделиСервисаБТС.ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики);
		
	КонецЕсли;
	
	Если ТехнологияСервисаИнтеграцияСБСП.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.ПользователиВМоделиСервиса") Тогда
		
		МодульПользователиСлужебныйВМоделиСервисаБТС = ТехнологияСервисаИнтеграцияСБСП.ОбщийМодуль("ПользователиСлужебныйВМоделиСервисаБТС");
		МодульПользователиСлужебныйВМоделиСервисаБТС.ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики);
		
	КонецЕсли;
	
	Если ТехнологияСервисаИнтеграцияСБСП.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.УдаленноеАдминистрированиеВМоделиСервиса") Тогда
		
		МодульУдаленноеАдминистрированиеБТССлужебный= ТехнологияСервисаИнтеграцияСБСП.ОбщийМодуль("УдаленноеАдминистрированиеБТССлужебный");
		МодульУдаленноеАдминистрированиеБТССлужебный.ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики);
		
	КонецЕсли;
	
	Если ТехнологияСервисаИнтеграцияСБСП.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.УправлениеДоступомВМоделиСервиса") Тогда
		
		МодульУправлениеДоступомСлужебныйВМоделиСервисаБТС = ТехнологияСервисаИнтеграцияСБСП.ОбщийМодуль("УправлениеДоступомСлужебныйВМоделиСервисаБТС");
		МодульУправлениеДоступомСлужебныйВМоделиСервисаБТС.ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики);
		
	КонецЕсли;
	
	Если ТехнологияСервисаИнтеграцияСБСП.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.ФайловыеФункцииВМоделиСервиса") Тогда
		
		МодульФайловыеФункцииСлужебныйВМоделиСервисаБТС = ТехнологияСервисаИнтеграцияСБСП.ОбщийМодуль("ФайловыеФункцииСлужебныйВМоделиСервисаБТС");
		МодульФайловыеФункцииСлужебныйВМоделиСервисаБТС.ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики);
		
	КонецЕсли;
	
	Если ТехнологияСервисаИнтеграцияСБСП.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.РасширенияВМоделиСервиса") Тогда
		
		МодульРасширенияВМоделиСервиса = ТехнологияСервисаИнтеграцияСБСП.ОбщийМодуль("РасширенияВМоделиСервиса");
		МодульРасширенияВМоделиСервиса.ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики);
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - описание полей 
//                                  см. в процедуре ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.0.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_0_0_0";
//  Обработчик.МонопольныйРежим    = Ложь;
//  Обработчик.Опциональный        = Истина;
// 
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	// Обязательные подсистемы
	ТехнологияСервиса.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	ОбменДаннымиВМоделиСервиса.ПриДобавленииОбработчиковОбновления(Обработчики);
	// Опциональные подсистемы
	
	Если ТехнологияСервисаИнтеграцияСБСП.ПодсистемаСуществует("ТехнологияСервиса.ВыгрузкаЗагрузкаДанных") Тогда
		МодульВыгрузкаЗагрузкаДанныхСлужебный = ТехнологияСервисаИнтеграцияСБСП.ОбщийМодуль("ВыгрузкаЗагрузкаДанныхСлужебный");
		МодульВыгрузкаЗагрузкаДанныхСлужебный.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	
	Если ТехнологияСервисаИнтеграцияСБСП.ПодсистемаСуществует("ТехнологияСервиса.ИнформационныйЦентр") Тогда
		МодульИнформационныйЦентрСлужебный = ТехнологияСервисаИнтеграцияСБСП.ОбщийМодуль("ИнформационныйЦентрСлужебный");
		МодульИнформационныйЦентрСлужебный.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	
	Если ТехнологияСервисаИнтеграцияСБСП.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.ПодсистемыЦККВМоделиСервиса") Тогда
		МодульИнцидентыЦККСлужебный = ТехнологияСервисаИнтеграцияСБСП.ОбщийМодуль("ИнцидентыЦККСлужебный");
		МодульИнцидентыЦККСлужебный.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	
	Если ТехнологияСервисаИнтеграцияСБСП.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.БазоваяФункциональностьВМоделиСервиса") Тогда
		МодульРаботаВМоделиСервисаБТС = ТехнологияСервисаИнтеграцияСБСП.ОбщийМодуль("РаботаВМоделиСервисаБТС");
		МодульРаботаВМоделиСервисаБТС.ПриДобавленииОбработчиковОбновления(Обработчики);
	КонецЕсли;
	
	Если ТехнологияСервисаИнтеграцияСБСП.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.ДополнительныеОтчетыИОбработкиВМоделиСервиса") Тогда
		МодульДополнительныеОтчетыИОбработкиВМоделиСервиса = ТехнологияСервисаИнтеграцияСБСП.ОбщийМодуль("ДополнительныеОтчетыИОбработкиВМоделиСервиса");
		МодульДополнительныеОтчетыИОбработкиВМоделиСервиса.ПриДобавленииОбработчиковОбновления(Обработчики);
	КонецЕсли;
	
	Если ТехнологияСервисаИнтеграцияСБСП.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.ПользователиВМоделиСервиса") Тогда
		МодульПользователиСлужебныйВМоделиСервисаБТС = ТехнологияСервисаИнтеграцияСБСП.ОбщийМодуль("ПользователиСлужебныйВМоделиСервисаБТС");
		МодульПользователиСлужебныйВМоделиСервисаБТС.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	
	Если ТехнологияСервисаИнтеграцияСБСП.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.НастройкаСтандартногоИнтерфейсаOData") Тогда
		Обработки["НастройкаСтандартногоИнтерфейсаOData"].ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	
	Если ТехнологияСервисаИнтеграцияСБСП.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.РасширенияВМоделиСервиса") Тогда
		МодульРасширенияВМоделиСервиса = ТехнологияСервисаИнтеграцияСБСП.ОбщийМодуль("РасширенияВМоделиСервиса");
		МодульРасширенияВМоделиСервиса.ПриДобавленииОбработчиковОбновления(Обработчики);
	КонецЕсли;
	
КонецПроцедуры

// Вызывается перед процедурами-обработчиками обновления данных ИБ.
//
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
	
	
КонецПроцедуры

// Вызывается после завершения обновления данных ИБ.
// 
// Параметры:
//   ПредыдущаяВерсия       - Строка - версия до обновления. "0.0.0.0" для "пустой" ИБ.
//   ТекущаяВерсия          - Строка - версия после обновления.
//   ВыполненныеОбработчики - ДеревоЗначений - список выполненных процедур-обработчиков обновления,
//                                             сгруппированных по номеру версии.
//   ВыводитьОписаниеОбновлений - Булево - (возвращаемое значение) если установить Истина,
//                                то будет вывена форма с описанием обновлений. По умолчанию, Истина.
//   МонопольныйРежим           - Булево - Истина, если обновление выполнялось в монопольном режиме.
//
// Пример обхода выполненных обработчиков обновления:
//
//	Для Каждого Версия Из ВыполненныеОбработчики.Строки Цикл
//		
//		Если Версия.Версия = "*" Тогда
//			// Обработчик, который может выполнятся при каждой смене версии.
//		Иначе
//			// Обработчик, который выполняется для определенной версии.
//		КонецЕсли;
//		
//		Для Каждого Обработчик Из Версия.Строки Цикл
//			...
//		КонецЦикла;
//		
//	КонецЦикла;
//
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
		Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
	
	
	
КонецПроцедуры

// Вызывается при подготовке табличного документа с описанием изменений в программе.
//
// Параметры:
//   Макет - ТабличныйДокумент - описание обновления всех библиотек и конфигурации.
//           Макет можно дополнить или заменить.
//           См. также общий макет ОписаниеИзмененийСистемы.
//
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
	
	
	
КонецПроцедуры

// Добавляет в список процедуры-обработчики перехода с другой программы (с другим именем конфигурации).
// Например, для перехода между разными, но родственными конфигурациями: базовая -> проф -> корп.
// Вызывается перед началом обновления данных ИБ.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - с колонками:
//    * ПредыдущееИмяКонфигурации - Строка - имя конфигурации, с которой выполняется переход;
//    * Процедура                 - Строка - полное имя процедуры-обработчика перехода с программы ПредыдущееИмяКонфигурации. 
//                                  Например, "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику"
//                                  Обязательно должна быть экспортной.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.ПредыдущееИмяКонфигурации  = "УправлениеТорговлей";
//  Обработчик.Процедура                  = "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику";
//
Процедура ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики) Экспорт
	
	
	
КонецПроцедуры

Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	РежимОбновленияДанных = "ОбновлениеВерсии";
	
КонецПроцедуры 

Процедура ПриЗавершенииПереходаСДругойПрограммы(Знач ПредыдущееИмяКонфигурации, Знач ПредыдущаяВерсияКонфигурации, Параметры) Экспорт
КонецПроцедуры

#КонецОбласти
