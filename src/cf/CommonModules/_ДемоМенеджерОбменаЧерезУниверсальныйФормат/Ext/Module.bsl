// Конвертация БСП2.3.2 от 22.01.2016 15:10:55
#Область ПроцедурыКонвертации
Процедура ПередКонвертацией(КомпонентыОбмена) Экспорт
	
КонецПроцедуры

Процедура ПослеКонвертации(КомпонентыОбмена) Экспорт
	
КонецПроцедуры

Процедура ПередОтложеннымЗаполнением(КомпонентыОбмена) Экспорт
	
КонецПроцедуры

#КонецОбласти
#Область ПОД
// Заполняет таблицу правил обработки данных.
//
// Параметры:
//  НаправлениеОбмена - строка ("Отправка" либо "Получение").
//  ПравилаОбработкиДанных - таблица значений, в которую добавляются правила. 
Процедура ЗаполнитьПравилаОбработкиДанных(НаправлениеОбмена, ПравилаОбработкиДанных) Экспорт
	Если НаправлениеОбмена = "Отправка" Тогда
	Если ПравилаОбработкиДанных.Колонки.Найти("ОчисткаДанных") = Неопределено Тогда
	    ПравилаОбработкиДанных.Колонки.Добавить("ОчисткаДанных");
	КонецЕсли;
		ДобавитьПОД_Документ_ПоступлениеТоваров_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Валюты_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Контрагенты_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Номенклатура_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Организации_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Склады_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтраныМира_Отправка(ПравилаОбработкиДанных);
	ИначеЕсли НаправлениеОбмена = "Получение" Тогда
		ДобавитьПОД_Документ_ПоступлениеТоваров_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Валюты_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Контрагенты_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_КонтрагентыГруппа_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Номенклатура_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_НоменклатураГруппа_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Организации_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Склады_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтраныМира_Получение(ПравилаОбработкиДанных);
	КонецЕсли;
КонецПроцедуры

#Область Отправка
#Область Документ_ПоступлениеТоваров_Отправка
Процедура ДобавитьПОД_Документ_ПоступлениеТоваров_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ПоступлениеТоваров_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы._ДемоПоступлениеТоваров;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПоступлениеТоваров_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Валюты_Отправка
Процедура ДобавитьПОД_Справочник_Валюты_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Валюты_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Валюты;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Валюты");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Контрагенты_Отправка
Процедура ДобавитьПОД_Справочник_Контрагенты_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Контрагенты_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники._ДемоКонтрагенты;
	ПравилоОбработки.ПриОбработке = "ПОД_Справочник_Контрагенты_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Контрагенты");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_КонтрагентыГруппа");
КонецПроцедуры

Процедура ПОД_Справочник_Контрагенты_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_Контрагенты = Не ДанныеИБ.ЭтоГруппа;
	ИспользованиеПКО.Справочник_КонтрагентыГруппа    = ДанныеИБ.ЭтоГруппа;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Номенклатура_Отправка
Процедура ДобавитьПОД_Справочник_Номенклатура_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Номенклатура_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники._ДемоНоменклатура;
	ПравилоОбработки.ПриОбработке = "ПОД_Справочник_Номенклатура_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Номенклатура_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_НоменклатураГруппа");
КонецПроцедуры

Процедура ПОД_Справочник_Номенклатура_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_Номенклатура_Отправка = Не ДанныеИБ.ЭтоГруппа;
	ИспользованиеПКО.Справочник_НоменклатураГруппа    = ДанныеИБ.ЭтоГруппа;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Организации_Отправка
Процедура ДобавитьПОД_Справочник_Организации_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Организации_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Организации;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Организации_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Склады_Отправка
Процедура ДобавитьПОД_Справочник_Склады_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Склады_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники._ДемоМестаХранения;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Склады_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтраныМира_Отправка
Процедура ДобавитьПОД_Справочник_СтраныМира_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_СтраныМира_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.СтраныМира;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтраныМира");
КонецПроцедуры
#КонецОбласти
#КонецОбласти
#Область Получение
#Область Документ_ПоступлениеТоваров_Получение
Процедура ДобавитьПОД_Документ_ПоступлениеТоваров_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ПоступлениеТоваров_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.ПоступлениеТоваровУслуг";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПоступлениеТоваров_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Валюты_Получение
Процедура ДобавитьПОД_Справочник_Валюты_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Валюты_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.Валюты";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Валюты");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Контрагенты_Получение
Процедура ДобавитьПОД_Справочник_Контрагенты_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Контрагенты_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.Контрагенты";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Контрагенты");
КонецПроцедуры
#КонецОбласти
#Область Справочник_КонтрагентыГруппа_Получение
Процедура ДобавитьПОД_Справочник_КонтрагентыГруппа_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_КонтрагентыГруппа_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.КонтрагентыГруппа";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_КонтрагентыГруппа");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Номенклатура_Получение
Процедура ДобавитьПОД_Справочник_Номенклатура_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Номенклатура_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.Номенклатура";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Номенклатура_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_НоменклатураГруппа_Получение
Процедура ДобавитьПОД_Справочник_НоменклатураГруппа_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_НоменклатураГруппа_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.НоменклатураГруппа";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_НоменклатураГруппа");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Организации_Получение
Процедура ДобавитьПОД_Справочник_Организации_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Организации_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.Организации";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Организации_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Склады_Получение
Процедура ДобавитьПОД_Справочник_Склады_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Склады_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.Склады";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Склады_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтраныМира_Получение
Процедура ДобавитьПОД_Справочник_СтраныМира_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_СтраныМира_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.СтраныМира";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтраныМира");
КонецПроцедуры
#КонецОбласти
#КонецОбласти

#КонецОбласти
#Область ПКО
// Заполняет таблицу правил конвертации объектов.
//
// Параметры:
//  НаправлениеОбмена - строка ("Отправка" либо "Получение").
//  ПравилаКонвертации - таблица значений, в которую добавляются правила. 
Процедура ЗаполнитьПравилаКонвертацииОбъектов(НаправлениеОбмена, ПравилаКонвертации) Экспорт
	Если НаправлениеОбмена = "Отправка" Тогда
		ДобавитьПКО_Документ_ПоступлениеТоваров_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ЕдиницыИзмерения_ИзСтруктуры(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Номенклатура_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Организации_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Склады_Отправка(ПравилаКонвертации);
	ИначеЕсли НаправлениеОбмена = "Получение" Тогда
		ДобавитьПКО_Документ_ПоступлениеТоваров_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Номенклатура_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Организации_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Склады_Получение(ПравилаКонвертации);
	КонецЕсли;
	ДобавитьПКО_Справочник_Валюты(ПравилаКонвертации);
	ДобавитьПКО_Справочник_Договоры(ПравилаКонвертации);
	ДобавитьПКО_Справочник_Контрагенты(ПравилаКонвертации);
	ДобавитьПКО_Справочник_КонтрагентыГруппа(ПравилаКонвертации);
	ДобавитьПКО_Справочник_НоменклатураГруппа(ПравилаКонвертации);
	ДобавитьПКО_Справочник_СтраныМира(ПравилаКонвертации);
КонецПроцедуры

#Область Отправка
#Область Документ_ПоступлениеТоваров_Отправка
Процедура ДобавитьПКО_Документ_ПоступлениеТоваров_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПоступлениеТоваров_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы._ДемоПоступлениеТоваров;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПоступлениеТоваровУслуг";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПоступлениеТоваров_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Договор";
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Договоры";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "МестоХранения";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Валюта";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерГТД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ПоступлениеТоваров_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	ЗаполнитьВалюту(ДанныеXDTO, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);	
	ДанныеXDTO.Вставить("ВидОперации", "ПокупкаУПоставщика");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	_ДемоПоступлениеТоваровТовары.Номенклатура,
	|	_ДемоПоступлениеТоваровТовары.Номенклатура.СтранаПроисхождения КАК СтранаПроисхождения,
	|	_ДемоПоступлениеТоваровТовары.Количество,
	|	_ДемоПоступлениеТоваровТовары.Цена,
	|	ВЫРАЗИТЬ(_ДемоПоступлениеТоваровТовары.Цена * _ДемоПоступлениеТоваровТовары.Количество КАК ЧИСЛО(15, 2)) КАК Сумма
	|ИЗ
	|	Документ._ДемоПоступлениеТоваров.Товары КАК _ДемоПоступлениеТоваровТовары
	|ГДЕ
	|	_ДемоПоступлениеТоваровТовары.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	
	// Товары
	
	Товары = РезультатЗапроса.Выгрузить();
	Если Товары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
		
	Товары.Колонки.Добавить("СтавкаНДС");
	Товары.Колонки.Добавить("НомерГТД");
	Товары.Колонки.Добавить("ЕдиницаИзмерения");
	
	ТекСтавкаНДС = ПолучитьСтавкуНДСДокумента(ДанныеИБ.СтавкаНДС);
	Товары.ЗаполнитьЗначения(ТекСтавкаНДС, "СтавкаНДС");
	Товары.ЗаполнитьЗначения("", "НомерГТД");
	// Единица - штука
	Товары.ЗаполнитьЗначения(Новый Структура("Ссылка, Код", "", "796"), "ЕдиницаИзмерения");
	
	Если Товары.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", Товары);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ЕдиницыИзмерения_ИзСтруктуры
Процедура ДобавитьПКО_Справочник_ЕдиницыИзмерения_ИзСтруктуры(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ЕдиницыИзмерения_ИзСтруктуры";
	ПравилоКонвертации.ОбъектДанных = Неопределено;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ЕдиницыИзмерения";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Код";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Наименование";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры
#КонецОбласти
#Область Справочник_Номенклатура_Отправка
Процедура ДобавитьПКО_Справочник_Номенклатура_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Номенклатура_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники._ДемоНоменклатура;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Номенклатура";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Артикул";
	НоваяСтрока.СвойствоФормата = "Артикул";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "КодВПрограмме";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "НаименованиеПолное";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_НоменклатураГруппа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "АлкогольнаяПродукция";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидАлкогольнойПродукции";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения_ИзСтруктуры";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ИмпортнаяАлкогольнаяПродукция";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ОбъемДАЛ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ПроизводительИмпортер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипНоменклатуры";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("ТипНоменклатуры", "Товар");
	ДанныеXDTO.Вставить("АлкогольнаяПродукция", Ложь);
	ДанныеXDTO.Вставить("ИмпортнаяАлкогольнаяПродукция", Ложь);
	ДанныеXDTO.Вставить("ВидАлкогольнойПродукции", Неопределено);
	ДанныеXDTO.Вставить("ОбъемДАЛ", 0.00);
	ДанныеXDTO.Вставить("ПроизводительИмпортер", Неопределено);
	ДанныеXDTO.Вставить("СтавкаНДС","НДС18");
	
	СтруктураДанныеЕдИзмерения = Новый Структура("Код, Наименование");
	СтруктураДанныеЕдИзмерения.Код = "796";
	СтруктураДанныеЕдИзмерения.Наименование = "шт.";
	ДанныеXDTO.Вставить("ЕдиницаИзмерения", Новый Структура("Значение, ИмяПКО", СтруктураДанныеЕдИзмерения, "Справочник_ЕдиницыИзмерения_ИзСтруктуры"));
КонецПроцедуры
#КонецОбласти
#Область Справочник_Организации_Отправка
Процедура ДобавитьПКО_Справочник_Организации_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Организации_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Организации;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Организации";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Организации_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "_ДемоНаименованиеПолное";
	НоваяСтрока.СвойствоФормата = "НаименованиеПолное";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "_ДемоНаименованиеСокращенное";
	НоваяСтрока.СвойствоФормата = "НаименованиеСокращенное";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Префикс";
	НоваяСтрока.СвойствоФормата = "Префикс";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ЮридическоеФизическоеЛицо";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Справочник_Организации_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() = 1 Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("ЮридическоеФизическоеЛицо", "ЮридическоеЛицо");
	Иначе
		ДанныеXDTO.Вставить("ЮридическоеФизическоеЛицо", "ЮридическоеЛицо");
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Склады_Отправка
Процедура ДобавитьПКО_Справочник_Склады_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Склады_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники._ДемоМестаХранения;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Склады";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Склады_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипСклада";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Справочник_Склады_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() = 1 Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("ТипСклада", "Оптовый");
	Иначе
		ДанныеXDTO.Вставить("ТипСклада", "Оптовый");
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#КонецОбласти
#Область Получение
#Область Документ_ПоступлениеТоваров_Получение
Процедура ДобавитьПКО_Документ_ПоступлениеТоваров_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПоступлениеТоваров_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы._ДемоПоступлениеТоваров;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПоступлениеТоваровУслуг";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ПоступлениеТоваров_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_ПоступлениеТоваров";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Валюта";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Договор";
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Договоры";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "МестоХранения";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ПоступлениеТоваров_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	
	// Товары 
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
	ПравилаЗаполнения.Вставить("Количество",   "Количество");
	ПравилаЗаполнения.Вставить("Цена",         "Цена");
	
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Номенклатура_Получение
Процедура ДобавитьПКО_Справочник_Номенклатура_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Номенклатура_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники._ДемоНоменклатура;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Номенклатура";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Справочник_Номенклатура_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Номенклатура_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Артикул";
	НоваяСтрока.СвойствоФормата = "Артикул";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "КодВПрограмме";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_НоменклатураГруппа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидНоменклатуры";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Код,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("Артикул,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,ЭтоГруппа");
КонецПроцедуры

Процедура ПКО_Справочник_Номенклатура_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ДанныеXDTO.Свойство("ТипНоменклатуры") И ЗначениеЗаполнено(ДанныеXDTO.ТипНоменклатуры) Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ТипНоменклатуры", ДанныеXDTO.ТипНоменклатуры.Значение);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Справочник_Номенклатура_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ТипНоменклатуры = "";
	ПолученныеДанные.ДополнительныеСвойства.Свойство("ТипНоменклатуры", ТипНоменклатуры);
	ВидНоменклатуры = Неопределено;
	Если НЕ (ДанныеИБ <> Неопределено И ЗначениеЗаполнено(ДанныеИБ.ВидНоменклатуры)) Тогда
		Если ЗначениеЗаполнено(ТипНоменклатуры) Тогда
			НаименованиеЭлементаДляОбменаПоУмолчанию = ТипНоменклатуры; 
		Иначе
			НаименованиеЭлементаДляОбменаПоУмолчанию = НСтр("ru = 'Тип номенклатуры не указан'", Метаданные.ОсновнойЯзык.КодЯзыка);; 
		КонецЕсли;
		ВидыНоменклатурыСсылка = Справочники._ДемоВидыНоменклатуры.НайтиПоНаименованию(НаименованиеЭлементаДляОбменаПоУмолчанию);
		Если ЗначениеЗаполнено(ВидыНоменклатурыСсылка) Тогда
			ВидНоменклатуры = ВидыНоменклатурыСсылка;
		Иначе
			ВидыНоменклатурыОбъект = Справочники._ДемоВидыНоменклатуры.СоздатьЭлемент();
			ВидыНоменклатурыОбъект.Наименование = НаименованиеЭлементаДляОбменаПоУмолчанию;
			ВидыНоменклатурыОбъект.Записать();
			ВидНоменклатуры = ВидыНоменклатурыОбъект.Ссылка;
		КонецЕсли;
		ПолученныеДанные.ВидНоменклатуры = ВидНоменклатуры;
	Иначе
		ПолученныеДанные.ВидНоменклатуры = ДанныеИБ.ВидНоменклатуры;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Организации_Получение
Процедура ДобавитьПКО_Справочник_Организации_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Организации_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Организации;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Организации";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "_ДемоНаименованиеПолное";
	НоваяСтрока.СвойствоФормата = "НаименованиеПолное";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "_ДемоНаименованиеСокращенное";
	НоваяСтрока.СвойствоФормата = "НаименованиеСокращенное";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Префикс";
	НоваяСтрока.СвойствоФормата = "Префикс";

	ПравилоКонвертации.ПоляПоиска.Добавить("Префикс,_ДемоИНН,_ДемоКПП,_ДемоНаименованиеПолное");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Склады_Получение
Процедура ДобавитьПКО_Справочник_Склады_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Склады_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники._ДемоМестаХранения;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Склады";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";

	ПравилоКонвертации.ПоляПоиска.Добавить("Код,Наименование,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("Код,ЭтоГруппа");
КонецПроцедуры
#КонецОбласти
#КонецОбласти
#Область ОтправкаИПолучение
#Область Справочник_Валюты
Процедура ДобавитьПКО_Справочник_Валюты(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Валюты";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Валюты;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Валюты";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЗагружаетсяИзИнтернета";
	НоваяСтрока.СвойствоФормата = "ЗагружаетсяИзИнтернета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "Код";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеПолное";
	НоваяСтрока.СвойствоФормата = "НаименованиеПолное";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОсновнаяВалюта";
	НоваяСтрока.СвойствоФормата = "ОсновнаяВалюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПараметрыПрописиНаРусском";
	НоваяСтрока.СвойствоФормата = "ПараметрыПрописиНаРусском";

	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Договоры
Процедура ДобавитьПКО_Справочник_Договоры(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Договоры";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники._ДемоДоговорыКонтрагентов;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Договоры";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Договоры_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаРасчетов";
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Владелец";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаДоговора";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаОкончанияДействия";
	НоваяСтрока.СвойствоФормата = "СрокДействия";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерДоговора";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидДоговора";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "РасчетыВУсловныхЕдиницах";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("ВалютаРасчетов,Владелец,Организация,Наименование");
	ПравилоКонвертации.ПоляПоиска.Добавить("ВалютаРасчетов,Владелец,Организация");
КонецПроцедуры

Процедура ПКО_Справочник_Договоры_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ОрганизацияДоговора = Константы._ДемоОсновнаяОрганизация.Получить();
	Если НЕ ЗначениеЗаполнено(ОрганизацияДоговора) Тогда
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Ссылка ИЗ Справочник.Организации";
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ОрганизацияДоговора = Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Если СтекВыгрузки.Количество() = 1 Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("ВидДоговора", "Прочее");
		ДанныеXDTO.КлючевыеСвойства.Вставить("РасчетыВУсловныхЕдиницах", Ложь);
		ДанныеXDTO.КлючевыеСвойства.Вставить("Организация", Новый Структура("Значение, ИмяПКО", ОрганизацияДоговора, "Справочник_Организации_Отправка"));
	Иначе
		ДанныеXDTO.Вставить("ВидДоговора", "Прочее");
		ДанныеXDTO.Вставить("РасчетыВУсловныхЕдиницах", Ложь);
		ДанныеXDTO.Вставить("Организация", Новый Структура("Значение, ИмяПКО", ОрганизацияДоговора, "Справочник_Организации_Отправка"));
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Контрагенты
Процедура ДобавитьПКО_Справочник_Контрагенты(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Контрагенты";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники._ДемоКонтрагенты;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Контрагенты";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИНН";
	НоваяСтрока.СвойствоФормата = "ИНН";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодПоОКПО";
	НоваяСтрока.СвойствоФормата = "ОКПО";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КПП";
	НоваяСтрока.СвойствоФормата = "КПП";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеПолное";
	НоваяСтрока.СвойствоФормата = "НаименованиеПолное";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_КонтрагентыГруппа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЮридическоеФизическоеЛицо";
	НоваяСтрока.СвойствоФормата = "ЮридическоеФизическоеЛицо";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ЮридическоеФизическоеЛицо";

	ПравилоКонвертации.ПоляПоиска.Добавить("ИНН,КПП,НаименованиеПолное,ЮридическоеФизическоеЛицо,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("ИНН,КПП,ЮридическоеФизическоеЛицо,ЭтоГруппа");
КонецПроцедуры
#КонецОбласти
#Область Справочник_КонтрагентыГруппа
Процедура ДобавитьПКО_Справочник_КонтрагентыГруппа(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_КонтрагентыГруппа";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники._ДемоКонтрагенты;
	ПравилоКонвертации.ОбъектФормата = "Справочник.КонтрагентыГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Истина;
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_КонтрагентыГруппа";

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,ЭтоГруппа");
КонецПроцедуры
#КонецОбласти
#Область Справочник_НоменклатураГруппа
Процедура ДобавитьПКО_Справочник_НоменклатураГруппа(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_НоменклатураГруппа";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники._ДемоНоменклатура;
	ПравилоКонвертации.ОбъектФормата = "Справочник.НоменклатураГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Истина;
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "КодВПрограмме";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_НоменклатураГруппа";

	ПравилоКонвертации.ПоляПоиска.Добавить("Код,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,ЭтоГруппа");
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтраныМира
Процедура ДобавитьПКО_Справочник_СтраныМира(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_СтраныМира";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.СтраныМира;
	ПравилоКонвертации.ОбъектФормата = "Справочник.СтраныМира";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "Код";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодАльфа2";
	НоваяСтрока.СвойствоФормата = "КодАльфа2";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодАльфа3";
	НоваяСтрока.СвойствоФормата = "КодАльфа3";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеПолное";
	НоваяСтрока.СвойствоФормата = "НаименованиеПолное";

	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
КонецПроцедуры
#КонецОбласти
#КонецОбласти

#КонецОбласти
#Область ПКПД
// Заполняет таблицу правил конвертации предопределенных данных.
//
// Параметры:
//  НаправлениеОбмена - строка ("Отправка" либо "Получение").
//  ПравилаКонвертации - таблица значений, в которую будут добавлены правила. 
Процедура ЗаполнитьПравилаКонвертацииПредопределенныхДанных(НаправлениеОбмена, ПравилаКонвертации) Экспорт

	// ЮридическоеФизическоеЛицо.
	ПравилоКонвертации = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД = "ЮридическоеФизическоеЛицо";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления._ДемоЮридическоеФизическоеЛицо;
	ПравилоКонвертации.ТипXDTO = "ЮридическоеФизическоеЛицо";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления._ДемоЮридическоеФизическоеЛицо.ФизическоеЛицо, "ФизическоеЛицо");
	ЗначенияДляОтправки.Вставить(Перечисления._ДемоЮридическоеФизическоеЛицо.ЮридическоеЛицо, "ЮридическоеЛицо");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ФизическоеЛицо", Перечисления._ДемоЮридическоеФизическоеЛицо.ФизическоеЛицо);
	ЗначенияДляПолучения.Вставить("ЮридическоеЛицо", Перечисления._ДемоЮридическоеФизическоеЛицо.ЮридическоеЛицо);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

КонецПроцедуры

#КонецОбласти
#Область Алгоритмы


Функция ДанныеКоллекцииВВидеСтруктуры(Источник, ПравилаЗаполнения)
	Результат = Новый Структура;
	
	Для Каждого ПравилоЗаполнения Из ПравилаЗаполнения Цикл
	
		СтруктураДляПереносаЗначения = Новый Структура(ПравилоЗаполнения.Ключ, Неопределено);
		ЗаполнитьЗначенияСвойств(СтруктураДляПереносаЗначения, Источник);
		
		Значение = СтруктураДляПереносаЗначения[ПравилоЗаполнения.Ключ];
		Если Значение <> Неопределено Тогда
			Результат.Вставить(ПравилоЗаполнения.Значение, Значение);
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат Результат
КонецФункции
Процедура ЗаполнитьВалюту(ДанныеXDTO, ДанныеИБ, ПараметрыКонвертации)
	Если ЗначениеЗаполнено(ДанныеИБ.Валюта) Тогда
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ПараметрыКонвертации.ВалютаПоУмолчанию) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Ссылка
		|ИЗ Справочник.Валюты ГДЕ Наименование = ""RUB"" И ПометкаУдаления = Ложь";
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ПараметрыКонвертации.ВалютаПоУмолчанию = Выборка.Ссылка;
		Иначе
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Ссылка
			|ИЗ Справочник.Валюты ГДЕ ПометкаУдаления = ЛОЖЬ";
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ПараметрыКонвертации.ВалютаПоУмолчанию = Выборка.Ссылка;
			Иначе
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ДанныеXDTO.Вставить("Валюта", ПараметрыКонвертации.ВалютаПоУмолчанию);
КонецПроцедуры
Процедура ОтложеннаяОбработка_ПоступлениеТоваров(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	Если НЕ ЗначениеЗаполнено(Объект.Партнер) И ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Объект.Партнер = Объект.Контрагент.Партнер;
	КонецЕсли;
КонецПроцедуры
Функция ПолучитьСтавкуНДСДокумента(СтавкаНДССсылка)
	Если ЗначениеЗаполнено(СтавкаНДССсылка) Тогда
		СтавкаЧислом = СтавкаНДССсылка.Ставка;
		Если СтавкаЧислом = 18 Тогда
			Возврат "НДС18";
		ИначеЕсли СтавкаЧислом = 4 Тогда
			Возврат "НДС4";
		ИначеЕсли СтавкаЧислом = 2 Тогда
			Возврат "НДС2";
		ИначеЕсли СтавкаЧислом = 10 Тогда
			Возврат "НДС10";
		ИначеЕсли СтавкаЧислом = 0 Тогда
			Возврат "БезНДС";
		ИначеЕсли СтавкаЧислом = 3.85 Тогда
			Возврат "НДС4_104";
		ИначеЕсли СтавкаЧислом = 15.25 Тогда
			Возврат "НДС18_118";
		ИначеЕсли СтавкаЧислом = 1.96 Тогда
			Возврат "НДС2_102";
		ИначеЕсли СтавкаЧислом = 9.09 Тогда
			Возврат "НДС10_110";
		КонецЕсли;
	КонецЕсли;
	Возврат "НДС18";
КонецФункции

#КонецОбласти
#Область Параметры
// Заполняет параметры конвертации.
//
// Параметры:
//  ПараметрыКонвертации - структура, в которую добавляются параметры конвертации.
Процедура ЗаполнитьПараметрыКонвертации(ПараметрыКонвертации) Экспорт
	ПараметрыКонвертации.Вставить("ВалютаПоУмолчанию");
КонецПроцедуры

#КонецОбласти
#Область ОбщегоНазначения
// Процедура-обертка, выполняет запуск указанной в параметрах процедуры модуля менеджера обмена через формат.
//
// Параметры:
//  ИмяПроцедуры - строка.
//  СтруктураПараметров - структура, содержащая передаваемые параметры.
Процедура ВыполнитьПроцедуруМодуляМенеджера(ИмяПроцедуры, Параметры) Экспорт
	Если ИмяПроцедуры = "ПОД_Справочник_Контрагенты_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_Контрагенты_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Номенклатура_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_Номенклатура_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПоступлениеТоваров_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПоступлениеТоваров_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Организации_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Организации_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Склады_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Склады_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПоступлениеТоваров_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПоступлениеТоваров_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Номенклатура_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Номенклатура_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Номенклатура_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Номенклатура_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Договоры_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Договоры_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ПоступлениеТоваров" Тогда 
		ОтложеннаяОбработка_ПоступлениеТоваров(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти
