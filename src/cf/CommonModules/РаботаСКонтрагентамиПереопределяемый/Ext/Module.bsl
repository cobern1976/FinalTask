////////////////////////////////////////////////////////////////////////////////
// Работа с контрагентами.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ПроверкаКонтрагентовВДокументах

// Формирование описания расположения счета-фактуры в документе.
//
// Параметры:
//  Форма	 - УправляемаяФорма - Форма документа-основания, для которого необходимо получить описание счета-фактуры.
//  Описание - ТаблицаЗначений - Таблица, в которую помещается описание счета-фактуры.
//				Структура колонок указана в функции ШаблонТаблицыОписания модуля ПроверкаКонтрагентов.
Процедура СформироватьОписаниеДокументовСоСчетомФактуройВПодвале(Форма, Описание) Экспорт
	
	// _Демо начало примера
	
	ДокументОбъект = Форма.Объект;
	ДокументСсылка = ДокументОбъект.Ссылка;
	
	Если ПроверкаКонтрагентовКлиентСервер.ЭтоДокументСоСчетомФактуройВПодвале(Форма) Тогда
		
		СчетФактура = ПроверкаКонтрагентовКлиентСервер.СчетФактура(Форма);
		
		Если ЗначениеЗаполнено(СчетФактура) Тогда
			
			ПроверкаКонтрагентов.ДополнитьОписание(
				Описание,
				СчетФактура, 
				Форма.Элементы.СчетФактура,
				Неопределено,
				Форма.Элементы.ГруппаСчетФактура);
				
		КонецЕсли;
			
	КонецЕсли;
	
	// _Демо конец примера
		
КонецПроцедуры

// Формирование описания расположения контрагента, находящегося в шапке документа.
//
// Параметры:
//  Форма	 - УправляемаяФорма - Форма документа, для которой необходимо получить описание расположения контрагента.
//  Описание - ТаблицаЗначений - Таблица, в которую помещается описание контрагентов.
//				Структура колонок указана в функции ШаблонТаблицыОписания модуля ПроверкаКонтрагентов.
Процедура СформироватьОписаниеДокументовСКонтрагентомВШапке(Форма, Описание) Экспорт
	
	// _Демо начало примера

	ДокументОбъект = Форма.Объект;
	ДокументСсылка = ДокументОбъект.Ссылка;
	
	// Заполнение данных по контрагенту в шапке.
	Если ПроверкаКонтрагентовКлиентСервер.ЭтоДокументСКонтрагентомВШапке(Форма) Тогда
		
		ПроверкаКонтрагентов.ДополнитьОписание(
			Описание, 
			ДокументСсылка, 
			Форма.Элементы.Контрагент,
			ДокументОбъект.Контрагент,
			Форма.Элементы.ГруппаКонтрагент);
			
	КонецЕсли;
		
	// _Демо конец примера
		
КонецПроцедуры

// Формирование описания  расположения контрагентов, находящихся в табличной части документа.
//
// Параметры:
//  Форма	 - УправляемаяФорма - Форма документа, для которой необходимо получить описание.
//  Описание - ТаблицаЗначений - Таблица с описанием расположения контрагентов в табличной части документа.
//				Структура колонок указана в функции ШаблонТаблицыОписанияТабличныхЧастей модуля ПроверкаКонтрагентов.
Процедура СформироватьОписаниеДокументовСТабличнымиЧастями(Форма, Описание) Экспорт
	
	// _Демо начало примера

	ДокументОбъект = Форма.Объект;
	ДокументСсылка = ДокументОбъект.Ссылка;
	
	Если ПроверкаКонтрагентовКлиентСервер.ЭтоДокументСКонтрагентомВТабличнойЧасти(Форма) Тогда
		
		Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка._ДемоПоступлениеТоваров") Тогда
			
			ПроверкаКонтрагентов.ДополнитьОписаниеТабличныхЧастей(
				Форма, Описание, "АгентскиеУслуги", "АгентскиеУслугиКонтрагент", "АгентскиеУслугиДатаСобытия");
				
		КонецЕсли;
		
	КонецЕсли;
	
	// _Демо конец примера
	
КонецПроцедуры

// Формирование описания расположения контрагентов в счете-фактуре.
//
// Параметры:
//  Форма	 - УправляемаяФорма - Форма счета-фактуры, для которой необходимо получить описание.
//  Описание - ТаблицаЗначений - Таблица, в которую помещается описание контрагентов.
//				Структура колонок указана в функции ШаблонТаблицыОписания модуля ПроверкаКонтрагентов.
Процедура СформироватьОписаниеСчетовФактур(Форма, Описание) Экспорт
	
	// _Демо начало примера

	ДокументОбъект = Форма.Объект;
	ДокументСсылка = ДокументОбъект.Ссылка;
	
	// Заполнение данных для счета-фактуры.
	Если ПроверкаКонтрагентовКлиентСервер.ЭтоСчетФактура(Форма) Тогда
		
		Ссылка 			= ДокументСсылка;
		ТипДокумента	= ТипЗнч(Ссылка);
		
		// Контрагент
		ПроверкаКонтрагентов.ДополнитьОписание(
			Описание, 
			Ссылка,
			Форма.Элементы.Контрагент,
			ДокументОбъект.Контрагент,
			Форма.Элементы.ГруппаКонтрагент);
			
		// Комитент
		ПроверкаКонтрагентов.ДополнитьОписание(
			Описание,  
			Ссылка,
			Форма.Элементы.Комитент,
			ДокументОбъект.Комитент,
			Форма.Элементы.ГруппаКомитент);
				
		// Продавец
		ПроверкаКонтрагентов.ДополнитьОписание(
			Описание,  
			Ссылка,
			Форма.Элементы.Продавец,
			ДокументОбъект.Продавец,
			Форма.Элементы.ГруппаПродавец);
		
	КонецЕсли;
	
	// _Демо конец примера
		
КонецПроцедуры

// Возвращает массив имен реквизитов счета-фактуры, содержащих контрагентов.
//
// Параметры:
//  Тип	 			- Тип - Тип счета-фактуры, для которой необходимо получить описание.
//  ИменаРеквизитов	- Массив - массив имен(строк) реквизитов счета-фактуры, содержащих контрагентов.
Процедура ПолучитьИменаРеквизитовКонтрагентовВСчетеФактуре(Тип, ИменаРеквизитов) Экспорт
	
	// _Демо начало примера
	
	ИменаРеквизитов.Добавить("Контрагент");
	ИменаРеквизитов.Добавить("Комитент");
	ИменаРеквизитов.Добавить("Продавец");
	
	// _Демо конец примера

КонецПроцедуры

// Получение даты документа, в котором используется проверка контрагентов.
// 		Проверка контрагентов будет выполняться по состоянию на эту дату. 
//
// Параметры:
//  ДокументОбъект	 - ДокументОбъект - Документ, в котором используется проверка контрагентов.
//  Дата			 - Дата - Результат получения даты документа.
Процедура ОпределитьДатуВДокументе(ДокументОбъект, Дата) Экспорт
	
	// _Демо начало примера

	Дата = НачалоДня(ДокументОбъект.Дата);
	
	// _Демо конец примера
	
КонецПроцедуры

// Определение даты в счете-фактуре.
//
// Параметры:
//  СчетФактураОбъект	 - ДанныеФормыСтруктура или ДокументОбъект - Счет-фактура, чью дату необходимо получить.
//  Дата				 - Дата - Результат, дата счета-фактуры.
Процедура ОпределитьДатуВСчетеФактуре(СчетФактураОбъект, Дата) Экспорт
	
	// _Демо начало примера

	Дата = НачалоДня(СчетФактураОбъект.Дата);
	
	// _Демо конец примера
	
КонецПроцедуры

// Возможность переопределить стандартное заполнение данных о контрагентах в счет-фактурах, созданных на основании документа
//
// Параметры:
//  СтандартнаяОбработка - Булево - необходимо установить в Ложь, если стандартная обработка переопределяется.
//  ДокументОбъект       - Произвольный - данные содержащие информацию о счет-фактурах.
//  ДанныеКонтрагентов   - ТаблицаЗначений - подготавливаемая таблица с данными о контрагентах
//  Форма                - УправляемаяФорма, Неопределено - Форма из которой выполняется вызов.
//
Процедура ЗаполнитьДанныеКонтрагентовВСчетеФактуре(СтандартнаяОбработка, ДокументОбъект, ДанныеКонтрагентов, Форма) Экспорт
	
	
	
КонецПроцедуры

// Возможность переопределить стандартное сохранение результатов проверки контрагентов счет-фактур, выписанных на основании
//             документа основания в форме документа основания 
//
// Параметры:
//  СтандартнаяОбработка - Булево - необходимо установить в Ложь, если стандартная обработка переопределяется.
//  ДанныеКонтрагентов   - ТаблицаЗначений - подготавливаемая таблица с данными о контрагентах
//  Форма                - УправляемаяФорма, Неопределено - Форма из которой выполняется вызов.
//
Процедура ЗапомнитьРезультатПроверкиКонтрагентовСчетФактурыВДокументе(СтандартнаяОбработка, ДанныеКонтрагентов, Форма) Экспорт
	
	
	
КонецПроцедуры

// Возможность дополнить структуру РеквизитыПроверкиКонтрагентов при создании в форме документа
//
// Параметры:
//   Форма          - УправляемаяФорма, Неопределено - Форма из которой выполняется вызов.
//   НовыеРеквизиты - Структура - сформированная структура дополнительных реквизитов документа, которая может быть дополнена.
//
Процедура ДополнитьРеквизитыФормыДокумент(Форма, НовыеРеквизиты) Экспорт


КонецПроцедуры

// Возможность переопределить сохраняемые результаты проверки контрагентов в документе.
//
// Параметры:
//  СтандартнаяОбработка - Булево - необходимо установить в Ложь, если стандартная обработка переопределяется.
//  СохраняемоеЗначение  - Соответствие - сохраняемые данные
//  Форма                - УправляемаяФорма, Неопределено - Форма из которой выполняется вызов.
//
Процедура СохраняемыеРезультатыПроверкиСчетФактурыВДокументе(СтандартнаяОбработка, СохраняемоеЗначение, Форма) Экспорт
	
	
	
КонецПроцедуры

// Отображения результата проверки контрагента в документе.
//
// Параметры:
//  Форма	 				- УправляемаяФорма - Форма документа, для которого выводится результат проверки контрагента.
//		Результат проверки хранится в реквизите РеквизитыПроверкиКонтрагентов(Структура) формы документа.
//		Структуру полей РеквизитыПроверкиКонтрагентов см. процедуре ИнициализироватьРеквизитыФормыДокумент ОМ
//		ПроверкаКонтрагентов.
//  СтандартнаяОбработка	- Булево - Если Ложь, то игнорируется стандартное действие и выполняется указанное в данной
//                                  процедуре.
Процедура ОтобразитьРезультатПроверкиКонтрагентаВДокументе(Форма, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Прорисовать состояния контрагентов в документе.
//
// Параметры:
//  Форма				 	 - УправляемаяФорма - Форма документа, в котором выполняется проверка контрагентов.
//  СостояниеПроверки		 - Перечисления.СостоянияПроверкиКонтрагентов - Указывает, в каком состояние проверка:
//		завершилась, не завершилась, выполняется или отсутствует доступ к веб-сервису.
//  ДополнительныеПараметры	 - Неопределено или Структура - Параметры, показывающие в каком элементе формы произошло
//                             изменение и это изменение вызвало запуск проверки контрагента. Описание структуры см в
//                             ПроверкаКонтрагентовКлиентСервер.ПараметрыФоновогоЗадания.
//  СтандартнаяОбработка	 - Булево - Если Ложь, то игнорируется стандартное действие и выполняется указанное в данной
//                                   процедуре.
//		Пример см в ПроверкаКонтрагентов.ПрорисоватьСостоянияКонтрагентовВДокументе.
Процедура ПрорисоватьСостоянияКонтрагентовВДокументе(Форма, СостояниеПроверки, ДополнительныеПараметры = Неопределено, СтандартнаяОбработка = Истина) Экспорт
	
КонецПроцедуры

// Установка условного оформления в форме выбора или списка документов.
//
// Параметры:
//  Список				 	 - ДинамическийСписок - Динамический список формы выбора или списка документов.
//  СтандартнаяОбработка	 - Булево - Если Ложь, то игнорируется стандартное действие и выполняется указанное в данной
//                                   процедуре.
Процедура УстановитьУсловноеОформлениеСпискаДокументов(Список, СтандартнаяОбработка = Истина) Экспорт
	
КонецПроцедуры

// Установка условного оформления в табличной части документа.
//
// Параметры:
//  Форма				 	 - УправляемаяФорма - Форма документа, в котором выполняется проверка контрагентов.
//  СтандартнаяОбработка	 - Булево - Если Ложь, то игнорируется стандартное действие и выполняется указанное в данной
//                                   процедуре.
Процедура УстановитьУсловноеОформлениеТабличнойЧастиДокумента(Форма, СтандартнаяОбработка = Истина) Экспорт
	
КонецПроцедуры

// Добавление колонки с результатом проверки контрагента в таблицу формы документа.
//
// Параметры:
//  Форма				 	 - УправляемаяФорма - Форма документа, в котором выполняется проверка контрагентов.
//  СтандартнаяОбработка	 - Булево - Если Ложь, то игнорируется стандартное действие и выполняется указанное в данной
//                                   процедуре.
Процедура ДобавитьКолонкиТаблицыФормыСРезультатамиПроверкиВТабличныеЧасти(Форма, СтандартнаяОбработка = Истина) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаКонтрагентовВОтчетах

// Выделение контрагента с ошибкой в строке отчета.
//
// Параметры:
//  ТабличныйДокумент	 - ТабличныйДокумент - Табличный документ отчета, в котором выделяется строка с некорректным
//                                           контрагентом.
//  НомерСтроки			 - Число - Номер строки табличного документа, в которой находится некорректный контрагент.
Процедура ВыделитьКонтрагентаСОшибкойВСтрокеОтчета(ТабличныйДокумент, НомерСтроки) Экспорт
	
	// _Демо начало примера
	Область = ТабличныйДокумент.Область(НомерСтроки, 1, НомерСтроки, ТабличныйДокумент.ШиринаТаблицы);
	Область.ЦветФона = Новый Цвет(251, 212, 212);
	// _Демо конец примера
	
КонецПроцедуры

// Предназначена для формирования отчета, в котором используется проверка контрагентов, из общего модуля.
//
// Параметры:
//  ПараметрыФормированияОтчета	 - Структура - Параметры, с которыми необходимо сформировать отчет.
//  Отчет						 - ТабличныйДокумент - результат формирования отчета.
Процедура СформироватьОтчет(ПараметрыФормированияОтчета, Отчет = Неопределено) Экспорт
	
	// _Демо начало примера
	Если ПараметрыФормированияОтчета.Свойство("ВидОтчета") И ПараметрыФормированияОтчета.ВидОтчета = Отчеты._ДемоКнигаПокупок Тогда
		
		ВременныйАдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор);
		Отчеты._ДемоКнигаПокупок.СформироватьОтчет(ПараметрыФормированияОтчета, ВременныйАдресХранилища);
		Результат = ПолучитьИзВременногоХранилища(ВременныйАдресХранилища);
		
		Отчет = Результат.РезультатФормированияОтчета;
		
	КонецЕсли;
	// _Демо конец примера
	
КонецПроцедуры 

// Вывод результата проверки контрагента в поле табличного документа.
//
// Параметры:
//  Форма				 		 - УправляемаяФорма - Форма отчета, в котором выполняется проверка контрагентов.
//  ПолеТабличногоДокумента		 - ПолеФормы с видом ПолеТабличногоДокумента - поле, в которое необходимо выводить отчет.
//  РезультатФормированияОтчета	 - ТабличныйДокумент - Документ, предназначенный для вывода в поле формы.
//  СтандартнаяОбработка		 - Булево - Определяет, выполнять ли действие, определенное в данной процедуре или выполнить
//                                    стандартную обработку.
Процедура ВывестиОтчет(Форма, ПолеТабличногоДокумента, РезультатФормированияОтчета, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Вывод раздела отчета с проверкой контрагента в поле табличного документа.
//
// Параметры:
//  Форма				 		 - УправляемаяФорма - Форма отчета, в котором выполняется проверка контрагентов.
//  ПолеТабличногоДокумента		 - ПолеФормы с видом ПолеТабличногоДокумента - поле, в которое необходимо выводить отчет.
//  НомерРаздела	 			 - Число - Номер раздела отчета.
//  СтандартнаяОбработка		 - Булево - Определяет, выполнять ли действие, определенное в данной процедуре или выполнить
//                                    стандартную обработку.
Процедура ВывестиРазделОтчета(Форма, ПолеТабличногоДокумента, НомерРаздела, СтандартнаяОбработка) Экспорт

	

КонецПроцедуры

// Определяет, нужно ли выводить данную строку в отчете по некорректным контрагентам.
// 	Пример см. в ПроверкаКонтрагентов.ВыводитьСтрокуОтчета.
//
// Параметры:
//  СтруктураПараметров	 - Структура - Параметры формирования отчета. 
//		Для проверки контрагентов в отчете важно наличие ключа "ДанныеДляПроверкиКонтрагентов".
//		Данный ключ формируется в процедуре ДобавитьПараметрыДляПроверкиКонтрагентов.
//  Контрагент				- СправочникСсылка - Проверяемый контрагент в строке отчета.
//  ИНН						- Строка - ИНН контрагента.
//  КПП						- Строка - ИНН контрагента.
//  Дата					- Дата - Дата, на которую необходимо выполнять проверку контрагента.
//  СтандартнаяОбработка	- Булево - Определяет, выполнять ли действие, определенное в данной процедуре или выполнить
//                                  стандартную обработку.
//  Результат				- Булево - Определяет, нужно ли выводить строку.
Процедура ОпределитьНужноЛиВыводитьСтрокуОтчета(СтруктураПараметров, Контрагент, ИНН, КПП, Дата, Результат, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Определяет, нужно ли проверять контрагентов в разделе отчета.
//
// Параметры:
//  СтруктураПараметров	 - Структура - Параметры формирования отчета. 
//		Для проверки контрагентов в отчете важно наличие ключа "ДанныеДляПроверкиКонтрагентов".
//		Данный ключ формируется в процедуре ДобавитьПараметрыДляПроверкиКонтрагентов.
//  НомерРаздела			- Число - Номер раздела отчета.
//  ДополнительныеПараметры	- Произвольный - Дополнительная информация, связанная с разделом.
//  СтандартнаяОбработка	- Булево - Определяет, выполнять ли действие, определенное в данной процедуре или выполнить
//                                  стандартную обработку.
Процедура ОпределитьНужноЛиПроверятьКонтрагентовВРазделеОтчета(СтруктураПараметров, НомерРаздела, ДополнительныеПараметры, СтандартнаяОбработка) Экспорт

КонецПроцедуры

// Отображения результата проверки контрагента в отчете.
//
// Параметры:
//  Форма	 				- УправляемаяФорма - Форма отчета, для которого выводится результат проверки контрагента.
//		Результат проверки хранится в реквизите РеквизитыПроверкиКонтрагентов(Структура),
//		ПроверкаКонтрагентовНедействующиеКонтрагенты формы отчета.
//		Структуру полей РеквизитыПроверкиКонтрагентов см. процедуре ИнициализироватьРеквизитыФормыОтчета ОМ
//		ПроверкаКонтрагентов.
//  СтандартнаяОбработка	- Булево - Если Ложь, то игнорируется стандартное действие и выполняется указанное в данной
//                                  процедуре.
Процедура ОтобразитьРезультатПроверкиКонтрагентаВОтчете(Форма, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Установка условного оформления в форме выбора или списка справочника контрагентов.
//
// Параметры:
//  Список				 	 - ДинамическийСписок - Динамический список формы выбора или списка справочника контрагентов.
//  СтандартнаяОбработка	 - Булево - Если Ложь, то игнорируется стандартное действие и выполняется указанное в данной
//                                   процедуре.
Процедура УстановитьУсловноеОформлениеСпискаКонтрагентов(Список, СтандартнаяОбработка = Истина) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаКонтрагентовВСправочнике

// Определяется, является ли контрагент иностранным.
//
// Параметры:
//  ДанныеКонтрагента   - СтрокаТаблицыЗначений - Содержит информацию о контрагенте. 
//      Подробнее о колонках таблицы можно узнать в описании к процедуре ПроверкаКонтрагентов.ШаблонТаблицыДанныеКонтрагента()
//  ЯвляетсяИностранным - Булево - Результат проверки.
Процедура ОпределитьЯвляетсяЛиКонтрагентИностранным(ДанныеКонтрагента, ЯвляетсяИностранным) Экспорт
	
	// _Демо начало примера
	КонтрагентСсылка = ДанныеКонтрагента.Контрагент;
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(КонтрагентСсылка)) И КонтрагентСсылка <> Справочники._ДемоКонтрагенты.ПустаяСсылка() Тогда
		// Ссылка
		ЯвляетсяИностранным = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КонтрагентСсылка, "ЭтоИностранныйКонтрагент");
		
	Иначе
		// Объект
		ЯвляетсяИностранным = КонтрагентСсылка.ЭтоИностранныйКонтрагент;
		
	КонецЕсли;
	// _Демо конец примера
	
КонецПроцедуры

// Возможность дополнить структуру РеквизитыПроверкиКонтрагентов для формы справочника 
//
// Параметры:
//  Форма  - УправляемаяФорма - форма, для которой дополняется структура РеквизитыПроверкиКонтрагентов
//  НовыеРеквизиты  - Структура - структура, которая транслируется в реквизит формы РеквизитыПроверкиКонтрагентов
//
Процедура ДополнитьРеквизитыФормыКонтрагент(Форма, НовыеРеквизиты) Экспорт
	
	// _Демо начало примера
	НовыеРеквизиты.Вставить("НеИспользоватьКэш", Ложь);

	Если Форма.ИмяФормы = "Справочник._ДемоКонтрагенты.Форма.ФормаЭлемента" Тогда
		
		НовыеРеквизиты.ЭтоИностранныйКонтрагент  = Форма.Объект.ЭтоИностранныйКонтрагент;
		НовыеРеквизиты.ЭтоЮридическоеЛицо  		 = Форма.Объект.ЮридическоеФизическоеЛицо = Перечисления._ДемоЮридическоеФизическоеЛицо.ЮридическоеЛицо;
		
	КонецЕсли;
	
	// _Демо конец примера
	
КонецПроцедуры

// Определяет, является ли контрагент физическим или юридическим лицом 
//
// Параметры:
//  СтандартнаяОбработка  - Булево - если стандартный механизм переопределяется, то должно быть установлено значение "Ложь".
//  ЭтоЮрЛицо             - Булево - Истина, если юридическое лицо, и Ложь, если физическое.
//  ДанныеКонтрагента     - Структура - структура, которая содержит данные обрабатываемого контрагента.
//
Процедура ОпределитьЮрИлиФизЛицоКонтрагент(СтандартнаяОбработка, ЭтоЮрЛицо, ДанныеКонтрагента) Экспорт

	// _Демо начало примера
	
	Если ДанныеКонтрагента.ДополнительныеПараметры.Свойство("ЭтоЮридическоеЛицо") Тогда
		ЭтоЮрЛицо = ДанныеКонтрагента.ДополнительныеПараметры.ЭтоЮридическоеЛицо;
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
	// _Демо конец примера
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеИнформацииДляДосьеКонтрагента

// Определение состава и порядка вывода в отчет "Досье контрагента" данных из информационной базы.
//
// Параметры:
//  ТаблицаОписания - ТаблицаЗначений - описание см. Отчеты.ДосьеКонтрагента.НоваяТаблицаОписаниеДанныхПрограммы.
//
Процедура ЗаполнитьОписаниеДанныхПрограммы(ТаблицаОписания) Экспорт

	// _Демо начало примера
	
	НоваяСтрока = ТаблицаОписания.Добавить();
	НоваяСтрока.ИмяДанных  = "Наименование";
	НоваяСтрока.ЭтоТаблица = Ложь;
	НоваяСтрока.Заголовок  = НСтр("ru='Наименование'");
	
	НоваяСтрока = ТаблицаОписания.Добавить();
	НоваяСтрока.ИмяДанных  = "Реквизиты";
	НоваяСтрока.ЭтоТаблица = Ложь;
	НоваяСтрока.Заголовок  = НСтр("ru='Реквизиты'");
	
	НоваяСтрока = ТаблицаОписания.Добавить();
	НоваяСтрока.ИмяДанных  = "ЮридическийАдрес";
	НоваяСтрока.ЭтоТаблица = Ложь;
	НоваяСтрока.Заголовок  = НСтр("ru='Юридический адрес'");

	НоваяСтрока = ТаблицаОписания.Добавить();
	НоваяСтрока.ИмяДанных  = "КонтактныеЛица";
	НоваяСтрока.ЭтоТаблица = Истина;
	НоваяСтрока.Заголовок  = НСтр("ru='Контактные лица'");

	НоваяСтрока = ТаблицаОписания.Добавить();
	НоваяСтрока.ИмяДанных  = "БанковскиеСчета";
	НоваяСтрока.ЭтоТаблица = Истина;
	НоваяСтрока.Заголовок  = НСтр("ru='Банковские счета'");

	НоваяСтрока = ТаблицаОписания.Добавить();
	НоваяСтрока.ИмяДанных  = "Email";
	НоваяСтрока.ЭтоТаблица = Ложь;
	НоваяСтрока.Заголовок  = НСтр("ru='Email'");

	НоваяСтрока = ТаблицаОписания.Добавить();
	НоваяСтрока.ИмяДанных  = "Родитель";
	НоваяСтрока.ЭтоТаблица = Ложь;
	НоваяСтрока.Заголовок  = НСтр("ru='Входит в группу'");

	// _Демо конец примера
	
КонецПроцедуры

// Заполнение информации о контрагенте по данным информационной базы для отчета "Досье контрагента".
//
// Параметры:
//  ИнформацияОСвязях  - Структура - описание см. ДанныеЕдиныхГосРеестров.НоваяИнформацияОСвязяхЮридическогоЛица
//                 и ДанныеЕдиныхГосРеестров.НоваяИнформацияОСвязяхПредпринимателя.
//                 При заполнении в структуру ИнформацияОСвязях.ДанныеПрограммы добавляются данные о контрагенте.
//                 Ключи структуры должны соответствовать полям ИмяДанных таблицы, заполненной 
//                 в процедуре ЗаполнитьОписаниеДанныхПрограммы.
//  Контрагент  - ОпределяемыйТип.Контрагент - ссылка на контрагента в информационной базе.
//                 Если при вызове процедуры ссылка пустая, необходимо найти контрагента до данным,
//                 содержащимся в структуре ИнформацияОСвязях.
//
Процедура ДополнитьИнформациюДаннымиПрограммы(ИнформацияОСвязях, Контрагент) Экспорт
	
	// _Демо начало примера
	
#Область ЗаполнениеСсылкиНаКонтрагента
	
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		
		Запрос = Новый Запрос;
		Если ИнформацияОСвязях.Свойство("КПП") Тогда
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	Контрагенты.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник._ДемоКонтрагенты КАК Контрагенты
			|ГДЕ
			|	Контрагенты.ИНН = &ИНН
			|	И Контрагенты.КПП = &КПП
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	Контрагенты.Ссылка
			|ИЗ
			|	Справочник._ДемоКонтрагенты КАК Контрагенты
			|ГДЕ
			|	Контрагенты.ИНН = &ИНН
			|	И Контрагенты.КПП = """"";
			Запрос.УстановитьПараметр("КПП", ИнформацияОСвязях.КПП);
		Иначе
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	Контрагенты.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник._ДемоКонтрагенты КАК Контрагенты
			|ГДЕ
			|	Контрагенты.ИНН = &ИНН";
		КонецЕсли;
		Запрос.УстановитьПараметр("ИНН", ИнформацияОСвязях.ИНН);
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			
			Контрагент = Выборка.Ссылка;
			
		КонецЕсли;
		
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Возврат;
	КонецЕсли;
	
#КонецОбласти

#Область ЗаполнениеРеквизитовКонтрагента
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Контрагент, 
		"Ссылка,Наименование,НаименованиеПолное,ИНН,КПП,ЮридическоеФизическоеЛицо,Родитель");
	
	СтруктураНаименование = Отчеты.ДосьеКонтрагента.НовыеДанныеПрограммы();
	СтруктураНаименование.Ссылка        = Реквизиты.Ссылка;
	СтруктураНаименование.Представление = Реквизиты.Наименование;
	СтруктураНаименование.Описание      = Реквизиты.НаименованиеПолное;
	ИнформацияОСвязях.ДанныеПрограммы.Вставить("Наименование", СтруктураНаименование);
	
	СтруктураРеквизиты = Отчеты.ДосьеКонтрагента.НовыеДанныеПрограммы();
	СтруктураРеквизиты.Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='ИНН %1'"), Реквизиты.ИНН);
	
	Если Реквизиты.ЮридическоеФизическоеЛицо = Перечисления._ДемоЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
		СтруктураРеквизиты.Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='КПП %1'"), Реквизиты.КПП);
		// Показываем расхождение КПП по данным программы с КПП по ЕГРЮЛ.
		ВывестиПримечание = ЗначениеЗаполнено(ИнформацияОСвязях.КПП) 
			И Реквизиты.КПП <> ИнформацияОСвязях.КПП;
		Если ВывестиПримечание Тогда
			СтруктураРеквизиты.ПримечаниеОписание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='По данным ЕГРЮЛ: 
				|КПП %1'"),
				ИнформацияОСвязях.КПП);
		КонецЕсли;
	КонецЕсли;
	ИнформацияОСвязях.ДанныеПрограммы.Вставить("Реквизиты", СтруктураРеквизиты);
	
	ИнформацияОСвязях.ДанныеПрограммы.Вставить("Родитель", Реквизиты.Родитель);
	
#КонецОбласти

#Область ЗаполнениеБанковскихСчетовКонтрагента
	
	БанковскиеСчета = Отчеты.ДосьеКонтрагента.НоваяТаблицаДанныеПрограммы();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	БанковскиеСчета.Ссылка КАК Ссылка,
	|	БанковскиеСчета.Код КАК Код,
	|	БанковскиеСчета.НомерСчета КАК НомерСчета,
	|	БанковскиеСчета.Банк.Представление КАК Банк,
	|	БанковскиеСчета.Банк.Код КАК БИК,
	|	БанковскиеСчета.Банк.КоррСчет КАК КоррСчет
	|ИЗ
	|	Справочник._ДемоБанковскиеСчета КАК БанковскиеСчета
	|ГДЕ
	|	БанковскиеСчета.Владелец = &Контрагент
	|
	|УПОРЯДОЧИТЬ ПО
	|	Код";
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	Для каждого СтрокаТаблицы Из ТаблицаРезультата Цикл
		
		НоваяСтрока = БанковскиеСчета.Добавить();
		Если ЗначениеЗаполнено(СтрокаТаблицы.КоррСчет) Тогда
			Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='р/с %1, БИК %2, корр. счет %3'"),
				СтрокаТаблицы.НомерСчета,
				СтрокаТаблицы.БИК,
				СтрокаТаблицы.КоррСчет);
		Иначе
			Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='р/с %1, БИК %2'"),
				СтрокаТаблицы.НомерСчета,
				СтрокаТаблицы.БИК);
		КонецЕсли;
		НоваяСтрока.Представление = Представление;
		НоваяСтрока.Описание      = СтрокаТаблицы.Банк;
		НоваяСтрока.Ссылка        = СтрокаТаблицы.Ссылка;
		
	КонецЦикла;
	
	ИнформацияОСвязях.ДанныеПрограммы.Вставить("БанковскиеСчета", БанковскиеСчета);
	
#КонецОбласти

#Область ЗаполнениеКонтактныхЛицКонтрагента
	
	КонтактныеЛица = Отчеты.ДосьеКонтрагента.НоваяТаблицаДанныеПрограммы();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КонтактныеЛица.Ссылка КАК Ссылка,
	|	КонтактныеЛица.Наименование КАК Представление
	|ИЗ
	|	Справочник._ДемоКонтактныеЛицаПартнеров КАК КонтактныеЛица
	|ГДЕ
	|	КонтактныеЛица.Владелец = &Партнер
	|
	|УПОРЯДОЧИТЬ ПО
	|	Представление";
	Запрос.УстановитьПараметр("Партнер", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "Партнер"));
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаРезультата.Количество() > 0 Тогда
		
		МассивЛиц = ТаблицаРезультата.ВыгрузитьКолонку("Ссылка");
		ТаблицаКИ = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(МассивЛиц);
		Для каждого СтрокаТаблицы Из ТаблицаРезультата Цикл
			
			НоваяСтрока = ИнформацияОСвязях.ДанныеПрограммы.КонтактныеЛица.Добавить();
			НоваяСтрока.Ссылка        = СтрокаТаблицы.Ссылка;
			НоваяСтрока.Представление = СтрокаТаблицы.Представление;
			СтрокиКИ = ТаблицаКИ.Скопировать(Новый Структура("Объект", НоваяСтрока.Ссылка), "Представление,Тип");
			СтрокиКИ.Сортировать("Тип УБЫВ");
			Для каждого СтрокаКИ Из СтрокиКИ Цикл
				Если ЗначениеЗаполнено(СтрокаКИ.Представление) Тогда
					НоваяСтрока.Представление = НоваяСтрока.Представление + ", " + СтрокаКИ.Представление;
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;

	ИнформацияОСвязях.ДанныеПрограммы.Вставить("КонтактныеЛица", КонтактныеЛица);

#КонецОбласти

#Область ЗаполнениеАдресаEMailКонтрагента
	
	СтруктураЮридическийАдрес = Отчеты.ДосьеКонтрагента.НовыеДанныеПрограммы();
	АдресПоДаннымПрограммы    = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
		Контрагент, Справочники.ВидыКонтактнойИнформации._ДемоАдресКонтрагента);
	СтруктураЮридическийАдрес.Представление = АдресПоДаннымПрограммы;
	// Показываем расхождение адреса по данным программы с адресом по ЕГРЮЛ.
	Если ИнформацияОСвязях.Свойство("ЮридическийАдрес") 
		И ЗначениеЗаполнено(ИнформацияОСвязях.ЮридическийАдрес.Представление) Тогда
		ВывестиПримечание = ЗначениеЗаполнено(АдресПоДаннымПрограммы)
			И АдресПоДаннымПрограммы <> ИнформацияОСвязях.ЮридическийАдрес.Представление;
		Если ВывестиПримечание Тогда
			СтруктураЮридическийАдрес.ПримечаниеПредставление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='По данным ЕГРЮЛ:
				|%1'"),
				ИнформацияОСвязях.ЮридическийАдрес.Представление);
		КонецЕсли;
	КонецЕсли;
	ИнформацияОСвязях.ДанныеПрограммы.Вставить("ЮридическийАдрес", СтруктураЮридическийАдрес);
	
	ИнформацияОСвязях.ДанныеПрограммы.Вставить("Email", УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
		Контрагент, Справочники.ВидыКонтактнойИнформации._ДемоEmailКонтрагента));
	
#КонецОбласти

	// _Демо конец примера
		
КонецПроцедуры 

// Заполнение наименований видов деятельности по ОКВЭД для вывода в отчет "Досье контрагента".
//
// Параметры:
//  ВидыДеятельности  - ТаблицаЗначений - см. ДанныеЕдиныхГосРеестров.НоваяТаблицаВидыДеятельности.
//                 В процедуре необходимо заполнить в строках таблицы поле НаименованиеОКВЭД,
//                 соответствующее заполненному полю КодОКВЭД.
//
Процедура ЗаполнитьНаименованияВидовДеятельностиКонтрагента(ВидыДеятельности) Экспорт
	
КонецПроцедуры

// Заполнение идентификатора конфигурации для статистики переходов по ссылкам сервиса 1С:Контрагент.
//
// Параметры:
//  ИдентификаторКонфигурации  - Строка - идентификатор. 
//                 Рекомендуется использовать латинские строчные буквы и цифры.
//
Процедура ЗаполнитьИдентификаторКонфигурации(ИдентификаторКонфигурации) Экспорт

	// _Демо начало примера
	
	ИдентификаторКонфигурации = "bsp23";
	
	// _Демо конец примера

КонецПроцедуры

#КонецОбласти 

#Область ПрочиеПроцедуры

// Определение цветов выделения результатов проверки контрагентов.
// 		Для примера см. функцию ЦветаРезультатовПроверки ОМ ПроверкаКонтрагентовКлиентСервер.
//
// Параметры:
//  Цвета	 - Структура - Имена ключей - это названия цветов, которые необходимо определить.
// 		Список ключей см ПроверкаКонтрагентовВызовСервераПовтИсп.ЦветаРезультатовПроверки().
Процедура ОпределитьЦветаРезультатовПроверки(Цвета) Экспорт
	
КонецПроцедуры

// Заполнение значений колонок ЭтоЮридическоеЛицо и ЭтоИностранныйКонтрагент 
//		в таблице с данными контрагента.
//		Заполнять следует запросом и только те строки, в которых значения не заполнены.
//
// Параметры:
//  ДанныеКонтрагентов	 - ТаблицаЗначений - Таблица с данными контрагентов.
//  СтандартнаяОбработка - Булево - Если Истина, то заполнение будет выполнено стандартным 
// 		образом путем перебора каждой строки таблицы.
//
Процедура ДополнитьДанныеКонтрагентов(ДанныеКонтрагентов, СтандартнаяОбработка) Экспорт
	
	// _Демо начало примера
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено()
		И ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных()
		ИЛИ НЕ ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		
		СтандартнаяОбработка = Ложь;
		
		// При определении реквизитов ЭтоЮридическоеЛицо и ЭтоИностранныйКонтрагент есть ветки,
		// когда соответствующий элемент справочника может отсутствовать (ДанныеКонтрагентов.Ссылка IS NULL).
		// Такое может возникнуть, когда 
		// - проверяется объект (ссылки еще нет)
		// - в Досье контрагента, когда при проверке используется только ИНН и КПП, с самой
		// ссылки нет.
		// - при использовании функций ПроверитьКонтрагента и СостояниеКонтрагента ОМ
		// ПроверкаКонтрагентов извне как API без указания ссылки в параметре запуска.
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ДанныеКонтрагентов.Контрагент,
			|	ДанныеКонтрагентов.ИНН,
			|	ДанныеКонтрагентов.КПП,
			|	ДанныеКонтрагентов.ЭтоЮридическоеЛицо,
			|	ДанныеКонтрагентов.ЭтоИностранныйКонтрагент,
			|	ДанныеКонтрагентов.Дата,
			|	ДанныеКонтрагентов.ОбластьДанныхВспомогательныеДанные,
			|	ДанныеКонтрагентов.Состояние
			|ПОМЕСТИТЬ ДанныеКонтрагентов
			|ИЗ
			|	&ДанныеКонтрагентов КАК ДанныеКонтрагентов
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ДанныеКонтрагентов.Контрагент,
			|	ДанныеКонтрагентов.ИНН,
			|	ДанныеКонтрагентов.КПП,
			|	ВЫБОР
			|		КОГДА ДанныеКонтрагентов.ЭтоЮридическоеЛицо = НЕОПРЕДЕЛЕНО
			|			ТОГДА ВЫБОР
			|					КОГДА _ДемоКонтрагенты.ЮридическоеФизическоеЛицо ЕСТЬ NULL 
			|						ТОГДА ВЫБОР
			|								КОГДА ПОДСТРОКА(ДанныеКонтрагентов.ИНН, 12, 1) <> """"
			|									ТОГДА ЛОЖЬ
			|								ИНАЧЕ ИСТИНА
			|							КОНЕЦ
			|					ИНАЧЕ ВЫБОР
			|							КОГДА _ДемоКонтрагенты.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление._ДемоЮридическоеФизическоеЛицо.ЮридическоеЛицо)
			|								ТОГДА ИСТИНА
			|							ИНАЧЕ ЛОЖЬ
			|						КОНЕЦ
			|				КОНЕЦ
			|		ИНАЧЕ ДанныеКонтрагентов.ЭтоЮридическоеЛицо
			|	КОНЕЦ КАК ЭтоЮридическоеЛицо,
			|	ВЫБОР
			|		КОГДА _ДемоКонтрагенты.ЭтоИностранныйКонтрагент ЕСТЬ NULL 
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ВЫБОР
			|				КОГДА ДанныеКонтрагентов.ЭтоИностранныйКонтрагент = НЕОПРЕДЕЛЕНО
			|					ТОГДА _ДемоКонтрагенты.ЭтоИностранныйКонтрагент
			|				ИНАЧЕ ДанныеКонтрагентов.ЭтоИностранныйКонтрагент
			|			КОНЕЦ
			|	КОНЕЦ КАК ЭтоИностранныйКонтрагент,
			|	ДанныеКонтрагентов.Дата,
			|	ДанныеКонтрагентов.ОбластьДанныхВспомогательныеДанные,
			|	ДанныеКонтрагентов.Состояние
			|ИЗ
			|	ДанныеКонтрагентов КАК ДанныеКонтрагентов
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник._ДемоКонтрагенты КАК _ДемоКонтрагенты
			|		ПО ДанныеКонтрагентов.Контрагент = _ДемоКонтрагенты.Ссылка";
			
		Если НЕ ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
			
			Запрос.Текст = СтрЗаменить(
				Запрос.Текст,
				"ДанныеКонтрагентов.ОбластьДанныхВспомогательныеДанные,",
				"");
				
		КонецЕсли;
			
		Запрос.УстановитьПараметр("ДанныеКонтрагентов", ДанныеКонтрагентов);
		ДанныеКонтрагентов = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
	// _Демо конец примера
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти