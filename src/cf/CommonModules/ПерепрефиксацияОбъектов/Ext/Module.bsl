////////////////////////////////////////////////////////////////////////////////
// Подсистема "Префиксация объектов".
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Устанавливает новый префикс информационной базы и изменяет коды и номера объектов 
// в соответствии с новым префиксом и форматом кода/номера.
// Обработке подлежат только объекты, созданные в текущей информационной базе.
// Место создания объекта определяется по префиксу его номера или кода.
//
//  Параметры:
//  НовыйПрефиксИБ - Строка - Новый префикс информационной базы, который требуется установить. 
//  НачалоПериодаПерепрефиксации - Дата - Дата, начиная с которой будет установлен новый префикс ИБ у документов,
//                                        бизнес-процессов и задач.
//  ПредыдущийПрефиксИБ - Строка - Префикс информационной базы, который был установлен раньше.
//                                 Задавать значение переменной имеет смысл только в том случае,
//                                 если произошла утеря значения префикса ИБ, например,
//                                 при переходе из локального режима работы в модель сервиса.
//                                 А также, если номера и коды объектов имеют нестандартный
//                                 формат, отличный от формата БСП.
//  ОбъектовОбработано - Число - В этот параметр возвращается количество объектов, для которых был изменен номер или
//                               код.
//
Процедура УстановитьПрефиксИБИПерепрефиксоватьОбъектыСозданныеВЭтойИБ(
									Знач НовыйПрефиксИБ,
									Знач НачалоПериодаПерепрефиксации = Неопределено,
									Знач ПредыдущийПрефиксИБ = Неопределено,
									ОбъектовОбработано = 0) Экспорт
	
	СлужебнаяУстановитьПрефиксИБИПерепрефиксоватьОбъектыСозданныеВЭтойИБ(НовыйПрефиксИБ, НачалоПериодаПерепрефиксации, ПредыдущийПрефиксИБ, ОбъектовОбработано);
	
КонецПроцедуры

// Устанавливает новый префикс информационной базы и изменяет коды и номера объектов 
// в соответствии с новым префиксом и форматом кода/номера.
// Обработке подлежат все объекты, вне зависимости от того, в какой информационной базе был создан объект.
// Место создания объекта определяется по префиксу его номера или кода.
//
//  Параметры:
//  НовыйПрефиксИБ - Строка - Новый префикс информационной базы, который требуется установить.
//  НачалоПериодаПерепрефиксации - Дата - Дата, начиная с которой будет установлен новый префикс ИБ у документов,
//                                        бизнес-процессов и задач.
//  ПредыдущийПрефиксИБ - Строка - Префикс информационной базы, который был установлен раньше.
//                                 Задавать значение переменной имеет смысл только в том случае,
//                                 если произошла утеря значения префикса ИБ, например,
//                                 при переходе из локального режима работы в модель сервиса.
//                                 А также, если номера и коды объектов имеют нестандартный
//                                 формат, отличный от формата БСП.
//  ОбъектовОбработано - Число - В этот параметр возвращается количество объектов, для которых был изменен номер или
//                               код.
//
Процедура УстановитьПрефиксИБИПерепрефиксоватьВсеОбъекты(
									Знач НовыйПрефиксИБ,
									Знач НачалоПериодаПерепрефиксации = Неопределено,
									Знач ПредыдущийПрефиксИБ = Неопределено,
									ОбъектовОбработано = 0) Экспорт
	
	СлужебнаяУстановитьПрефиксИБИПерепрефиксоватьВсеОбъекты(НовыйПрефиксИБ, НачалоПериодаПерепрефиксации, ПредыдущийПрефиксИБ, ОбъектовОбработано);
	
КонецПроцедуры

// Устанавливает новый префикс информационной базы и создает новые объекты
// по одному на каждый тип данных с новым префиксом информационной базы и форматом номера/кода БСП.
// Обработке подлежат только объекты, созданные в текущей информационной базе.
// Место создания объекта определяется по префиксу его номера или кода.
//
//  Параметры:
//  НовыйПрефиксИБ - Строка - Новый префикс информационной базы, который требуется установить.
//  НачалоПериодаПерепрефиксации - Дата - Дата, начиная с которой будет выполнен анализ данных.
//  ПредыдущийПрефиксИБ - Строка - Префикс информационной базы, который был установлен раньше.
//                                 Задавать значение переменной имеет смысл только в том случае,
//                                 если произошла утеря значения префикса ИБ, например,
//                                 при переходе из локального режима работы в модель сервиса.
//                                 А также, если номера и коды объектов имеют нестандартный
//                                 формат, отличный от формата БСП.
//  ОбъектовОбработано - Число - В этот параметр возвращается количество созданных объектов.
//
Процедура УстановитьПрефиксИБИСоздатьОбъекты(
									Знач НовыйПрефиксИБ,
									Знач НачалоПериодаПерепрефиксации = Неопределено,
									Знач ПредыдущийПрефиксИБ = Неопределено,
									ОбъектовОбработано = 0) Экспорт
	
	СлужебнаяУстановитьПрефиксИБИСоздатьОбъекты(НовыйПрефиксИБ, НачалоПериодаПерепрефиксации, ПредыдущийПрефиксИБ, ОбъектовОбработано);
	
КонецПроцедуры

// Устанавливает новый префикс информационной базы и изменяет код или номер
// последнего актуального объекта для каждого типа данных.
// Обработке подлежат только объекты, созданные в текущей информационной базе.
// Место создания объекта определяется по префиксу его номера или кода.
//
// Параметры:
//  НовыйПрефиксИБ - Строка - Новый префикс информационной базы, который требуется установить.
//  НачалоПериодаПерепрефиксации - Дата - Дата, начиная с которой будет выполнен анализ данных.
//  ПредыдущийПрефиксИБ - Строка - Префикс информационной базы, который был установлен раньше.
//                                 Задавать значение переменной имеет смысл только в том случае,
//                                 если произошла утеря значения префикса ИБ, например,
//                                 при переходе из локального режима работы в модель сервиса.
//                                 А также, если номера и коды объектов имеют нестандартный
//                                 формат, отличный от формата БСП.
//  ОбъектовОбработано - Число -    В этот параметр возвращается количество измененных объектов.
//
Процедура УстановитьПрефиксИБИПерепрефиксоватьПоследниеОбъекты(
									Знач НовыйПрефиксИБ,
									Знач НачалоПериодаПерепрефиксации = Неопределено,
									Знач ПредыдущийПрефиксИБ = Неопределено,
									ОбъектовОбработано = 0) Экспорт
	
	СлужебнаяУстановитьПрефиксИБИПерепрефиксоватьПоследниеОбъекты(НовыйПрефиксИБ, НачалоПериодаПерепрефиксации, ПредыдущийПрефиксИБ, ОбъектовОбработано);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СлужебнаяУстановитьПрефиксИБИПерепрефиксоватьОбъектыСозданныеВЭтойИБ(
									Знач НовыйПрефикс,
									Знач СДаты = Неопределено,
									Знач ПредыдущийПрефиксИнформационнойБазы = Неопределено,
									СчетчикОбработанныхОбъектов = 0)
	
	Если ТранзакцияАктивна() Тогда
		
		ВызватьИсключение НСтр("ru = 'Изменение префикса информационной базы не может выполняться в транзакции.'");
		
	ИначеЕсли Не Пользователи.ЭтоПолноправныйПользователь() Тогда
		
		ВызватьИсключение НСтр("ru = 'Недостаточно прав для изменения префикса информационной базы.'");
		
	КонецЕсли;
	
	Если Не ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	СДаты = ?(СДаты = Дата('00010101'), Неопределено, СДаты);
	
	СтандартныйПрефикс = (ПредыдущийПрефиксИнформационнойБазы = Неопределено);
	
	СчетчикОбработанныхОбъектов = 0;
	
	Если СтандартныйПрефикс Тогда
		
		УстановитьНовыйПрефиксИВыполнитьОбработкуДанныхСоСтандартнымФорматомКода(СчетчикОбработанныхОбъектов, НовыйПрефикс, СДаты, ПредыдущийПрефиксИнформационнойБазы);
		
	Иначе
		
		УстановитьНовыйПрефиксИВыполнитьОбработкуДанныхСНестандартнымФорматомКода(СчетчикОбработанныхОбъектов, НовыйПрефикс, СДаты, ПредыдущийПрефиксИнформационнойБазы);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СлужебнаяУстановитьПрефиксИБИПерепрефиксоватьВсеОбъекты(
									Знач НовыйПрефикс,
									Знач СДаты = Неопределено,
									Знач ПредыдущийПрефиксИнформационнойБазы = Неопределено,
									СчетчикОбработанныхОбъектов = 0)
	
	Если ТранзакцияАктивна() Тогда
		
		ВызватьИсключение НСтр("ru = 'Изменение префикса информационной базы не может выполняться в транзакции.'");
		
	ИначеЕсли Не Пользователи.ЭтоПолноправныйПользователь() Тогда
		
		ВызватьИсключение НСтр("ru = 'Недостаточно прав для изменения префикса информационной базы.'");
		
	КонецЕсли;
	
	Если Не ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	СДаты = ?(СДаты = Дата('00010101'), Неопределено, СДаты);
	
	СтандартныйПрефикс = (ПредыдущийПрефиксИнформационнойБазы = Неопределено);
	
	СчетчикОбработанныхОбъектов = 0;
	
	Если СтандартныйПрефикс Тогда
		
		УстановитьНовыйПрефиксИВыполнитьОбработкуДанныхСоСтандартнымФорматомКода(СчетчикОбработанныхОбъектов, НовыйПрефикс, СДаты,, Истина);
		
	Иначе
		
		УстановитьНовыйПрефиксИВыполнитьОбработкуДанныхСНестандартнымФорматомКода(СчетчикОбработанныхОбъектов, НовыйПрефикс, СДаты,, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СлужебнаяУстановитьПрефиксИБИСоздатьОбъекты(
									Знач НовыйПрефикс,
									Знач СДаты = Неопределено,
									Знач ПредыдущийПрефиксИнформационнойБазы = Неопределено,
									СчетчикОбработанныхОбъектов = 0)
	
	СчетчикОбработанныхОбъектов = 0;
	
	УстановитьПрефиксИБИСоздатьИзменитьОбъекты(СчетчикОбработанныхОбъектов, НовыйПрефикс, СДаты, ПредыдущийПрефиксИнформационнойБазы, Ложь);
	
КонецПроцедуры

Процедура СлужебнаяУстановитьПрефиксИБИПерепрефиксоватьПоследниеОбъекты(
									Знач НовыйПрефикс,
									Знач СДаты = Неопределено,
									Знач ПредыдущийПрефиксИнформационнойБазы = Неопределено,
									СчетчикОбработанныхОбъектов = 0)
	
	СчетчикОбработанныхОбъектов = 0;
	
	УстановитьПрефиксИБИСоздатьИзменитьОбъекты(СчетчикОбработанныхОбъектов, НовыйПрефикс, СДаты, ПредыдущийПрефиксИнформационнойБазы, Истина);
	
КонецПроцедуры

//

Процедура УстановитьНовыйПрефиксИВыполнитьОбработкуДанныхСНестандартнымФорматомКода(
									СчетчикОбработанныхОбъектов,
									Знач НовыйПрефикс,
									Знач СДаты,
									Знач ПредыдущийПрефиксИнформационнойБазы = Неопределено,
									Знач ОбрабатыватьВсеДанные = Ложь)
	
	ПроверитьВозможностьУстановкиПрефикса();
	
	СтандартныйПрефикс = Ложь;
	
	Если ПредыдущийПрефиксИнформационнойБазы = Неопределено Тогда
		
		ПриОпределенииПрефиксаИнформационнойБазы(ПредыдущийПрефиксИнформационнойБазы);
		
		ДополнитьСтрокуНулямиСлева(ПредыдущийПрефиксИнформационнойБазы, 2);
		
	КонецЕсли;
	
	Попытка
		
		УстановитьПрефиксИнформационнойБазы(НовыйПрефикс);
		
		ВнешнийМонопольныйРежим = МонопольныйРежим();
		Если Не ВнешнийМонопольныйРежим Тогда
			ОбщегоНазначения.ЗаблокироватьИБ(Ложь);
		КонецЕсли;
		
		Для Каждого ОписаниеОбъекта Из МетаданныеИспользующиеПрефиксИнформационнойБазы() Цикл
			
			Выборка = ВыборкаДанных(
						ОписаниеОбъекта.ИмяОбъекта,
						СДаты,
						ОписаниеОбъекта.ЭтоДокумент,
						СтандартныйПрефикс,
						ПредыдущийПрефиксИнформационнойБазы,
						ОбрабатыватьВсеДанные);
			
			Если Выборка.Пустой() Тогда
				Продолжить;
			КонецЕсли;
			
			Выборка = Выборка.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				// {Фильтр: По месту создания объекта}.
				Если Не ОбрабатыватьВсеДанные Тогда
					
					ПолныйПрефиксОбъекта = ПолныйПрефикс(Выборка.Код);
					
					Если Не ПустаяСтрока(ПолныйПрефиксОбъекта)
						И СтрНайти(ПолныйПрефиксОбъекта, ПредыдущийПрефиксИнформационнойБазы) = 0 Тогда
						Продолжить; // Обрабатываем объекты, созданные только в текущей информационной базе.
					КонецЕсли;
					
				КонецЕсли;
				
				Объект = Выборка.Ссылка.ПолучитьОбъект();
				
				Если ОписаниеОбъекта.ЭтоДокумент Тогда
					
					Объект.УстановитьНовыйНомер();
					
					ФорматКода = Объект.Номер;
					
				Иначе
					
					Объект.УстановитьНовыйКод();
					
					ФорматКода = Объект.Код;
					
				КонецЕсли;
				
				// {Обработчик: ПриИзмененииНомера} Начало
				СтандартнаяОбработка = Истина;
				БазовыйКод = "";
				
				Если ОписаниеОбъекта.ЭтоДокумент Тогда
					
					ПрефиксацияОбъектовПереопределяемый.ПриИзмененииНомера(Объект, Выборка.Код, БазовыйКод, СтандартнаяОбработка);
					
				Иначе
					
					ПрефиксацияОбъектовПереопределяемый.ПриИзмененииКода(Объект, Выборка.Код, БазовыйКод, СтандартнаяОбработка);
					
				КонецЕсли;
				
				Если СтандартнаяОбработка = Истина Тогда
					
					КодНовый = НовыйКодОбъекта(ФорматКода, Выборка.Код, ОписаниеОбъекта.ЭтоДокумент, Объект);
					
				Иначе
					
					КодНовый = НовыйКодОбъектаПоБазовомуКоду(ФорматКода, БазовыйКод, ОписаниеОбъекта.ЭтоДокумент, Объект);
					
				КонецЕсли;
				// {Обработчик: ПриИзмененииНомера} Окончание
				
				ОбъектМодифицирован = (Выборка.Код <> КодНовый);
				
				Если ОбъектМодифицирован Тогда
					
					Объект[?(ОписаниеОбъекта.ЭтоДокумент, "Номер", "Код")] = КодНовый;
					
					Объект.ОбменДанными.Загрузка = Истина;
					Объект.Записать();
					
					УвеличитьСчетчикОбработанныхОбъектов(СчетчикОбработанныхОбъектов);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Если Не ВнешнийМонопольныйРежим Тогда
			ОбщегоНазначения.РазблокироватьИБ();
		КонецЕсли;
		
	Исключение
		
		Если Не ВнешнийМонопольныйРежим Тогда
			ОбщегоНазначения.РазблокироватьИБ();
		КонецЕсли;
		
		УстановитьПрефиксИнформационнойБазы(ПредыдущийПрефиксИнформационнойБазы);
		
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииПерепрефиксацияОбъектов(),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура УстановитьНовыйПрефиксИВыполнитьОбработкуДанныхСоСтандартнымФорматомКода(
									СчетчикОбработанныхОбъектов,
									Знач НовыйПрефикс,
									Знач СДаты,
									Знач ПредыдущийПрефиксИнформационнойБазы = Неопределено,
									Знач ОбрабатыватьВсеДанные = Ложь)
	
	ПроверитьВозможностьУстановкиПрефикса();
	
	НовыйПрефиксПолный = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(НовыйПрефикс, 2);
	
	СтандартныйПрефикс = Истина;
	
	Если ПредыдущийПрефиксИнформационнойБазы = Неопределено Тогда
		
		ПриОпределенииПрефиксаИнформационнойБазы(ПредыдущийПрефиксИнформационнойБазы);
		
		ДополнитьСтрокуНулямиСлева(ПредыдущийПрефиксИнформационнойБазы, 2);
		
	КонецЕсли;
	
	Попытка
		
		УстановитьПрефиксИнформационнойБазы(НовыйПрефикс);
		
		ВнешнийМонопольныйРежим = МонопольныйРежим();
		Если Не ВнешнийМонопольныйРежим Тогда
			ОбщегоНазначения.ЗаблокироватьИБ(Ложь);
		КонецЕсли;
		
		// Префиксация по префиксу информационной базы.
		Для Каждого ОписаниеОбъекта Из МетаданныеИспользующиеТолькоПрефиксИнформационнойБазы() Цикл
			
			УстановитьНовыйПрефикс(
							2,
							ОписаниеОбъекта,
							СДаты,
							ПредыдущийПрефиксИнформационнойБазы,
							ОбрабатыватьВсеДанные,
							НовыйПрефиксПолный,
							СчетчикОбработанныхОбъектов);
			
		КонецЦикла;
		
		// Префиксация по префиксу информационной базы и организации.
		Для Каждого ОписаниеОбъекта Из МетаданныеИспользующиеПрефиксИнформационнойБазыИОрганизации() Цикл
			
			УстановитьНовыйПрефикс(
							4,
							ОписаниеОбъекта,
							СДаты,
							ПредыдущийПрефиксИнформационнойБазы,
							ОбрабатыватьВсеДанные,
							НовыйПрефиксПолный,
							СчетчикОбработанныхОбъектов);
			
		КонецЦикла;
		
		Если Не ВнешнийМонопольныйРежим Тогда
			ОбщегоНазначения.РазблокироватьИБ();
		КонецЕсли;
		
	Исключение
		
		Если Не ВнешнийМонопольныйРежим Тогда
			ОбщегоНазначения.РазблокироватьИБ();
		КонецЕсли;
		
		УстановитьПрефиксИнформационнойБазы(ПредыдущийПрефиксИнформационнойБазы);
		
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииПерепрефиксацияОбъектов(),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Для внутреннего использования.
//
Процедура УстановитьПрефиксИБИСоздатьИзменитьОбъекты(
									СчетчикОбработанныхОбъектов,
									Знач НовыйПрефикс,
									Знач СДаты,
									Знач ПредыдущийПрефиксИнформационнойБазы = Неопределено,
									Знач ОбрабатыватьПоследниеОбъекты = Ложь)
	
	ПроверитьВозможностьУстановкиПрефикса();
	
	СДаты = ?(СДаты = Дата('00010101'), Неопределено, СДаты);
	
	СтандартныйПрефикс = (ПредыдущийПрефиксИнформационнойБазы = Неопределено);
	
	ОбрабатыватьВсеДанные = Ложь;
	
	Если ТранзакцияАктивна() Тогда
		
		ВызватьИсключение НСтр("ru = 'Изменение префикса информационной базы не может выполняться в транзакции.'");
		
	ИначеЕсли Не Пользователи.ЭтоПолноправныйПользователь() Тогда
		
		ВызватьИсключение НСтр("ru = 'Недостаточно прав для изменения префикса информационной базы.'");
		
	КонецЕсли;
	
	Если Не ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	Если ПредыдущийПрефиксИнформационнойБазы = Неопределено Тогда
		
		ПриОпределенииПрефиксаИнформационнойБазы(ПредыдущийПрефиксИнформационнойБазы);
		
		ДополнитьСтрокуНулямиСлева(ПредыдущийПрефиксИнформационнойБазы, 2);
		
	КонецЕсли;
	
	Попытка
		
		УстановитьПрефиксИнформационнойБазы(НовыйПрефикс);
		
		ВнешнийМонопольныйРежим = МонопольныйРежим();
		Если Не ВнешнийМонопольныйРежим Тогда
			ОбщегоНазначения.ЗаблокироватьИБ(Ложь);
		КонецЕсли;
		
		// Префиксация по префиксу информационной базы.
		Для Каждого ОписаниеОбъекта Из МетаданныеИспользующиеТолькоПрефиксИнформационнойБазы() Цикл
			
			Выборка = ВыборкаДанных(
						ОписаниеОбъекта.ИмяОбъекта,
						СДаты,
						ОписаниеОбъекта.ЭтоДокумент,
						СтандартныйПрефикс,
						ПредыдущийПрефиксИнформационнойБазы,
						ОбрабатыватьВсеДанные);
			
			Если Выборка.Пустой() Тогда
				Продолжить;
			КонецЕсли;
			
			Объекты = Новый ТаблицаЗначений;
			Объекты.Колонки.Добавить("Код");
			Объекты.Колонки.Добавить("Дата");
			Объекты.Колонки.Добавить("Период");
			Объекты.Колонки.Добавить("Объект");
			
			Выборка = Выборка.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				// {Фильтр: По месту создания объекта для нестандартного префикса}.
				Если Не ОбрабатыватьВсеДанные
					И Не СтандартныйПрефикс Тогда
					
					ПолныйПрефиксОбъекта = ПолныйПрефикс(Выборка.Код);
					
					Если Не ПустаяСтрока(ПолныйПрефиксОбъекта)
						И СтрНайти(ПолныйПрефиксОбъекта, ПредыдущийПрефиксИнформационнойБазы) = 0 Тогда
						Продолжить; // Обрабатываем объекты, созданные только в текущей информационной базе.
					КонецЕсли;
					
				КонецЕсли;
				
				СтрокаТаблицы = Объекты.Добавить();
				СтрокаТаблицы.Код = ЧисловойКодОбъекта(Выборка.Код);
				СтрокаТаблицы.Дата = Выборка.Дата;
				СтрокаТаблицы.Период = ДатаПериода(Выборка.Дата, ОписаниеОбъекта.ПериодичностьНомера);
				СтрокаТаблицы.Объект = Выборка.Ссылка;
				
			КонецЦикла;
			
			Если Объекты.Количество() > 0 Тогда
				
				Если ОбрабатыватьПоследниеОбъекты Тогда
					
					Объекты.Сортировать("Период Убыв, Код Убыв");
					
					Объект = Объекты[0]["Объект"].ПолучитьОбъект();
					
					КодПредыдущий = Объект[?(ОписаниеОбъекта.ЭтоДокумент, "Номер", "Код")];
					
					Если ОписаниеОбъекта.ЭтоДокумент Тогда
						
						Объект.УстановитьНовыйНомер();
						
						ФорматКода = Объект.Номер;
						
					Иначе
						
						Объект.УстановитьНовыйКод();
						
						ФорматКода = Объект.Код;
						
					КонецЕсли;
					
					Если СтандартныйПрефикс Тогда
						
						КодНовый = НовыйКодОбъекта(ФорматКода, КодПредыдущий, ОписаниеОбъекта.ЭтоДокумент, Объект);
						
					Иначе
						
						// {Обработчик: ПриИзмененииНомера} Начало
						СтандартнаяОбработка = Истина;
						БазовыйКод = "";
						
						Если ОписаниеОбъекта.ЭтоДокумент Тогда
							
							ПрефиксацияОбъектовПереопределяемый.ПриИзмененииНомера(Объект, КодПредыдущий, БазовыйКод, СтандартнаяОбработка);
							
						Иначе
							
							ПрефиксацияОбъектовПереопределяемый.ПриИзмененииКода(Объект, КодПредыдущий, БазовыйКод, СтандартнаяОбработка);
							
						КонецЕсли;
						
						Если СтандартнаяОбработка = Истина Тогда
							
							КодНовый = НовыйКодОбъекта(ФорматКода, КодПредыдущий, ОписаниеОбъекта.ЭтоДокумент, Объект);
							
						Иначе
							
							КодНовый = НовыйКодОбъектаПоБазовомуКоду(ФорматКода, БазовыйКод, ОписаниеОбъекта.ЭтоДокумент, Объект);
							
						КонецЕсли;
						// {Обработчик: ПриИзмененииНомера} Окончание
						
					КонецЕсли;
					
					ОбъектМодифицирован = (КодПредыдущий <> КодНовый);
					
					Если ОбъектМодифицирован Тогда
						
						Объект[?(ОписаниеОбъекта.ЭтоДокумент, "Номер", "Код")] = КодНовый;
						
						Объект.ОбменДанными.Загрузка = Истина;
						Объект.Записать();
						
						УвеличитьСчетчикОбработанныхОбъектов(СчетчикОбработанныхОбъектов);
						
					КонецЕсли;
					
				Иначе // Создаем новые объекты
					
					Объекты.Сортировать("Период Убыв, Код Убыв");
					
					МаксимальныйКод = Объекты[0]["Код"];
					
					Объекты.Сортировать("Дата Убыв");
					
					МаксимальнаяДата = Объекты[0]["Дата"];
					
					Объект = СоздатьОбъект(ОписаниеОбъекта);
					
					Если ОписаниеОбъекта.ЭтоДокумент Тогда
						
						Объект.Дата = МаксимальнаяДата + 1;
						Объект.УстановитьНовыйНомер();
						
						ФорматКода = Объект.Номер;
						
					Иначе
						
						Объект.УстановитьНовыйКод();
						
						ФорматКода = Объект.Код;
						
					КонецЕсли;
					
					КодНовый = НовыйКодОбъекта(ФорматКода, МаксимальныйКод + 1, ОписаниеОбъекта.ЭтоДокумент, Объект);
					
					Объект[?(ОписаниеОбъекта.ЭтоДокумент, "Номер", "Код")] = КодНовый;
					
					Объект.ОбменДанными.Загрузка = Истина;
					Объект.Записать();
					
					УвеличитьСчетчикОбработанныхОбъектов(СчетчикОбработанныхОбъектов);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Префиксация по префиксу информационной базы и организации.
		Для Каждого ОписаниеОбъекта Из МетаданныеИспользующиеПрефиксИнформационнойБазыИОрганизации() Цикл
			
			Выборка = ВыборкаДанных(
						ОписаниеОбъекта.ИмяОбъекта,
						СДаты,
						ОписаниеОбъекта.ЭтоДокумент,
						СтандартныйПрефикс,
						ПредыдущийПрефиксИнформационнойБазы,
						ОбрабатыватьВсеДанные,
						Истина);
			
			Если Выборка.Пустой() Тогда
				Продолжить;
			КонецЕсли;
			
			ОрганизацияБезПрефикса = "{ОрганизацияБезПрефикса}";
			
			Объекты = Новый ТаблицаЗначений;
			Объекты.Колонки.Добавить("Код");
			Объекты.Колонки.Добавить("Дата");
			Объекты.Колонки.Добавить("Период");
			Объекты.Колонки.Добавить("Объект");
			
			Группировка = Новый Соответствие;
			Группировка.Вставить(ОрганизацияБезПрефикса, Объекты);
			
			Выборка = Выборка.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				// {Фильтр: По месту создания объекта для нестандартного префикса}.
				Если Не ОбрабатыватьВсеДанные
					И Не СтандартныйПрефикс Тогда
					
					ПолныйПрефиксОбъекта = ПолныйПрефикс(Выборка.Код);
					
					Если Не ПустаяСтрока(ПолныйПрефиксОбъекта)
						И СтрНайти(ПолныйПрефиксОбъекта, ПредыдущийПрефиксИнформационнойБазы) = 0 Тогда
						Продолжить; // Обрабатываем объекты, созданные только в текущей информационной базе.
					КонецЕсли;
					
				КонецЕсли;
				
				Если Выборка.ПрефиксОрганизацииЗадан Тогда
					
					Если Группировка[Выборка.Организация] = Неопределено Тогда
						
						Объекты = Новый ТаблицаЗначений;
						Объекты.Колонки.Добавить("Код");
						Объекты.Колонки.Добавить("Дата");
						Объекты.Колонки.Добавить("Период");
						Объекты.Колонки.Добавить("Объект");
						
						СтрокаТаблицы = Объекты.Добавить();
						СтрокаТаблицы.Код = ЧисловойКодОбъекта(Выборка.Код);
						СтрокаТаблицы.Дата = Выборка.Дата;
						СтрокаТаблицы.Период = ДатаПериода(Выборка.Дата, ОписаниеОбъекта.ПериодичностьНомера);
						СтрокаТаблицы.Объект = Выборка.Ссылка;
						
						Группировка.Вставить(Выборка.Организация, Объекты);
						
					Иначе
						
						СтрокаТаблицы = Группировка[Выборка.Организация].Добавить();
						СтрокаТаблицы.Код = ЧисловойКодОбъекта(Выборка.Код);
						СтрокаТаблицы.Дата = Выборка.Дата;
						СтрокаТаблицы.Период = ДатаПериода(Выборка.Дата, ОписаниеОбъекта.ПериодичностьНомера);
						СтрокаТаблицы.Объект = Выборка.Ссылка;
						
					КонецЕсли;
					
				Иначе
					
					СтрокаТаблицы = Группировка[ОрганизацияБезПрефикса].Добавить();
					СтрокаТаблицы.Код = ЧисловойКодОбъекта(Выборка.Код);
					СтрокаТаблицы.Дата = Выборка.Дата;
					СтрокаТаблицы.Период = ДатаПериода(Выборка.Дата, ОписаниеОбъекта.ПериодичностьНомера);
					СтрокаТаблицы.Объект = Выборка.Ссылка;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Для Каждого ЭлементГруппировки Из Группировка Цикл
				
				Объекты = ЭлементГруппировки.Значение;
				Организация = ЭлементГруппировки.Ключ;
				
				Если Объекты.Количество() > 0 Тогда
					
					Если ОбрабатыватьПоследниеОбъекты Тогда
						
						Объекты.Сортировать("Период Убыв, Код Убыв");
						
						Объект = Объекты[0]["Объект"].ПолучитьОбъект();
						
						КодПредыдущий = Объект[?(ОписаниеОбъекта.ЭтоДокумент, "Номер", "Код")];
						
						Если ОписаниеОбъекта.ЭтоДокумент Тогда
							
							Объект.УстановитьНовыйНомер();
							
							ФорматКода = Объект.Номер;
							
						Иначе
							
							Объект.УстановитьНовыйКод();
							
							ФорматКода = Объект.Код;
							
						КонецЕсли;
						
						Если СтандартныйПрефикс Тогда
							
							КодНовый = НовыйКодОбъекта(ФорматКода, КодПредыдущий, ОписаниеОбъекта.ЭтоДокумент, Объект);
							
						Иначе
							
							// {Обработчик: ПриИзмененииНомера} Начало
							СтандартнаяОбработка = Истина;
							БазовыйКод = "";
							
							Если ОписаниеОбъекта.ЭтоДокумент Тогда
								
								ПрефиксацияОбъектовПереопределяемый.ПриИзмененииНомера(Объект, КодПредыдущий, БазовыйКод, СтандартнаяОбработка);
								
							Иначе
								
								ПрефиксацияОбъектовПереопределяемый.ПриИзмененииКода(Объект, КодПредыдущий, БазовыйКод, СтандартнаяОбработка);
								
							КонецЕсли;
							
							Если СтандартнаяОбработка = Истина Тогда
								
								КодНовый = НовыйКодОбъекта(ФорматКода, КодПредыдущий, ОписаниеОбъекта.ЭтоДокумент, Объект);
								
							Иначе
								
								КодНовый = НовыйКодОбъектаПоБазовомуКоду(ФорматКода, БазовыйКод, ОписаниеОбъекта.ЭтоДокумент, Объект);
								
							КонецЕсли;
							// {Обработчик: ПриИзмененииНомера} Окончание
							
						КонецЕсли;
						
						ОбъектМодифицирован = (КодПредыдущий <> КодНовый);
						
						Если ОбъектМодифицирован Тогда
							
							Объект[?(ОписаниеОбъекта.ЭтоДокумент, "Номер", "Код")] = КодНовый;
							
							Объект.ОбменДанными.Загрузка = Истина;
							Объект.Записать();
							
							УвеличитьСчетчикОбработанныхОбъектов(СчетчикОбработанныхОбъектов);
							
						КонецЕсли;
						
					Иначе
						
						Объекты.Сортировать("Период Убыв, Код Убыв");
						
						МаксимальныйКод = Объекты[0]["Код"];
						
						Объекты.Сортировать("Дата Убыв");
						
						МаксимальнаяДата = Объекты[0]["Дата"];
						
						Объект = СоздатьОбъект(ОписаниеОбъекта);
						
						Объект[ПрефиксацияОбъектовСобытия.ИмяРеквизитаОрганизация(
							Объект.Метаданные())] = ?(Организация = ОрганизацияБезПрефикса, Неопределено, Организация);
						
						Если ОписаниеОбъекта.ЭтоДокумент Тогда
							
							Объект.Дата = МаксимальнаяДата + 1;
							
							Объект.УстановитьНовыйНомер();
							
							ФорматКода = Объект.Номер;
							
						Иначе
							
							Объект.УстановитьНовыйКод();
							
							ФорматКода = Объект.Код;
							
						КонецЕсли;
						
						КодНовый = НовыйКодОбъекта(ФорматКода, МаксимальныйКод + 1, ОписаниеОбъекта.ЭтоДокумент, Объект);
						
						Объект[?(ОписаниеОбъекта.ЭтоДокумент, "Номер", "Код")] = КодНовый;
						
						Объект.ОбменДанными.Загрузка = Истина;
						Объект.Записать();
						
						УвеличитьСчетчикОбработанныхОбъектов(СчетчикОбработанныхОбъектов);
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Если Не ВнешнийМонопольныйРежим Тогда
			ОбщегоНазначения.РазблокироватьИБ();
		КонецЕсли;
		
	Исключение
		
		Если Не ВнешнийМонопольныйРежим Тогда
			ОбщегоНазначения.РазблокироватьИБ();
		КонецЕсли;
		
		УстановитьПрефиксИнформационнойБазы(ПредыдущийПрефиксИнформационнойБазы);
		
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииПерепрефиксацияОбъектов(),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Функция ВыборкаДанных(
					Знач ИмяОбъекта,
					Знач СДаты,
					Знач ЭтоДокумент,
					Знач СтандартныйПрефикс,
					Знач ПредыдущийПрефикс,
					Знач ОбрабатыватьВсеДанные,
					Знач ВыбиратьОрганизацию = Ложь)
	
	Запрос = Новый Запрос;
	
	Если ОбрабатыватьВсеДанные Тогда
		
		Если ЭтоДокумент И СДаты <> Неопределено Тогда
			
			ТекстЗапроса =
			"ВЫБРАТЬ
			|	[ВыборкаОрганизации]
			|	[ПрефиксОрганизацииЗадан]
			|	[ВыборкаДаты]
			|	Таблица.[Код] КАК Код,
			|	Таблица.Ссылка КАК Ссылка
			|ИЗ
			|	[ИмяОбъекта] КАК Таблица
			|ГДЕ
			|	Таблица.Дата >= &Дата
			|
			|УПОРЯДОЧИТЬ ПО
			|	Таблица.Дата";
			
			Запрос.УстановитьПараметр("Дата", НачалоДня(СДаты));
			
		Иначе
			
			ТекстЗапроса =
			"ВЫБРАТЬ
			|	[ВыборкаОрганизации]
			|	[ПрефиксОрганизацииЗадан]
			|	[ВыборкаДаты]
			|	Таблица.[Код] КАК Код,
			|	Таблица.Ссылка КАК Ссылка
			|ИЗ
			|	[ИмяОбъекта] КАК Таблица";
			
		КонецЕсли;
		
	Иначе
		
		Если СтандартныйПрефикс Тогда
			
			Если ЭтоДокумент И СДаты <> Неопределено Тогда
				
				ТекстЗапроса =
				"ВЫБРАТЬ
				|	[ВыборкаОрганизации]
				|	[ПрефиксОрганизацииЗадан]
				|	[ВыборкаДаты]
				|	Таблица.[Код] КАК Код,
				|	Таблица.Ссылка КАК Ссылка
				|ИЗ
				|	[ИмяОбъекта] КАК Таблица
				|ГДЕ
				|	Таблица.Дата >= &Дата
				|	И Таблица.[Код] ПОДОБНО &Префикс
				|
				|УПОРЯДОЧИТЬ ПО
				|	Таблица.Дата";
				
				Запрос.УстановитьПараметр("Дата", НачалоДня(СДаты));
				
			Иначе
				
				ТекстЗапроса =
				"ВЫБРАТЬ
				|	[ВыборкаОрганизации]
				|	[ПрефиксОрганизацииЗадан]
				|	[ВыборкаДаты]
				|	Таблица.[Код] КАК Код,
				|	Таблица.Ссылка КАК Ссылка
				|ИЗ
				|	[ИмяОбъекта] КАК Таблица
				|ГДЕ
				|	Таблица.[Код] ПОДОБНО &Префикс";
				
			КонецЕсли;
			
			// Обрабатываем объекты, созданные только в текущей информационной базе.
			Префикс = "%[Префикс]-%";
			Префикс = СтрЗаменить(Префикс, "[Префикс]", ПредыдущийПрефикс);
			Запрос.УстановитьПараметр("Префикс", Префикс);
			
		Иначе
			
			Если ЭтоДокумент И СДаты <> Неопределено Тогда
				
				ТекстЗапроса =
				"ВЫБРАТЬ
				|	[ВыборкаОрганизации]
				|	[ПрефиксОрганизацииЗадан]
				|	[ВыборкаДаты]
				|	Таблица.[Код] КАК Код,
				|	Таблица.Ссылка КАК Ссылка
				|ИЗ
				|	[ИмяОбъекта] КАК Таблица
				|ГДЕ
				|	Таблица.Дата >= &Дата
				|
				|УПОРЯДОЧИТЬ ПО
				|	Таблица.Дата";
				
				Запрос.УстановитьПараметр("Дата", НачалоДня(СДаты));
				
			Иначе
				
				ТекстЗапроса =
				"ВЫБРАТЬ
				|	[ВыборкаОрганизации]
				|	[ПрефиксОрганизацииЗадан]
				|	[ВыборкаДаты]
				|	Таблица.[Код] КАК Код,
				|	Таблица.Ссылка КАК Ссылка
				|ИЗ
				|	[ИмяОбъекта] КАК Таблица";
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ИмяОбъекта]", ИмяОбъекта);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[Код]", ?(ЭтоДокумент, "Номер", "Код"));
	Если ВыбиратьОрганизацию Тогда
		ИмяПоляОрганизации = ПрефиксацияОбъектовСобытия.ИмяРеквизитаОрганизация(ИмяОбъекта);
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ВыборкаОрганизации]", 
		?(ВыбиратьОрганизацию, "Таблица." + ИмяПоляОрганизации + " КАК Организация,", ""));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ПрефиксОрганизацииЗадан]",
		?(ВыбиратьОрганизацию,
		"ВЫБОР КОГДА Таблица." + ИмяПоляОрганизации + ".Префикс = """" ТОГДА Ложь ИНАЧЕ Истина КОНЕЦ КАК ПрефиксОрганизацииЗадан,",
		"Ложь КАК ПрефиксОрганизацииЗадан,"));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ВыборкаДаты]", ?(ЭтоДокумент, "Таблица.Дата КАК Дата,", "Неопределено КАК Дата,"));
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();
КонецФункции

Функция НовыйКодОбъекта(Знач ФорматНовогоКода, Знач Код, Знач ЭтоДокумент, Объект)
	
	Если ТипЗнч(Код) = Тип("Строка") Тогда
		
		КодЧислом = ЧисловойКодОбъекта(Код);
		
	ИначеЕсли ТипЗнч(Код) = Тип("Число") Тогда
		
		КодЧислом = Код;
		
	КонецЕсли;
	
	НовыйПолныйПрефикс = ПолныйПрефикс(ФорматНовогоКода);
	
	ДлинаКода = СтрДлина(ФорматНовогоКода);
	
	КодСтрокой = Формат(КодЧислом, "ЧН=0; ЧГ=0");
	
	КоличествоЛидирующихНулей = ДлинаКода - СтрДлина(НовыйПолныйПрефикс) - СтрДлина(КодСтрокой);
	
	Если КоличествоЛидирующихНулей < 0 Тогда
		
		СтрокаСообщения = НСтр("ru = 'Преобразование %1 объекта %2 не может быть выполнено.
			|Недостаточная длина %1. Минимальная длина %1 объекта должна составлять %3 символов.'");
		СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, ?(ЭтоДокумент, НСтр("ru = 'номера'"), НСтр("ru = 'кода'")),
			Строка(Объект), Строка(СтрДлина(НовыйПолныйПрефикс) + СтрДлина(КодСтрокой)));
		ВызватьИсключение СтрокаСообщения;
		
	КонецЕсли;
	
	ДлинаКодаСЛидирующимиНулями = ДлинаКода - СтрДлина(НовыйПолныйПрефикс);
	
	Если КодЧислом = 0 Тогда
		
		КодСЛидирующимиНулями = Лев("00000000000000000000000000000000000000000000000000", ДлинаКодаСЛидирующимиНулями);
		
	Иначе
		
		ФорматнаяСтрока = "ЧЦ=%1; ЧВН=; ЧГ=0";
		ФорматнаяСтрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ФорматнаяСтрока, Строка(ДлинаКодаСЛидирующимиНулями));
		КодСЛидирующимиНулями = Формат(КодЧислом, ФорматнаяСтрока);
		
	КонецЕсли;
	
	Возврат НовыйПолныйПрефикс + КодСЛидирующимиНулями;
КонецФункции

Функция НовыйКодОбъектаПоБазовомуКоду(Знач ФорматНовогоКода, Знач БазовыйКод, Знач ЭтоДокумент, Объект)
	
	НовыйПолныйПрефикс = ПолныйПрефикс(ФорматНовогоКода);
	
	ДлинаКода = СтрДлина(ФорматНовогоКода);
	
	БазовыйКод = УдалитьЛидирующиеНули(БазовыйКод);
	
	КоличествоЛидирующихНулей = ДлинаКода - СтрДлина(НовыйПолныйПрефикс) - СтрДлина(БазовыйКод);
	
	Если КоличествоЛидирующихНулей < 0 Тогда
		
		СтрокаСообщения = НСтр("ru = 'Преобразование %1 объекта %2 не может быть выполнено.
			|Недостаточная длина %1. Минимальная длина %1 объекта должна составлять %3 символов.'");
		СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, ?(ЭтоДокумент, НСтр("ru = 'номера'"), НСтр("ru = 'кода'")),
			Строка(Объект), Строка(СтрДлина(НовыйПолныйПрефикс) + СтрДлина(БазовыйКод)));
		ВызватьИсключение СтрокаСообщения;
		
	КонецЕсли;
	
	СтрокаНулей = Лев("00000000000000000000000000000000000000000000000000", КоличествоЛидирующихНулей);
	
	Возврат НовыйПолныйПрефикс + СтрокаНулей + БазовыйКод;
КонецФункции

Функция ЧисловойКодОбъекта(Знач Код)
	
	Результат = "";
	
	Пока СтрДлина(Код) > 0 Цикл
		
		Символ = Прав(Код, 1);
		
		Если СтрНайти("0123456789", Символ) > 0 Тогда
			Результат = Символ + Результат;
		Иначе
			Прервать;
		КонецЕсли;
		
		Код = Лев(Код, СтрДлина(Код) - 1);
		
	КонецЦикла;
	
	Возврат ?(ПустаяСтрока(Результат), 0, Число(Результат));
КонецФункции

Функция ПолныйПрефикс(Знач Код)
	
	Пока СтрДлина(Код) > 0 Цикл
		
		Символ = Прав(Код, 1);
		
		Если СтрНайти("0123456789", Символ) = 0 Тогда
			Прервать;
		КонецЕсли;
		
		Код = Лев(Код, СтрДлина(Код) - 1);
		
	КонецЦикла;
	
	Возврат Код;
КонецФункции

Функция ПодпискиНаСобытияПоИмениОбработчика(Знач ИмяОбработчика)
	
	Результат = Новый Массив;
	
	ВРегИмяОбработчика = ВРег(ИмяОбработчика);
	
	Для Каждого ОбъектМетаданных Из Метаданные.ПодпискиНаСобытия Цикл
		
		Если ВРег(ОбъектМетаданных.Обработчик) = ВРегИмяОбработчика Тогда
			
			Результат.Добавить(ОбъектМетаданных);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция УдалитьЛидирующиеНули(Знач Код)
	
	Пока СтрДлина(Код) > 0 Цикл
		
		Если Не СтрНачинаетсяС(Код, "0") Тогда
			Прервать;
		КонецЕсли;
		
		Код = Прав(Код, СтрДлина(Код) - 1);
		
	КонецЦикла;
	
	Возврат ?(ПустаяСтрока(Код), "0", Код);
КонецФункции

Процедура ДополнитьТаблицуМетаданных(Результат, Знач ИмяОбработчика)
	
	РазделениеВключено = ОбщегоНазначенияПовтИсп.РазделениеВключено();
	
	Для Каждого Подписка Из ПодпискиНаСобытияПоИмениОбработчика(ИмяОбработчика) Цикл
		
		Для Каждого ТипИсточника Из Подписка.Источник.Типы() Цикл
			
			МетаданныеИсточника = Метаданные.НайтиПоТипу(ТипИсточника);
			
			ИмяОбъекта = МетаданныеИсточника.ПолноеИмя();
			
			Если Результат.Найти(ИмяОбъекта, "ИмяОбъекта") <> Неопределено Тогда
				
				Продолжить;
				
			ИначеЕсли РазделениеВключено Тогда
					
				Если Не ОбщегоНазначенияПовтИсп.ЭтоРазделенныйОбъектМетаданных(ИмяОбъекта, ОбщегоНазначенияПовтИсп.РазделительВспомогательныхДанных())
					И Не ОбщегоНазначенияПовтИсп.ЭтоРазделенныйОбъектМетаданных(ИмяОбъекта, ОбщегоНазначенияПовтИсп.РазделительОсновныхДанных())Тогда
					
					Продолжить;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Справочник             = Ложь;
			ПланВидовХарактеристик = Ложь;
			Документ               = Ложь;
			БизнесПроцесс          = Ложь;
			Задача                 = Ложь;
			
			Если ОбщегоНазначения.ЭтоСправочник(МетаданныеИсточника) Тогда
				
				Справочник = Истина;
				
			ИначеЕсли ОбщегоНазначения.ЭтоДокумент(МетаданныеИсточника) Тогда
				
				Документ = Истина;
				
			ИначеЕсли ОбщегоНазначения.ЭтоПланВидовХарактеристик(МетаданныеИсточника) Тогда
				
				ПланВидовХарактеристик = Истина;
				
			ИначеЕсли ОбщегоНазначения.ЭтоБизнесПроцесс(МетаданныеИсточника) Тогда
				
				БизнесПроцесс = Истина;
				
			ИначеЕсли ОбщегоНазначения.ЭтоЗадача(МетаданныеИсточника) Тогда
				
				Задача = Истина;
				
			Иначе
				Продолжить;
			КонецЕсли;
			
			ЭтоСправочник = Справочник ИЛИ ПланВидовХарактеристик;
			ЭтоДокумент = Документ ИЛИ БизнесПроцесс ИЛИ Задача;
			
			ОписаниеОбъекта = Результат.Добавить();
			ОписаниеОбъекта.Имя = МетаданныеИсточника.Имя;
			ОписаниеОбъекта.ИмяОбъекта = ИмяОбъекта;
			
			ОписаниеОбъекта.Справочник             = Справочник;
			ОписаниеОбъекта.ПланВидовХарактеристик = ПланВидовХарактеристик;
			ОписаниеОбъекта.Документ               = Документ;
			ОписаниеОбъекта.БизнесПроцесс          = БизнесПроцесс;
			ОписаниеОбъекта.Задача                 = Задача;
			
			ОписаниеОбъекта.ЭтоСправочник = ЭтоСправочник;
			ОписаниеОбъекта.ЭтоДокумент = ЭтоДокумент;
			
			ОписаниеОбъекта.ПериодичностьНомера = ПериодичностьНомераОбъекта(МетаданныеИсточника, Документ, БизнесПроцесс);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УвеличитьСчетчикОбработанныхОбъектов(СчетчикОбработанныхОбъектов)
	
	СчетчикОбработанныхОбъектов = СчетчикОбработанныхОбъектов + 1;
	
КонецПроцедуры

Процедура ДополнитьСтрокуНулямиСлева(Строка, ДлинаСтроки)
	
	Строка = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(Строка, ДлинаСтроки, "0", "Слева");
	
КонецПроцедуры

//

Функция МетаданныеИспользующиеПрефиксИнформационнойБазы()
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Имя");
	Результат.Колонки.Добавить("ИмяОбъекта");
	Результат.Колонки.Добавить("ЭтоСправочник");
	Результат.Колонки.Добавить("ЭтоДокумент");
	Результат.Колонки.Добавить("Справочник");
	Результат.Колонки.Добавить("ПланВидовХарактеристик");
	Результат.Колонки.Добавить("Документ");
	Результат.Колонки.Добавить("БизнесПроцесс");
	Результат.Колонки.Добавить("Задача");
	Результат.Колонки.Добавить("ПериодичностьНомера");
	
	ДополнитьТаблицуМетаданных(Результат, "ПрефиксацияОбъектовСобытия.УстановитьПрефиксИнформационнойБазы");
	ДополнитьТаблицуМетаданных(Результат, "ПрефиксацияОбъектовСобытия.УстановитьПрефиксИнформационнойБазыИОрганизации");
	
	Возврат Результат;
КонецФункции

Функция МетаданныеИспользующиеПрефиксИнформационнойБазыИОрганизации()
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Имя");
	Результат.Колонки.Добавить("ИмяОбъекта");
	Результат.Колонки.Добавить("ЭтоСправочник");
	Результат.Колонки.Добавить("ЭтоДокумент");
	Результат.Колонки.Добавить("Справочник");
	Результат.Колонки.Добавить("ПланВидовХарактеристик");
	Результат.Колонки.Добавить("Документ");
	Результат.Колонки.Добавить("БизнесПроцесс");
	Результат.Колонки.Добавить("Задача");
	Результат.Колонки.Добавить("ПериодичностьНомера");
	
	ДополнитьТаблицуМетаданных(Результат, "ПрефиксацияОбъектовСобытия.УстановитьПрефиксИнформационнойБазыИОрганизации");
	
	Возврат Результат;
КонецФункции

Функция МетаданныеИспользующиеТолькоПрефиксИнформационнойБазы()
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Имя");
	Результат.Колонки.Добавить("ИмяОбъекта");
	Результат.Колонки.Добавить("ЭтоСправочник");
	Результат.Колонки.Добавить("ЭтоДокумент");
	Результат.Колонки.Добавить("Справочник");
	Результат.Колонки.Добавить("ПланВидовХарактеристик");
	Результат.Колонки.Добавить("Документ");
	Результат.Колонки.Добавить("БизнесПроцесс");
	Результат.Колонки.Добавить("Задача");
	Результат.Колонки.Добавить("ПериодичностьНомера");
	
	ДополнитьТаблицуМетаданных(Результат, "ПрефиксацияОбъектовСобытия.УстановитьПрефиксИнформационнойБазы");
	
	Возврат Результат;
КонецФункции

Функция СоздатьОбъект(ОписаниеОбъекта)
	
	Если ОписаниеОбъекта.Справочник Тогда
		
		Возврат Справочники[ОписаниеОбъекта.Имя].СоздатьЭлемент();
		
	ИначеЕсли ОписаниеОбъекта.Документ Тогда
		
		Возврат Документы[ОписаниеОбъекта.Имя].СоздатьДокумент();
		
	ИначеЕсли ОписаниеОбъекта.ПланВидовХарактеристик Тогда
		
		Возврат ПланыВидовХарактеристик[ОписаниеОбъекта.Имя].СоздатьЭлемент();
		
	ИначеЕсли ОписаниеОбъекта.БизнесПроцесс Тогда
		
		Возврат БизнесПроцессы[ОписаниеОбъекта.Имя].СоздатьБизнесПроцесс();
		
	ИначеЕсли ОписаниеОбъекта.Задача Тогда
		
		Возврат Задачи[ОписаниеОбъекта.Имя].СоздатьЗадачу();
		
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

Функция ПериодичностьНомераОбъекта(Объект, Знач Документ, Знач БизнесПроцесс)
	
	Результат = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Непериодический;
	
	Если Документ Тогда
		
		Результат = Объект.ПериодичностьНомера;
		
	ИначеЕсли БизнесПроцесс Тогда
		
		Если Объект.ПериодичностьНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераБизнесПроцесса.Год Тогда
			
			Результат = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Год;
			
		ИначеЕсли Объект.ПериодичностьНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераБизнесПроцесса.День Тогда
			
			Результат = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.День;
			
		ИначеЕсли Объект.ПериодичностьНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераБизнесПроцесса.Квартал Тогда
			
			Результат = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Квартал;
			
		ИначеЕсли Объект.ПериодичностьНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераБизнесПроцесса.Месяц Тогда
			
			Результат = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Месяц;
			
		ИначеЕсли Объект.ПериодичностьНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераБизнесПроцесса.Непериодический Тогда
			
			Результат = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Непериодический;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция ДатаПериода(Знач Дата, Знач Периодичность)
	
	Если Периодичность = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Год Тогда
		
		Возврат НачалоГода(Дата);
		
	ИначеЕсли Периодичность = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Квартал Тогда
		
		Возврат НачалоКвартала(Дата);
		
	ИначеЕсли Периодичность = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Месяц Тогда
		
		Возврат НачалоМесяца(Дата);
		
	ИначеЕсли Периодичность = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.День Тогда
		
		Возврат НачалоДня(Дата);
		
	ИначеЕсли Периодичность = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Непериодический Тогда
		
		Возврат Дата('00010101');
		
	КонецЕсли;
	
	Возврат Дата('00010101');
КонецФункции

Процедура УстановитьНовыйПрефикс(
						Знач ДлинаПрефикса,
						Знач ОписаниеОбъекта,
						Знач СДаты,
						Знач ПредыдущийПрефиксИнформационнойБазы,
						Знач ОбрабатыватьВсеДанные,
						Знач НовыйПрефиксПолный,
						СчетчикОбработанныхОбъектов)
	
	Выборка = ВыборкаДанных(
			ОписаниеОбъекта.ИмяОбъекта,
			СДаты,
			ОписаниеОбъекта.ЭтоДокумент,
			Истина,
			ПредыдущийПрефиксИнформационнойБазы,
			ОбрабатыватьВсеДанные);
	
	Если Выборка.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Выборка.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ДлинаПрефикса = 2 Тогда
			
			Если Сред(Выборка.Код, 3, 1) <> "-" Тогда
				Продолжить; // Нестандартный формат кода
			КонецЕсли;
			
			КодНовый = НовыйПрефиксПолный + Сред(Выборка.Код, 3);
			
		Иначе // ДлинаПрефикса = 4
			
			Если Сред(Выборка.Код, 5, 1) <> "-" Тогда
				Продолжить; // Нестандартный формат кода
			КонецЕсли;
			
			КодНовый = Лев(Выборка.Код, 2) + НовыйПрефиксПолный + Сред(Выборка.Код, 5);
			
		КонецЕсли;
		
		ОбъектМодифицирован = (Выборка.Код <> КодНовый);
		
		Если ОбъектМодифицирован Тогда
			
			Объект = Выборка.Ссылка.ПолучитьОбъект();
			
			Объект[?(ОписаниеОбъекта.ЭтоДокумент, "Номер", "Код")] = КодНовый;
			
			Объект.ОбменДанными.Загрузка = Истина;
			Объект.Записать();
			
			УвеличитьСчетчикОбработанныхОбъектов(СчетчикОбработанныхОбъектов);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьВозможностьУстановкиПрефикса()
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОбменДанными") Тогда
		
		ВызватьИсключение НСтр("ru='Перепрефиксация объектов недоступна.'");
		
	КонецЕсли;
	
КонецПроцедуры

Функция СобытиеЖурналаРегистрацииПерепрефиксацияОбъектов()
	
	Возврат НСтр("ru = 'Префиксация объектов.Изменение префикса информационной базы'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработчики условных вызовов в другие подсистемы.

// Возвращает префикс этой информационной базы.
//
Процедура ПриОпределенииПрефиксаИнформационнойБазы(ПрефиксИнформационнойБазы) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОбменДанными") Тогда
		МодульОбменДаннымиСервер = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиСервер");
		ПрефиксИнформационнойБазы = МодульОбменДаннымиСервер.ПрефиксИнформационнойБазы();
	Иначе
		ПрефиксИнформационнойБазы = "";
	КонецЕсли;
	
КонецПроцедуры

// Возвращает префикс организации.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - организация для которой надо получить префикс.
//  ПрефиксОрганизации - Строка - префикс организации.
//
Процедура ПриОпределенииПрефиксаОрганизации(Знач Организация, ПрефиксОрганизации) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Организации") Тогда
		ИмяФункциональнойОпции = "ПрефиксыОрганизаций";
		ПрефиксОрганизации = ПолучитьФункциональнуюОпцию(ИмяФункциональнойОпции, Новый Структура("Организация", Организация));
	Иначе
		ПрефиксОрганизации = "";
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает префикс этой информационной базы.
//
Процедура УстановитьПрефиксИнформационнойБазы(Знач Префикс)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОбменДанными") Тогда
		МодульОбменДаннымиСервер = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиСервер");
		МодульОбменДаннымиСервер.УстановитьПрефиксИнформационнойБазы(Префикс);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
