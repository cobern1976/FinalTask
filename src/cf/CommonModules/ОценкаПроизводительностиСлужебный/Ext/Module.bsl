////////////////////////////////////////////////////////////////////////////////
// Подсистема "Оценка производительности".
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// См. описание этой же процедуры в модуле СтандартныеПодсистемыСервер.
Процедура ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики) Экспорт
	
	// КЛИЕНТСКИЕ ОБРАБОТЧИКИ.
	
	КлиентскиеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПередЗавершениемРаботыСистемы"].Добавить(
		"ОценкаПроизводительностиКлиент");
	
	// СЕРВЕРНЫЕ ОБРАБОТЧИКИ.
		
	СерверныеОбработчики[
		"СтандартныеПодсистемы.БазоваяФункциональность\ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам"].Добавить(
			"ОценкаПроизводительностиСлужебный");
			
	СерверныеОбработчики[
		"СтандартныеПодсистемы.ОбновлениеВерсииИБ\ПриДобавленииОбработчиковОбновления"].Добавить(
			"ОценкаПроизводительностиСлужебный");
	
КонецПроцедуры

// Добавляет процедуры-обработчики обновления, необходимые данной подсистеме.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                  общего модуля ОбновлениеИнформационнойБазы.
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.1.38";
	Обработчик.Процедура = "ОценкаПроизводительностиСлужебный.ЗаполнитьИмяХеш";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.МонопольныйРежим = Истина;
	Обработчик.Версия = "2.3.1.74";
	Обработчик.Процедура = "ОценкаПроизводительностиСлужебный.ЗаполнитьИмяХеш";
	
КонецПроцедуры

// Возвращает соответствие имен параметров сеанса и обработчиков для их инициализации.
//
Процедура ПриДобавленииОбработчиковУстановкиПараметровСеанса(Обработчики) Экспорт
	
	Обработчики.Вставить("КомментарийЗамераВремени", "ОценкаПроизводительностиСлужебный.УстановкаПараметровСеанса");
	
КонецПроцедуры

// Получает N худших замеров производительности за период
// Параметры:
//	ДатаНачала - ДатаВремя - Начало периода выборки
//	ДатаОкончания - ДатаВремя - Окончание периода выборка
//	ТопApdexКоличество - Число - Количество худших замеров, если но, то возвращаются все замеры.
//
Функция ПолучитьТопAPDEX(ДатаНачала, ДатаОкончания, ПериодАгрегации, ТопApdexКоличество) Экспорт
	Возврат РегистрыСведений.ЗамерыВремени.ПолучитьТопAPDEX(ДатаНачала, ДатаОкончания, ПериодАгрегации, ТопApdexКоличество);
КонецФункции

// Получает N худших замеров производительности технологической за период
// Параметры:
//	ДатаНачала - ДатаВремя - Начало периода выборки
//	ДатаОкончания - ДатаВремя - Окончание периода выборка
//	ТопApdexКоличество - Число - Количество худших замеров, если но, то возвращаются все замеры.
//
Функция ПолучитьТопAPDEXТехнологический(ДатаНачала, ДатаОкончания, ПериодАгрегации, ТопApdexКоличество) Экспорт
	Возврат РегистрыСведений.ЗамерыВремениТехнологические.ПолучитьТопAPDEX(ДатаНачала, ДатаОкончания, ПериодАгрегации, ТопApdexКоличество);
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработчики условных вызовов в эту подсистему.

// См. одноименную процедуру в общем модуле ПользователиПереопределяемый.
Процедура ПриОпределенииНазначенияРолей(НазначениеРолей) Экспорт
	
	// ТолькоДляПользователейСистемы.
	НазначениеРолей.ТолькоДляПользователейСистемы.Добавить(
		Метаданные.Роли.НастройкаИОценкаПроизводительности.Имя);
	
КонецПроцедуры

// См. описание одноименной процедуры в общем модуле РегламентныеЗаданияПереопределяемый.
//
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Зависимости) Экспорт
	Зависимость = Зависимости.Добавить();
	Зависимость.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ЭкспортОценкиПроизводительности;
	Зависимость.РаботаетСВнешнимиРесурсами = Истина;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий подсистем БСП

// Устанавливает параметры сеанса подсистемы оценки производительности.
//
// Параметры:
//  ИмяПараметра - Строка - имя параметра сеанса, значение которого необходимо установить.
//  УстановленныеПараметры - массив - в данный параметр помещается информация об установленных параметрах сеанса.
// 
Процедура УстановкаПараметровСеанса(ИмяПараметра, УстановленныеПараметры) Экспорт
	
	// Инициализация параметров сеанса должна выполняться без обращения к параметрам работы программы.
	
	Если ИмяПараметра = "КомментарийЗамераВремени" Тогда
		ПараметрыСеанса.КомментарийЗамераВремени = ПолучитьКомментарийЗамераВремени();
		УстановленныеПараметры.Добавить("КомментарийЗамераВремени");
		Возврат;
	КонецЕсли;
КонецПроцедуры

// Заполняет перечень запросов внешних разрешений, которые обязательно должны быть предоставлены
// при создании информационной базы или обновлении программы.
//
// Параметры:
//  ЗапросыРазрешений - Массив - список значений, возвращенных функцией
//                      РаботаВБезопасномРежиме.ЗапросНаИспользованиеВнешнихРесурсов().
//
Процедура ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений) Экспорт
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() И ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат;
	КонецЕсли;
	
	КаталогиЭкспорта = КаталогиЭкспортаОценкиПроизводительности();
	Если КаталогиЭкспорта = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(КаталогиЭкспорта.FTPКаталогЭкспорта);
	КаталогиЭкспорта.Вставить("FTPКаталогЭкспорта", СтруктураURI.ИмяСервера);
	Если ЗначениеЗаполнено(СтруктураURI.Порт) Тогда
		КаталогиЭкспорта.Вставить("FTPКаталогЭкспортаПорт", СтруктураURI.Порт);
	КонецЕсли;
	
	ЗапросыРазрешений.Добавить(
		РаботаВБезопасномРежиме.ЗапросНаИспользованиеВнешнихРесурсов(
			РазрешенияНаРесурсыСервера(КаталогиЭкспорта), 
				ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Константа.ВыполнятьЗамерыПроизводительности")));
	
КонецПроцедуры

// Заполняет параметр сеанса "КомментарийЗамераВремени"
// при запуске программы.
//
Функция ПолучитьКомментарийЗамераВремени()
	СистемнаяИнформация = Новый СистемнаяИнформация();
	ВерсияПриложения = СистемнаяИнформация.ВерсияПриложения;
	ВерсияКонфигурации = Метаданные.Синоним + ", версия " + Метаданные.Версия;
	Разделители = "";
	
	РазделениеДанных = ПользователиИнформационнойБазы.ТекущийПользователь().РазделениеДанных;
	Если РазделениеДанных.Количество() <> 0 Тогда
		Для Каждого ТекРазделитель Из РазделениеДанных Цикл
			Разделители = Разделители + ТекРазделитель.Значение + ","; 
		КонецЦикла;
	Иначе
		Разделители = "0,";
	КонецЕсли;
	Разделители = Лев(Разделители, СтрДлина(Разделители) - 1);
	
	КомментарийЗамераВремени = ВерсияПриложения
		+ ";"
		+ ВерсияКонфигурации
		+ ";"
		+ Разделители;
		
	Возврат КомментарийЗамераВремени;
КонецФункции

// Только для внутреннего использования.
Функция ЗапросНаИспользованиеВнешнихРесурсов(Каталоги) Экспорт
	
	Возврат РаботаВБезопасномРежиме.ЗапросНаИспользованиеВнешнихРесурсов(
				РазрешенияНаРесурсыСервера(Каталоги), 
					ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Константа.ВыполнятьЗамерыПроизводительности"));
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Экспортные служебные процедуры и функции

// Находит и возвращает регламентное задание экспорта замеров времени
//
// Возвращаемое значение:
//  РегламентноеЗадание - РегламентноеЗадание.ЭкспортОценкиПроизводительности, найденное задание.
//
Функция РегламентноеЗаданиеЭкспортаОценкиПроизводительности() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Задания = РегламентныеЗадания.ПолучитьРегламентныеЗадания(
		Новый Структура("Метаданные", "ЭкспортОценкиПроизводительности"));
	Если Задания.Количество() = 0 Тогда
		Задание = РегламентныеЗадания.СоздатьРегламентноеЗадание(
			Метаданные.РегламентныеЗадания.ЭкспортОценкиПроизводительности);
		Задание.Записать();
		Возврат Задание;
	Иначе
		Возврат Задания[0];
	КонецЕсли;
		
КонецФункции

// Возвращает каталоги экспорта файлов с результатами замеров
//
// Параметры:
//	Нет
//
// Возвращаемое значение:
//    Структура
//        "ВыполнятьЭкспортНаFTP"              - Булево - Признак выполнения экспорта на FTP
//        "FTPКаталогЭкспорта"                - Строка - FTP-каталог экспорта
//        "ВыполнятьЭкспортВЛокальныйКаталог" - Булево - Признак выполнения экспорта в локальный каталог
//        "ЛокальныйКаталогЭкспорта"          - Строка - Локальный каталог экспорта.
//
Функция КаталогиЭкспортаОценкиПроизводительности() Экспорт
	
	Задание = РегламентноеЗаданиеЭкспортаОценкиПроизводительности();
	Каталоги = Новый Структура;
	Если Задание.Параметры.Количество() > 0 Тогда
		Каталоги = Задание.Параметры[0];
	КонецЕсли;
	
	Если ТипЗнч(Каталоги) <> Тип("Структура") ИЛИ Каталоги.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ВыполнятьЭкспортНаFTP");
	ВозвращаемоеЗначение.Вставить("FTPКаталогЭкспорта");
	ВозвращаемоеЗначение.Вставить("ВыполнятьЭкспортВЛокальныйКаталог");
	ВозвращаемоеЗначение.Вставить("ЛокальныйКаталогЭкспорта");
	
	КлючЗаданияВЭлементы = Новый Структура;
	FTPЭлементы = Новый Массив;
	FTPЭлементы.Добавить("ВыполнятьЭкспортНаFTP");
	FTPЭлементы.Добавить("FTPКаталогЭкспорта");
	
	ЛокальныйЭлементы = Новый Массив;
	ЛокальныйЭлементы.Добавить("ВыполнятьЭкспортВЛокальныйКаталог");
	ЛокальныйЭлементы.Добавить("ЛокальныйКаталогЭкспорта");
	
	КлючЗаданияВЭлементы.Вставить(ОценкаПроизводительностиКлиентСервер.FTPКаталогЭкспортаКлючЗадания(), FTPЭлементы);
	КлючЗаданияВЭлементы.Вставить(ОценкаПроизводительностиКлиентСервер.ЛокальныйКаталогЭкспортаКлючЗадания(), ЛокальныйЭлементы);
	ВыполнятьЭкспорт = Ложь;
	Для Каждого ИмяКлючаЭлементы Из КлючЗаданияВЭлементы Цикл
		ИмяКлюча = ИмяКлючаЭлементы.Ключ;
		ЭлементыНаРедактирование = ИмяКлючаЭлементы.Значение;
		НомерЭлемента = 0;
		Для Каждого ЭлементИмя Из ЭлементыНаРедактирование Цикл
			Значение = Каталоги[ИмяКлюча][НомерЭлемента];
			ВозвращаемоеЗначение[ЭлементИмя] = Значение;
			Если НомерЭлемента = 0 Тогда 
				ВыполнятьЭкспорт = ВыполнятьЭкспорт ИЛИ Значение;
			КонецЕсли;
			НомерЭлемента = НомерЭлемента + 1;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Возвращает ссылку на элемент "Общая производительность",
// Если существует предопределенный элемент "ОбщаяПроизводительностьСистемы", то возвращается этот элемент
// В противном случае возвращается пустая ссылка.
//
// Параметры:
//	Нет
// Возвращаемое значение:
//	СправочникСсылка.КлючевыеОперации
//
Функция ПолучитьЭлементОбщаяПроизводительностьСистемы() Экспорт
	
	ПредопределенныеКО = Метаданные.Справочники.КлючевыеОперации.ПолучитьИменаПредопределенных();
	ЕстьПредопределенныйЭлемент = ?(ПредопределенныеКО.Найти("ОбщаяПроизводительностьСистемы") <> Неопределено, Истина, Ложь);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КлючевыеОперации.Ссылка,
	|	2 КАК Приоритет
	|ИЗ
	|	Справочник.КлючевыеОперации КАК КлючевыеОперации
	|ГДЕ
	|	КлючевыеОперации.Имя = ""ОбщаяПроизводительностьСистемы""
	|	И НЕ КлючевыеОперации.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗНАЧЕНИЕ(Справочник.КлючевыеОперации.ПустаяСсылка),
	|	3
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	
	Если ЕстьПредопределенныйЭлемент Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	КлючевыеОперации.Ссылка,
		|	1 КАК Приоритет
		|ИЗ
		|	Справочник.КлючевыеОперации КАК КлючевыеОперации
		|ГДЕ
		|	КлючевыеОперации.ИмяПредопределенныхДанных = ""ОбщаяПроизводительностьСистемы""
		|	И НЕ КлючевыеОперации.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|" + ТекстЗапроса;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("КлючевыеОперации", ПредопределенныеКО);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Ссылка;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Локальные служебные процедуры и функции

// Формирует массив разрешений для экспорта данных замеров
// 
// Параметры - КаталогиЭкспорта - Структура
//
// Возвращаемое значение:
//	Массив
Функция РазрешенияНаРесурсыСервера(Каталоги)
	
	Разрешения = Новый Массив;
	
	Если Каталоги <> Неопределено Тогда
		Если Каталоги.Свойство("ВыполнятьЭкспортВЛокальныйКаталог") И Каталоги.ВыполнятьЭкспортВЛокальныйКаталог = Истина Тогда
			Если Каталоги.Свойство("ЛокальныйКаталогЭкспорта") И ЗначениеЗаполнено(Каталоги.ЛокальныйКаталогЭкспорта) Тогда
				Элемент = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеКаталогаФайловойСистемы(
					Каталоги.ЛокальныйКаталогЭкспорта,
					Истина,
					Истина,
					НСтр("ru = 'Сетевой каталог для экспорта результатов замеров производительности.'"));
				Разрешения.Добавить(Элемент);
			КонецЕсли;
		КонецЕсли;
		
		Если Каталоги.Свойство("ВыполнятьЭкспортНаFTP") И Каталоги.ВыполнятьЭкспортНаFTP = Истина Тогда
			Если Каталоги.Свойство("FTPКаталогЭкспорта") И ЗначениеЗаполнено(Каталоги.FTPКаталогЭкспорта) Тогда
				Элемент = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
					"FTP",
					Каталоги.FTPКаталогЭкспорта,
					?(Каталоги.Свойство("FTPКаталогЭкспортаПорт"), Каталоги.FTPКаталогЭкспортаПорт, Неопределено),
					НСтр("ru = 'FTP-ресурс для экспорта результатов замеров производительности.'"));
				Разрешения.Добавить(Элемент);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Разрешения;
КонецФункции

Процедура ЗаполнитьИмяХеш() Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Справочник.КлючевыеОперации");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	Ссылка
		|ИЗ
		|	Справочник.КлючевыеОперации
		|ГДЕ
		|	ИмяХеш = """"
		|";
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			СпрОбъект = Выборка.Ссылка.ПолучитьОбъект();
			СпрОбъект.ОбменДанными.Загрузка = Истина;
			
			ХешMD5 = Новый ХешированиеДанных(ХешФункция.MD5);
			ХешMD5.Добавить(СпрОбъект.Имя);
			ИмяХешТемп = ХешMD5.ХешСумма;
			СпрОбъект.ИмяХеш = СтрЗаменить(Строка(ИмяХешТемп), " ", "");
			
			СпрОбъект.Записать();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
 		ЗаписьЖурналаРегистрации(НСтр("ru = 'Выполнение операции'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
 		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

