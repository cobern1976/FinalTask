////////////////////////////////////////////////////////////////////////////////
// Демонстрационная конфигурация Библиотеки стандартных подсистем.
// 
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Демонстрация подсистемы "Печать".

// Формирует печатные формы документов Счет на оплату покупателю с использованием макета в формате офисного документа.
Функция ПечатьСчетовНаОплатуПокупателю(ПараметрыПечати) Экспорт
	
	ИмяМенеджераПечати = ПараметрыПечати.МенеджерПечати;
	ИмяМакета = ПараметрыПечати.Идентификатор;
	СоставДокументов = ПараметрыПечати.ОбъектыПечати;
	ФормаИсточник = ПараметрыПечати.Форма;
	
	ТекстСообщения = ?(СоставДокументов.Количество() > 1, 
		НСтр("ru = 'Выполняется формирование печатных форм...'"),
		НСтр("ru = 'Выполняется формирование печатной формы...'"));
	Состояние(ТекстСообщения);
	
	МакетИДанныеОбъекта = УправлениеПечатьюВызовСервера.МакетыИДанныеОбъектовДляПечати(ИмяМенеджераПечати, ИмяМакета, СоставДокументов);
	
	Для Каждого ДокументСсылка Из СоставДокументов Цикл
		НапечататьСчетНаОплатуПокупателю(ДокументСсылка, МакетИДанныеОбъекта, ИмяМакета);
	КонецЦикла;
	
КонецФункции
	
// Формирует печатную форму документа Счет на оплату покупателю с использованием макета в формате офисного документа.
Процедура НапечататьСчетНаОплатуПокупателю(ДокументСсылка, МакетИДанныеОбъекта, ИмяМакета)
	
	ТипМакета				= МакетИДанныеОбъекта.Макеты.ТипыМакетов[ИмяМакета];
	ДвоичныеДанныеМакетов	= МакетИДанныеОбъекта.Макеты.ДвоичныеДанныеМакетов;
	Области					= МакетИДанныеОбъекта.Макеты.ОписаниеОбластей;
	ДанныеОбъекта = МакетИДанныеОбъекта.Данные[ДокументСсылка][ИмяМакета];
	
	Макет = УправлениеПечатьюКлиент.ИнициализироватьМакетОфисногоДокумента(ДвоичныеДанныеМакетов[ИмяМакета], ТипМакета, ИмяМакета);
	Если Макет = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗакрытьОкноПечатнойФормы = Ложь;
	Попытка
		ПечатнаяФорма = УправлениеПечатьюКлиент.ИнициализироватьПечатнуюФорму(ТипМакета, Макет.НастройкиСтраницыМакета, Макет);
		Если ПечатнаяФорма = Неопределено Тогда
			УправлениеПечатьюКлиент.ОчиститьСсылки(Макет);
			Возврат;
		КонецЕсли;
		
		// Вывод колонтитулов документа.
		Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ВерхнийКолонтитул"]);
		УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта, Ложь);
		
		Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["НижнийКолонтитул"]);
		УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область);
		
		// Вывод верхней части документа - обычная область с параметрами.
		Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["Заголовок"]);
		УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта, Ложь);
		
		// Вывод коллекции данных из информационной базы в виде таблицы.
		Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ШапкаТаблицыТоварыТекст"]);
		УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
		Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ШапкаТаблицыТовары"]);
		УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
		Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["СтрокаТаблицаТовары"]);
		УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область, ДанныеОбъекта.Товары, Ложь);
		
		// Вывод коллекции данных из информационной базы в виде нумерованного списка.
		Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ШапкаТоварыНоменклатура"]);
		УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
		Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ТоварыНоменклатура"]);
		УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область, ДанныеОбъекта.Товары, Ложь);
		
		// Вывод коллекции данных из информационной базы в виде списка.
		Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ШапкаТоварыВсего"]);
		УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
		Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ТоварыВсего"]);
		УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область, ДанныеОбъекта.Товары, Ложь);
		
		// Вывод нижней части документа - обычная область с параметрами.
		Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["НижняяЧасть"]);
		УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта, Ложь);
		
		УправлениеПечатьюКлиент.ПоказатьДокумент(ПечатнаяФорма);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗакрытьОкноПечатнойФормы = Истина;
		Возврат;
	КонецПопытки;
	
	УправлениеПечатьюКлиент.ОчиститьСсылки(ПечатнаяФорма, ЗакрытьОкноПечатнойФормы);
	УправлениеПечатьюКлиент.ОчиститьСсылки(Макет);
	
КонецПроцедуры

// Формирует печатные формы документов Списание товаров с использованием макета в формате офисного документа.
Процедура ПечатьСписаниеТоваров(МакетИДанныеОбъекта, ИмяМакета, СоставДокументов) Экспорт
	
	Для Каждого ДокументСсылка Из СоставДокументов Цикл
		НапечататьСписаниеТоваров(ДокументСсылка, МакетИДанныеОбъекта, ИмяМакета);
	КонецЦикла;
	
КонецПроцедуры

// Формирует печатную форму документа Списание товаров с использованием макета в формате офисного документа.
Процедура НапечататьСписаниеТоваров(ДокументСсылка, МакетИДанныеОбъекта, ИмяМакета)
	
	ТипМакета				= МакетИДанныеОбъекта.Макеты.ТипыМакетов[ИмяМакета];
	ДвоичныеДанныеМакетов	= МакетИДанныеОбъекта.Макеты.ДвоичныеДанныеМакетов;
	Области					= МакетИДанныеОбъекта.Макеты.ОписаниеОбластей;
	ДанныеОбъекта = МакетИДанныеОбъекта.Данные[ДокументСсылка][ИмяМакета];
	
	Макет = УправлениеПечатьюКлиент.ИнициализироватьМакетОфисногоДокумента(ДвоичныеДанныеМакетов[ИмяМакета], ТипМакета, ИмяМакета);
	Если Макет = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗакрытьОкноПечатнойФормы = Ложь;
	Попытка
		ПечатнаяФорма = УправлениеПечатьюКлиент.ИнициализироватьПечатнуюФорму(ТипМакета, Макет.НастройкиСтраницыМакета);
		Если ПечатнаяФорма = Неопределено Тогда
			УправлениеПечатьюКлиент.ОчиститьСсылки(Макет);
			Возврат;
		КонецЕсли;
		
		// Вывод верхней части документа - обычная область с параметрами.
		Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ШапкаДокумента"]);
		УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта, Ложь);
		
		Если ДанныеОбъекта.Товары.Количество() > 0 Тогда
			// Вывод коллекции данных из информационной базы в виде таблицы.
			Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ШапкаТаблицы"]);
			УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
			
			Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["СтрокаТаблицы"]);
			УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область, ДанныеОбъекта.Товары, Ложь);
		КонецЕсли;
		
		УправлениеПечатьюКлиент.ПоказатьДокумент(ПечатнаяФорма);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗакрытьОкноПечатнойФормы = Истина;
	КонецПопытки;
	
	УправлениеПечатьюКлиент.ОчиститьСсылки(ПечатнаяФорма, ЗакрытьОкноПечатнойФормы);
	УправлениеПечатьюКлиент.ОчиститьСсылки(Макет);
	
КонецПроцедуры

// Формирует печатную форму карточки конфигурации и открывает ее в форме ПечатьДокументов.
Функция ПечатьКарточкиОрганизации(ПараметрыПечати) Экспорт
	ОбластиОбъектов = Новый СписокЗначений;
	ТабличныйДокумент = _ДемоСтандартныеПодсистемыВызовСервера.СформироватьКарточкуОрганизации(ПараметрыПечати.ОбъектыПечати, ОбластиОбъектов);
	
	ИдентификаторПечатнойФормы = "КарточкаОрганизации";
	
	КоллекцияПечатныхФорм = УправлениеПечатьюКлиент.НоваяКоллекцияПечатныхФорм(ИдентификаторПечатнойФормы);
	ПечатнаяФорма = УправлениеПечатьюКлиент.ОписаниеПечатнойФормы(КоллекцияПечатныхФорм, ИдентификаторПечатнойФормы);
	ПечатнаяФорма.СинонимМакета = НСтр("ru = 'Карточка организации'");
	ПечатнаяФорма.ТабличныйДокумент = ТабличныйДокумент;
	ПечатнаяФорма.ИмяФайлаПечатнойФормы = НСтр("ru = 'Карточка организации'");
	
	УправлениеПечатьюКлиент.ПечатьДокументов(КоллекцияПечатныхФорм, ОбластиОбъектов);
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий подсистемы ЭлектроннаяПодпись.

// См. комментарий к одноименной процедуре в модуле ЭлектроннаяПодписьПереопределяемый.
Процедура ПриДополнительнойПроверкеСертификата(Параметры) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("Параметры", Параметры);
	
	Если Параметры.Проверка = "ТестСвязиСОператором" Тогда
		
		Параметры.ОжидатьПродолжения = Истина;
		НачатьПодключениеРасширенияРаботыСФайлами(Новый ОписаниеОповещения(
			"ПриДополнительнойПроверкеСертификатаПослеПодключенияРасширенияРаботыСФайлами", ЭтотОбъект, Контекст));
		
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ПриДополнительнойПроверкеСертификата.
Процедура ПриДополнительнойПроверкеСертификатаПослеПодключенияРасширенияРаботыСФайлами(Подключено, Контекст) Экспорт
	
	ВыполнитьОбработкуОповещения(Контекст.Параметры.Оповещение);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Демонстрация подсистемы "Базовая функциональность" (ОбщегоНазначенияКлиентПереопределяемый).

Процедура ПредлагатьПерейтиНаСайтПриЗапуске(Параметры, ДополнительныеПараметры) Экспорт
	
	Оповещение = Новый ОписаниеОповещения("ПредлагатьПерейтиНаСайтПриЗапускеЗавершение", ЭтотОбъект, Параметры);
	
	ТекстВопроса = НСтр("ru = 'Перед началом работы с программой рекомендуется ознакомиться с ее документацией. 
		|Перейти на сайт сейчас?
		|
		|Этот пример демонстрирует открытие диалогов, блокирующих запуск программы,
		|из общего модуля ОбщегоНазначенияКлиентПереопределяемый.'");
		
	Кнопки = Новый СписокЗначений();
	Кнопки.Добавить("Перейти", НСтр("ru = 'Перейти на сайт'"));
	Кнопки.Добавить("Продолжить", НСтр("ru = 'Продолжить'"));
	Кнопки.Добавить("Завершить", НСтр("ru = 'Завершить работу'"));
	Кнопки.Добавить("Перезапустить", НСтр("ru = 'Перезапустить программу'"));
	
	ПараметрыВопроса = СтандартныеПодсистемыКлиент.ПараметрыВопросаПользователю();
	ПараметрыВопроса.Заголовок = НСтр("ru = 'Переход на сайт'");
	ПараметрыВопроса.БлокироватьВесьИнтерфейс = Истина;
	
	СтандартныеПодсистемыКлиент.ПоказатьВопросПользователю(Оповещение, ТекстВопроса, Кнопки, ПараметрыВопроса);
	
КонецПроцедуры
		
Процедура ПредлагатьПерейтиНаСайтПриЗапускеЗавершение(РезультатВопроса, Параметры) Экспорт
	
	Если РезультатВопроса <> Неопределено Тогда
		Если РезультатВопроса.Значение = "Перейти" Тогда
			ПерейтиПоНавигационнойСсылке("http://v8.1c.ru/libraries/ssl/");
		ИначеЕсли РезультатВопроса.Значение = "Завершить" Тогда
			Параметры.Отказ = Истина;
		ИначеЕсли РезультатВопроса.Значение = "Перезапустить" Тогда
			Параметры.Отказ = Истина;
			Параметры.Перезапустить = Истина;
		КонецЕсли;
		
		Если РезультатВопроса.БольшеНеЗадаватьЭтотВопрос Тогда
			ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить(
				"ОбщиеНастройкиПользователя",
				"ПредлагатьПерейтиНаСайтПриЗапуске",
				Ложь);
		КонецЕсли;
	КонецЕсли;
	ВыполнитьОбработкуОповещения(Параметры.ОбработкаПродолжения);
	
КонецПроцедуры

#КонецОбласти
