////////////////////////////////////////////////////////////////////////////////
// Подсистема "Оценка производительности".
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныеПроцедурыИФункции

// Метод завершающий замер времени на клиенте
//
Процедура ЗакончитьЗамерВремениАвтоНеГлобальный() Экспорт
	
	ЗакончитьЗамерВремени();
	
КонецПроцедуры

// Метод завершающий замер времени на клиенте
//
Процедура ЗакончитьРучнойЗамерВремениНеГлобальный(УИДЗамера) Экспорт
	Если ОценкаПроизводительностиВызовСервераПовтИсп.ВыполнятьЗамерыПроизводительности() Тогда
		ЗакончитьЗамерВремени(УИДЗамера);
	КонецЕсли;	
КонецПроцедуры

// Произвести запись накопленных замеров времени выполнения ключевых операций на сервере.
//
// Параметры:
//  ПередЗавершением - Булево - Истина, если метод вызывается перед закрытием приложения.
//
Процедура ЗаписатьРезультатыАвтоНеГлобальный(ПередЗавершением = Ложь) Экспорт
	
	ОценкаПроизводительностиЗамерВремени = ПараметрыПриложения["СтандартныеПодсистемы.ОценкаПроизводительностиЗамерВремени"];
	
	Если ОценкаПроизводительностиЗамерВремени <> Неопределено Тогда
		Если ОценкаПроизводительностиЗамерВремени["Замеры"].Количество() = 0 Тогда
			НовыйПериодЗаписи = ОценкаПроизводительностиЗамерВремени["ПериодЗаписи"];
		Иначе
			Замеры = ОценкаПроизводительностиЗамерВремени["Замеры"];
			АдресХранилища = ПоместитьВоВременноеХранилище(Замеры, Новый УникальныйИдентификатор("cd097b4b-fcda-4ac8-bf4f-f99e42ed928c"));
			НовыйПериодЗаписи = ОценкаПроизводительностиВызовСервера.ЗафиксироватьДлительностьКлючевыхОпераций(АдресХранилища);
			
			Если НовыйПериодЗаписи = Неопределено Тогда
				НовыйПериодЗаписи = ОценкаПроизводительностиЗамерВремени["ПериодЗаписи"];
			Иначе
				Если ПередЗавершением Тогда
					Возврат;
				КонецЕсли;
				
				ОценкаПроизводительностиЗамерВремени["ПериодЗаписи"] = НовыйПериодЗаписи;
								
				Для Каждого КлючеваяОперацияДатаДанные Из Замеры Цикл
					Буфер = КлючеваяОперацияДатаДанные.Значение;
					НаУдаление = Новый Массив;
					Для Каждого ДатаДанные Из Буфер Цикл
						КлючЗаписи = ДатаДанные.Ключ;
						Данные = ДатаДанные.Значение;
						Длительность = Данные.Получить("Длительность");
						// Это означает, что операция уже закончилась, удалять ее из буфера нужно.
						Если Длительность <> Неопределено Тогда
							НаУдаление.Добавить(КлючЗаписи);
						КонецЕсли;
					КонецЦикла;
					Для Каждого КлючЗаписи Из НаУдаление Цикл
						ОценкаПроизводительностиЗамерВремени["Замеры"][КлючеваяОперацияДатаДанные.Ключ].Удалить(КлючЗаписи);
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		ПодключитьОбработчикОжидания("ЗаписатьРезультатыАвто", НовыйПериодЗаписи, Истина);
	КонецЕсли;
КонецПроцедуры

// Процедура завершает замер времени на клиенте
// Параметры:
//  АвтоЗамер - Булево, закончен ли замер по обработчику 
//  ожидания или же нет.
Процедура ЗакончитьЗамерВремени(УИДЗамера = Неопределено)
	Если УИДЗамера = Неопределено Тогда
		УИДЗамера = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	КонецЕсли;
	
	ОценкаПроизводительностиЗамерВремени = ПараметрыПриложения["СтандартныеПодсистемы.ОценкаПроизводительностиЗамерВремени"];
	Если ОценкаПроизводительностиЗамерВремени <> Неопределено Тогда
		ДатаОкончания = ОценкаПроизводительностиКлиентСервер.ЗначениеТаймера(Ложь);
		ВремяОкончания = ОценкаПроизводительностиКлиентСервер.ЗначениеТаймера();
		
		СмещениеДатыКлиента = ПараметрыПриложения["СтандартныеПодсистемы.ОценкаПроизводительностиЗамерВремени"]["СмещениеДатыКлиента"];
		ДатаОкончания = ДатаОкончания + СмещениеДатыКлиента;
		
		Замеры = ПараметрыПриложения["СтандартныеПодсистемы.ОценкаПроизводительностиЗамерВремени"]["Замеры"];
		Для Каждого КлючеваяОперацияБуферы Из Замеры Цикл
			Для Каждого ДатаДанные Из КлючеваяОперацияБуферы.Значение Цикл
				Буфер = ДатаДанные.Значение;
				ВремяНачала = Буфер["ВремяНачала"];
				Длительность = Буфер.Получить("Длительность");
				Если Длительность = Неопределено И Буфер["УИДЗамера"] = УИДЗамера Тогда
					Буфер.Вставить("Длительность", ВремяОкончания - ВремяНачала);
					Буфер.Вставить("ВремяОкончания", ВремяОкончания);
					Буфер.Вставить("ДатаОкончания", ДатаОкончания);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий подсистем БСП

// Вызывается перед интерактивным завершением работы пользователя с областью данных.
// Соответствует событию ПередЗавершениемРаботыСистемы модулей приложения.
//
Процедура ПередЗавершениемРаботыСистемы(Параметры) Экспорт
	
	ЗаписатьРезультатыАвтоНеГлобальный(Истина);
	
КонецПроцедуры

#КонецОбласти
