////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Выгружает данные приложения в zip-архив, из которого они в дальнейшем могут быть загружены
//  в другую информационную базу или область данных с помощью функции
//  ВыгрузкаЗагрузкаОбластейДанных.ЗагрузитьТекущуюОбластьДанныхИзАрхива()
//
// Возвращаемое значение - Строка, путь к файлу выгрузки.
//
Функция ВыгрузитьТекущуюОбластьДанныхВАрхив() Экспорт
	
	ВыгружаемыеТипы = Новый Массив();
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВыгружаемыеТипы, ПолучитьТипыМоделиДанныхОбласти());
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВыгружаемыеТипы,
		ВыгрузкаЗагрузкаДанныхСлужебныйСобытия.ПолучитьТипыОбщихДанныхПоддерживающиеСопоставлениеСсылокПриЗагрузке(), Истина);
	
	ПараметрыВыгрузки = Новый Структура();
	ПараметрыВыгрузки.Вставить("ВыгружаемыеТипы", ВыгружаемыеТипы);
	ПараметрыВыгрузки.Вставить("ВыгружатьПользователей", Истина);
	ПараметрыВыгрузки.Вставить("ВыгружатьНастройкиПользователей", Истина);
	
	Возврат ВыгрузкаЗагрузкаДанных.ВыгрузитьДанныеВАрхив(ПараметрыВыгрузки);
	
	
КонецФункции

// Выгружает данные приложения в zip-архив, который помещает во временное хранилище.
//  В дальнейшем данные из архива могут быть загружены
//  в другую информационную базу или область данных с помощью функции
//  ВыгрузкаЗагрузкаОбластейДанных.ЗагрузитьТекущуюОбластьДанныхИзАрхива()
//
// Параметры:
//  АдресХранилища - Строка, адрес во временном хранилище, в который нужно поместить
//  zip-архив с данными.
//
Процедура ВыгрузитьТекущуюОбластьДанныхВоВременноеХранилище(АдресХранилища) Экспорт
	
	ИмяФайла = ВыгрузитьТекущуюОбластьДанныхВАрхив();
	
	Попытка
		
		ДанныеВыгрузки = Новый ДвоичныеДанные(ИмяФайла);
		ПоместитьВоВременноеХранилище(ДанныеВыгрузки, АдресХранилища);
		
		ВыгрузкаЗагрузкаДанныхСлужебный.УдалитьВременныйФайл(ИмяФайла);
		
	Исключение
		
		ТекстИсключения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ВыгрузкаЗагрузкаДанныхСлужебный.УдалитьВременныйФайл(ИмяФайла);
		
		ВызватьИсключение ТекстИсключения;
		
	КонецПопытки;
	
КонецПроцедуры

// Загружает данные приложения из zip архива с XML файлами.
//
// Параметры:
//  ИмяАрхива - Строка - полное имя файла архива с данными,
//  ПараметрыЗагрузки - Структура, содержащая параметры загрузки данных.
//    Ключи:
//      ЗагружаемыеТипы - Массив(ОбъектМетаданных) - массив объектов метаданных, данные
//        которых требуется загрузить из архива. Если значение параметра задано - все прочие
//        данные, содержащиеся в файле выгрузки, загружены не будут. Если значение параметра
//        не задано - будут загружены все данные, содержащиеся в файле выгрузки.
//      ЗагружатьПользователей - Булево - загружать информацию о пользователях информационной базы,
//      ЗагружатьНастройкиПользователей - Булево, игнорируется, если ЗагружатьПользователей = Ложь.
//    Также структура может содержать дополнительные ключи, которые могут быть обработаны внутри
//      произвольных обработчиков загрузки данных.
//
Процедура ЗагрузитьТекущуюОбластьДанныхИзАрхива(Знач ИмяАрхива, Знач ЗагружатьПользователей = Ложь, Знач СвернутьЭлементыСправочникаПользователи = Ложь) Экспорт
	
	ЗагружаемыеТипы = Новый Массив();
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ЗагружаемыеТипы, ПолучитьТипыМоделиДанныхОбласти());
	
	Если Не ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ЗагружаемыеТипы,
			ВыгрузкаЗагрузкаДанныхСлужебныйСобытия.ПолучитьТипыОбщихДанныхПоддерживающиеСопоставлениеСсылокПриЗагрузке(), Истина);
	КонецЕсли;
	
	ПараметрыЗагрузки = Новый Структура();
	ПараметрыЗагрузки.Вставить("ЗагружаемыеТипы", ЗагружаемыеТипы);
	
	Если ТехнологияСервисаИнтеграцияСБСП.РазделениеВключено() Тогда
		
		ПараметрыЗагрузки.Вставить("ЗагружатьПользователей", Ложь);
		ПараметрыЗагрузки.Вставить("ЗагружатьНастройкиПользователей", Ложь);
		
	Иначе
		
		ПараметрыЗагрузки.Вставить("ЗагружатьПользователей", ЗагружатьПользователей);
		ПараметрыЗагрузки.Вставить("ЗагружатьНастройкиПользователей", ЗагружатьПользователей);
		
	КонецЕсли;
	
	ПараметрыЗагрузки.Вставить("СвернутьРазделенныхПользователей", СвернутьЭлементыСправочникаПользователи);
	
	ВыгрузкаЗагрузкаДанных.ЗагрузитьДанныеИзАрхива(ИмяАрхива, ПараметрыЗагрузки);
	
КонецПроцедуры

// Проверяет совместимость выгрузки из файла с текущей конфигурауией информационной базы.
//
// Параметры:
//  ИмяАрхива - Строка, путь к файлу выгрузки.
//
// Возвращаемое значение: Булево, Истина - если данные из архива могут быть загружены
//  в текущую конфигурацию.
//
Функция ВыгрузкаВАрхивеСовместимаСТекущейКонфигурацией(Знач ИмяАрхива) Экспорт
	
	Возврат ВыгрузкаЗагрузкаДанных.ВыгрузкаВАрхивеСовместимаСТекущейКонфигурацией(ИмяАрхива);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ПолучитьТипыМоделиДанныхОбласти()
	
	Результат = Новый Массив();
	
	МодельДанных = ТехнологияСервисаИнтеграцияСБСП.ПолучитьМодельДанныхОбласти();
	
	Для Каждого ЭлементМоделиДанных Из МодельДанных Цикл
		
		ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ЭлементМоделиДанных.Ключ);
		
		Если Не ОбщегоНазначенияБТС.ЭтоРегламентноеЗадание(ОбъектМетаданных)
				И Не ОбщегоНазначенияБТС.ЭтоЖурналДокументов(ОбъектМетаданных)
				И Не ОбщегоНазначенияБТС.ЭтоВнешнийИсточникДанных(ОбъектМетаданных) Тогда
			
			Результат.Добавить(ОбъектМетаданных);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции
