#Область ОписаниеПеременных

&НаКлиенте
Перем РезультатыОтчета;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ЗапуститьИЗавершить               = Параметры.ЗапуститьИЗавершить;
	КаталогВыгрузкиМодулей            = Параметры.КаталогВыгрузкиМодулей;
	КаталогВыгрузкиФайловКонфигурации = Параметры.КаталогВыгрузкиФайловКонфигурации;
	АвтоматическоеТестирование        = Параметры.АвтоматическоеТестирование;
	ПолныйПутьКФайлуПроверки          = Параметры.ПолныйПутьКФайлуПроверки;
	
	ИмяАдминистратораИБ = ПользователиИнформационнойБазы.ТекущийПользователь().Имя;
	СтрокаСоединения = СтрокаСоединенияИнформационнойБазы();
	
	// Список метаданных, которые необходимо пропускать при проверке прав.
	СписокИсключений = Новый СписокЗначений;
	СписокИсключений.Добавить(Метаданные.Справочники.ДополнительныеОтчетыИОбработки.Имя);
	СписокИсключений.Добавить(Метаданные.РегистрыСведений.НазначениеДополнительныхОбработок.Имя);
	СписокИсключений.Добавить(Метаданные.РегистрыСведений.ПользовательскиеНастройкиДоступаКОбработкам.Имя);
	СписокИсключений.Добавить(Метаданные.Константы.КлючОбластиДанных.Имя);
	
	// Блок описания текущих проверок.
	
	// В этом месте необходимо добавить описание любой проверки в формате:
	// ДобавитьПроверку(<Текстовое представление проверки для пользователя>, <Наименование функции проверки>);
	ДобавитьПроверку(НСтр("ru = 'Модули обычного и управляемого приложения должны совпадать'"), 
		"Подключаемый_ПроверитьСовпадениеМодулейУправляемогоИОбычногоПриложений()");
	ДобавитьПроверку(НСтр("ru = 'Каждый объект должен принадлежать хотя бы одной подсистеме'"), 
		"Подключаемый_ПроверитьПринадлежностьОбъектовПодсистемам()");
	ДобавитьПроверку(НСтр("ru = 'Демонстрационные объекты не должны включаться в поставляемые подсистемы'"), 
		"Подключаемый_ПроверитьПринадлежностьДемонстрационныхОбъектов()");
	ДобавитьПроверку(НСтр("ru = 'Демонстрационные примеры должны быть правильно закомментированы'"), 
		"Подключаемый_ПроверитьКорректностьКомментированияДемоПримеров()");
	ДобавитьПроверку(НСтр("ru = 'Демонстрационные объекты должны быть правильно названы'"), 
		"Подключаемый_ПроверитьПравильностьИменованияДемоОбъектов()");
	ДобавитьПроверку(НСтр("ru = 'Общие модули должны иметь корректные настройки'"), 
		"Подключаемый_ПроверитьУстановкуФлажковОбщихМодулей()");
	ДобавитьПроверку(НСтр("ru = 'Некорректны вызовы процедур и функций общего модуля из него самого, содержащие имя модуля.'"), 
		"Подключаемый_ПроверитьВызовыОбщихМодулейИзНихСамих()");
	ДобавитьПроверку(НСтр("ru = 'Дополнительные команды открытия списков должны иметь в ролях те же права, что и объекты метаданных.'"), 
		"Подключаемый_ПроверитьПравоПросмотраКомандОткрытияСписковВРолях()");
	ДобавитьПроверку(НСтр("ru = 'Роли разделенных пользователей не должны содержать прав на изменение общих данных'"), 
		"Подключаемый_ПроверитьРолиНаНаличиеНедопустимыхПрав()");
	ДобавитьПроверку(НСтр("ru = 'Роль и вид доступа должны быть включены хотя бы в одно описание профиля'"), 
		"Подключаемый_ПроверитьВхождениеРолейИВидовДоступаВПрофили()");
	ДобавитьПроверку(НСтр("ru = 'Комментарии блоков кода, относящихся к той или иной подсистемы должны быть корректными'"), 
		"Подключаемый_ПроверитьКомментарииДляБлоковКодаПодсистем()");
	ДобавитьПроверку(НСтр("ru = 'Недопустимо наличие права ""Интерактивное удаление""'"), 
		"Подключаемый_ПроверитьНаличиеПраваИнтерактивноеУдаление()");
	ДобавитьПроверку(НСтр("ru = 'Роль ПолныеПрава должна давать все права на разделенные объекты метаданных'"), 
		"Подключаемый_ПроверитьРольПолныеПраваДляРазделяемыхОбъектовМетаданных()");
	ДобавитьПроверку(НСтр("ru = 'Роль ""Администратор системы"" не должна давать права на разделенные объекты метаданных'"), 
		"Подключаемый_ПроверитьРольАдминистраторСистемыДляРазделяемыхОбъектовМетаданных()");
	ДобавитьПроверку(НСтр("ru = 'Роль ""Администратор системы"" должна давать все права на неразделенные объекты метаданных'"), 
		"Подключаемый_ПроверитьРольАдминистраторСистемыДляНеразделяемыхОбъектовМетаданных()");
	ДобавитьПроверку(НСтр("ru = 'Использование функции проверки существования подсистем'"), 
		"Подключаемый_ПроверитьПравильностьУсловныхВызовов()");
	ДобавитьПроверку(НСтр("ru = 'Недопустимо наличие недокументированных жестких связей между подсистемами'"), 
		"Подключаемый_НекорректныеСвязиМеждуПодсистемами()");
	ДобавитьПроверку(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Недопустимо наличие ""%1"" в текстах модулей'"), "TO" + "DO"), 
		"Подключаемый_ВыполнитьПоискЗапрещенныхКомментариев()");
	ДобавитьПроверку(НСтр("ru = 'Недопустимо использование метода ""РольДоступна()""'"), 
		"Подключаемый_НайтиВызовыМетодаРольДоступна()");
	ДобавитьПроверку(НСтр("ru = 'У поставляемых подсистем должен быть снят флаг ""Включать в содержание справки""'"), 
		"Подключаемый_ПроверитьЗначениеФлагаВключатьВСодержаниеСправки()");
	ДобавитьПроверку(НСтр("ru = 'Настройкой доступности элементов формы по ролям необходимо управлять из кода'"), 
		"Подключаемый_НайтиНеподдерживаемыеНастройкиРолей()");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЗапуститьИЗавершить Тогда
		ЗапуститьПроверку();
	КонецЕсли;
	
#Если ТолстыйКлиентУправляемоеПриложение ИЛИ ТолстыйКлиентОбычноеПриложение Тогда
	Элементы.СравнитьФайлыПриложений.Видимость = Истина;
#КонецЕсли
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаВыполнить(Команда)
	
#Если Не ВебКлиент Тогда
	Если Не ЗапуститьИЗавершить Тогда
		ОчиститьКаталогДляВыгрузки(КаталогВыгрузкиМодулей);
	КонецЕсли;
	ВыполнитьПроверку();
#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКонфигуратор(Команда)
#Если Не ВебКлиент Тогда
	
	Состояние(НСтр("ru = 'Запуск конфигуратора'"));
	СтрокаЗапускаПлатформы = КаталогПрограммы() + "1cv8.exe";
	КаталогКонфигурации = ПутьКИБ;
	Пользователь = ИмяАдминистратораИБ;
	Пароль = ПарольАдминистратораИБ;
	КоманднаяСтрока = СтрокаЗапускаПлатформы + " DESIGNER /F"""
		+ КаталогКонфигурации + """ /N"""
		+ Пользователь + """ /P""" + Пароль + """";
	ЗапуститьПриложение(КоманднаяСтрока,,Ложь);
	
#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ВыделитьВсеПроверки(Команда)
	Для Каждого Проверка Из Объект.Проверки Цикл
		Проверка.ПроводитьПроверку = Истина;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсеПроверки(Команда)
	Для Каждого Проверка Из Объект.Проверки Цикл
		Проверка.ПроводитьПроверку = Ложь;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПрошлыеРезультатыПроверки(Команда)
	РезультатыОтчета.Показать();
КонецПроцедуры

&НаКлиенте
Процедура СравнитьФайлыПриложений(Команда)
#Если ТолстыйКлиентУправляемоеПриложение ИЛИ ТолстыйКлиентОбычноеПриложение Тогда
	Сравнение = Новый СравнениеФайлов;
	
	Если КаталогВыгрузкиМодулей = "" Тогда
		ВыгрузитьКонфигурациюВXML(КаталогВыгрузкиМодулей);
	КонецЕсли;
	
	ПервыйФайл = НайтиФайлы(КаталогВыгрузкиМодулей, "*Конфигурация.МодульОбычногоПриложения.txt");
	ВторойФайл = НайтиФайлы(КаталогВыгрузкиМодулей, "*Конфигурация.МодульУправляемогоПриложения.txt");
	
	Если ПервыйФайл.Количество() = 0 Или ВторойФайл.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru ='Не найдены файлы приложений'"));
		Возврат;
	КонецЕсли;
	
	Сравнение.ПервыйФайл = ПервыйФайл[0].ПолноеИмя;
	Сравнение.ВторойФайл = ВторойФайл[0].ПолноеИмя;
	
	Сравнение.ИгнорироватьПустоеПространство = Истина;
	Сравнение.УчитыватьРазделителиСтрок = Ложь;
	Сравнение.УчитыватьРегистр = Ложь;
	Сравнение.СпособСравнения = СпособСравненияФайлов.ТекстовыйДокумент;
	Сравнение.ПоказатьРазличия();
	
#КонецЕсли
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ЗапуститьПроверку()
	Для Каждого Проверка Из Объект.Проверки Цикл
		Проверка.ПроводитьПроверку = Истина;
	КонецЦикла;
	
	КомандаВыполнить(Неопределено);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры и функции.

&НаКлиенте
Процедура ОчиститьКаталогДляВыгрузки(КаталогВыгрузкиМодулей)
	МассивФайлов = НайтиФайлы(КаталогВыгрузкиМодулей, "*");
	Для Каждого Файл Из МассивФайлов Цикл
		УдалитьФайлы(Файл.ПолноеИмя);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверку(СписокВывода = Неопределено) Экспорт
	СписокВывода = Новый СписокЗначений;
	Для Каждого Проверка Из Объект.Проверки Цикл
		Если Проверка.ПроводитьПроверку Тогда
			Попытка
				Состояние(НСтр("ru = 'Проверка правила:'") + " " + Проверка.НаименованиеПроверки);
				МассивПроверок = СтрРазделить(Проверка.НаименованиеПроцедурыПроверки, ",", Ложь);
				Для Каждого ПромежуточнаяПроверка Из МассивПроверок Цикл
					СтруктураОшибок = Вычислить(СокрЛП(ПромежуточнаяПроверка));
					Если СтруктураОшибок <> Неопределено Тогда
						Если ТипЗнч(СтруктураОшибок) = Тип("Массив") Тогда
							Для каждого ЭлементМассива Из СтруктураОшибок Цикл
								СписокВывода.Добавить(ЭлементМассива);
							КонецЦикла;
						Иначе
							СписокВывода.Добавить(СтруктураОшибок);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
			Исключение
				ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(НСтр("ru = 'Проверка перед сборкой'"), "Ошибка", ПредставлениеОшибки);
				ТекстСообщения = НСтр("ru = 'Не удалось выполнить проверку %1'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Проверка.НаименованиеПроверки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	ЕстьОшибки = Ложь;
	ТабДок = ВывестиОшибки(СписокВывода, ЕстьОшибки);
	ТабДок.ОтображатьГруппировки = Истина;
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.ОтображатьЗаголовки = Ложь;
	
	Если ЗапуститьИЗавершить Тогда
		Если Не АвтоматическоеТестирование Тогда
			ТабДок.Записать(ПолныйПутьКФайлуПроверки);
			ПрекратитьРаботуСистемы(Ложь);
		КонецЕсли;
	Иначе
		ТабДок.Показать();
		ОбновитьГиперссылку();
		РезультатыОтчета = ТабДок;
		ОчиститьКаталогДляВыгрузки(КаталогВыгрузкиМодулей);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьГиперссылку()
	ШаблонЗаголовка = НСтр("ru = 'Открыть результаты проверки на: %1'"); 
	Элементы.ОткрытьРезультатыПроверки.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗаголовка, Строка(ДатаСеанса()));
	Элементы.ОткрытьРезультатыПроверки.Доступность = Истина;
КонецПроцедуры

&НаСервере
Функция ДатаСеанса()
	
	Возврат ТекущаяДатаСеанса();
	
КонецФункции	

&НаСервере
Процедура ВыгрузитьКонфигурациюВXML(КаталогВыгрузкиКонфигурации)
	
	Если Не ПустаяСтрока(КаталогВыгрузкиКонфигурации) Тогда
		Каталог = Новый Файл(КаталогВыгрузкиКонфигурации);
		Если Не Каталог.Существует() Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Указанный каталог выгрузки ""%1"" не существует.'"), КаталогВыгрузкиКонфигурации);
		КонецЕсли;
		Если НайтиФайлы(КаталогВыгрузкиКонфигурации, "Configuration.xml").Количество() = 0 Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Указанный каталог выгрузки ""%1"" не содержит файлов выгрузки конфигурации.'"), КаталогВыгрузкиКонфигурации);
		КонецЕсли;
		КаталогВыгрузки = КаталогВыгрузкиКонфигурации;
		Возврат;
	КонецЕсли;
	
	Если ПользователиИнформационнойБазы.ТекущийПользователь().ПарольУстановлен Тогда
		ВызватьИсключение НСтр("ru = 'Проверка возможна только для пользователя без пароля.'");
	КонецЕсли;
	
	КаталогВыгрузки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1%2_%3", КаталогВременныхФайлов(), "ПроверкаПередСборкой", Лев(Новый УникальныйИдентификатор, 4));
	КаталогПрограммы = ПараметрыСеанса.ПараметрыКлиентаНаСервере.Получить("КаталогПрограммы");
	Файл = Новый Файл(КаталогВыгрузки);
	СоздатьКаталог(КаталогВыгрузки);
	
	СтрокаСоединения = СтрокаСоединенияИнформационнойБазы();
	Если ОткрытКонфигуратор() Тогда
		Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
			КаталогИнформационнойБазы = СтроковыеФункцииКлиентСервер.ПолучитьПараметрыИзСтроки(СтрокаСоединения).file;
			КопироватьФайл(КаталогИнформационнойБазы + "\1Cv8.1CD", КаталогВыгрузки + "\1Cv8.1CD");
			СтрокаСоединения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("File=""%1"";", КаталогВыгрузки);
		Иначе
			ВызватьИсключение НСтр("ru = 'Для проверки необходимо закрыть конфигуратор.'");
		КонецЕсли;
	КонецЕсли;
	
	Кавычка = """";
	ПутьКБазе = СтрЗаменить(СтрокаСоединения, Кавычка, Кавычка + Кавычка);
	
	КодВозврата = Неопределено;
	Пользователь = ПользователиИнформационнойБазы.ТекущийПользователь().Имя;
	Пароль = "";
	ИмяФайлаСообщений = КаталогВыгрузки + "\СообщенияВыгрузкиКонфигурацииВФайлы.txt";
	
	ЗапуститьПриложение(Кавычка + КаталогПрограммы + "1cv8.exe" + Кавычка + " DESIGNER"
		+ " /IBConnectionString " + Кавычка + ПутьКБазе + Кавычка
		+ " /N "                  + Кавычка + Пользователь + Кавычка
		+ " /P "                  + Кавычка + Пароль + Кавычка
		+ " /DumpConfigFiles "    + Кавычка + КаталогВыгрузки + Кавычка
		+ " -Module /Out "                + Кавычка + ИмяФайлаСообщений + Кавычка
		+ " /DisableStartupMessages /DisableStartupDialogs "
		,
		,
		Истина,
		КодВозврата);
	
	Если КодВозврата <> 0 Тогда
		ЕстьОшибки = Истина;
		Попытка
			Текст = Новый ТекстовыйДокумент;
			Текст.Прочитать(ИмяФайлаСообщений);
			Сообщения = Текст.ПолучитьТекст();
		Исключение
			Сообщения = "";
		КонецПопытки;
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось выполнить выгрузку конфигурации в файлы по причине:
			           |%1'"), Сообщения);
	КонецЕсли;
	
	КаталогВыгрузкиКонфигурации = КаталогВыгрузки;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПроверку(ИмяПроверки,ИмяПроцедурыПроверки, ДопУсловие = Неопределено)
	НоваяСтрокаПроверки = Объект.Проверки.Добавить();
	НоваяСтрокаПроверки.ПроводитьПроверку = Истина;
	НоваяСтрокаПроверки.НаименованиеПроверки = ИмяПроверки;
	НоваяСтрокаПроверки.НаименованиеПроцедурыПроверки = ИмяПроцедурыПроверки;
	НоваяСтрокаПроверки.ДополнительноеУсловие  = ДопУсловие;
КонецПроцедуры

&НаСервере
Функция ВывестиОшибки(СписокОшибок, ЕстьОшибки)
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.НачатьАвтогруппировкуСтрок();
	Макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет("МакетОтчетаСОшибками");
	
	Для Каждого ЭлементСтруктураОшибок Из СписокОшибок Цикл
		СтруктураОшибок = ЭлементСтруктураОшибок.Значение;
		ОшибочныеДанные = СтруктураОшибок.ОшибочныеДанные;
		
		Если ОшибочныеДанные = Неопределено
			Или ОшибочныеДанные.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ОбластьПравила = Макет.ПолучитьОбласть("ИмяПравила");
		ОбластьПравила.Параметры.ИмяПравила = СтруктураОшибок.ПредставлениеОшибки;
		ОбластьПравила.Параметры.КоличествоОшибок = ?(ОшибочныеДанные = Неопределено, 0, ОшибочныеДанные.Количество());
		ТабДок.Вывести(ОбластьПравила, 0);
		
		ОбластьИсправления = Макет.ПолучитьОбласть("ОписаниеИсправления");
		ОбластьИсправления.Параметры.МетодикаИсправления = СтруктураОшибок.ОписаниеИсправления;
		ТабДок.Вывести(ОбластьИсправления,1);
		
		Если ТипЗнч(ОшибочныеДанные) = Тип("СписокЗначений") Тогда
			Для Каждого Ошибка Из ОшибочныеДанные Цикл
				ОбластьОшибки = Макет.ПолучитьОбласть("Объект");
				ОбластьОшибки.Параметры.ИмяОбъекта = Ошибка.Значение;
				ТабДок.Вывести(ОбластьОшибки,2);
			КонецЦикла;
		КонецЕсли;
		
		ЕстьОшибки = Истина;
	КонецЦикла;
	
	Если Не ЕстьОшибки Тогда
		ОбластьПравила = Макет.ПолучитьОбласть("ИмяПравила");
		ОбластьПравила.Параметры.ИмяПравила = НСтр("ru = 'Ошибок не обнаружено'");
		ОбластьПравила.Параметры.КоличествоОшибок = 0;
		ТабДок.Вывести(ОбластьПравила, 0);
	КонецЕсли;
	
	ТабДок.ЗакончитьАвтогруппировкуСтрок();
	Возврат ТабДок;
	
КонецФункции

&НаСервере
Функция ПолучитьСписокТиповМетаданныхДляПроверки()
	СписокТипов = Новый СписокЗначений;
	СписокТипов.Добавить("WebСервисы");
	СписокТипов.Добавить("WSСсылки");
	СписокТипов.Добавить("БизнесПроцессы");
	СписокТипов.Добавить("ГруппыКоманд");
	СписокТипов.Добавить("Документы");
	СписокТипов.Добавить("ЖурналыДокументов");
	СписокТипов.Добавить("Задачи");
	СписокТипов.Добавить("Интерфейсы");
	СписокТипов.Добавить("Константы");
	СписокТипов.Добавить("КритерииОтбора");
	СписокТипов.Добавить("НумераторыДокументов");
	СписокТипов.Добавить("Обработки");
	СписокТипов.Добавить("ОбщиеКартинки");
	СписокТипов.Добавить("ОбщиеКоманды");
	СписокТипов.Добавить("ОбщиеМакеты");
	СписокТипов.Добавить("ОбщиеМодули");
	СписокТипов.Добавить("ОбщиеФормы");
	СписокТипов.Добавить("Отчеты");
	СписокТипов.Добавить("ПакетыXDTO");
	СписокТипов.Добавить("ПараметрыСеанса");
	СписокТипов.Добавить("ПараметрыФункциональныхОпций");
	СписокТипов.Добавить("Перечисления");
	СписокТипов.Добавить("ПланыВидовРасчета");
	СписокТипов.Добавить("ПланыВидовХарактеристик");
	СписокТипов.Добавить("ПланыОбмена");
	СписокТипов.Добавить("ПланыСчетов");
	СписокТипов.Добавить("ПодпискиНаСобытия");
	СписокТипов.Добавить("Последовательности");
	СписокТипов.Добавить("РегистрыБухгалтерии");
	СписокТипов.Добавить("РегистрыНакопления");
	СписокТипов.Добавить("РегистрыРасчета");
	СписокТипов.Добавить("РегистрыСведений");
	СписокТипов.Добавить("РегламентныеЗадания");
	СписокТипов.Добавить("Роли");
	СписокТипов.Добавить("Справочники");
	СписокТипов.Добавить("Стили");
	СписокТипов.Добавить("ФункциональныеОпции");
	СписокТипов.Добавить("ХранилищаНастроек");
	СписокТипов.Добавить("ЭлементыСтиля");
	СписокТипов.Добавить("Языки");
	Возврат СписокТипов;
	
КонецФункции

&НаСервере
Функция ПолучитьСписокОбъектовПодсистем()
	
	СоответствиеОбъектовПодсистемам = Новый ТаблицаЗначений;
	СоответствиеОбъектовПодсистемам.Колонки.Добавить("Подсистема");
	СоответствиеОбъектовПодсистемам.Колонки.Добавить("Объект");
	
	// Проведем проверку аналогично АПК - до второго уровня вложенности подсистем.
	
	Для Каждого ПодсистемаПервогоУровня Из Метаданные.Подсистемы Цикл
		Для Каждого ПодсистемаВторогоУровня Из ПодсистемаПервогоУровня.Подсистемы Цикл
			Для Каждого ПодсистемаТретьегоУровня Из ПодсистемаВторогоУровня.Подсистемы Цикл
				ДополнитьСоответствиеОбъектамиПодсистемы(СоответствиеОбъектовПодсистемам, ПодсистемаТретьегоУровня);
			КонецЦикла;
			ДополнитьСоответствиеОбъектамиПодсистемы(СоответствиеОбъектовПодсистемам, ПодсистемаВторогоУровня);
		КонецЦикла;
		ДополнитьСоответствиеОбъектамиПодсистемы(СоответствиеОбъектовПодсистемам, ПодсистемаПервогоУровня);
	КонецЦикла;
	
	Возврат СоответствиеОбъектовПодсистемам;
	
КонецФункции

&НаСервере
Процедура ДополнитьСоответствиеОбъектамиПодсистемы(СоответствиеОбъектовПодсистемам, ИсследуемаяПодсистема)
	Для Каждого ОбъектСостава Из ИсследуемаяПодсистема.Состав Цикл
		НовоеСоответствие = СоответствиеОбъектовПодсистемам.Добавить();
		НовоеСоответствие.Подсистема = ИсследуемаяПодсистема;
		НовоеСоответствие.Объект = ОбъектСостава;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьТекстовыйФайлПоПути(КаталогОбмена, ИмяФайла)
	ФайлПоиска = НайтиФайлы(КаталогОбмена,ИмяФайла);
	Если ФайлПоиска.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	ТекстФайла = Новый ТекстовыйДокумент;
	ТекстФайла.Прочитать(ФайлПоиска[0].ПолноеИмя);
	Возврат ТекстФайла;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Подключаемые функции
//
// Описание функций проверки:
// Функция проверки может проводиться как на клиенте, так и на сервере.
// Возвращаемое значение : Неопределено, если ошибок не обнаружено, либо.
//
// Структура ("ПредставлениеОшибки, ОписаниеИсправления, ОшибочныеДанные",
//  <Пользовательское представление ошибки - строка>, <Пользовательское описание метода исправления - строка>.
//  <Список текстовых представлений ошибок - список значений>).
//
// Если для описания ошибки достаточно только пользовательского представления (например, если
// надо сообщить, что модули не совпадают без уточнения места), тогда в качестве второго параметра
// структуры необходимо указывать Неопределено.

&НаСервере
Функция Подключаемый_ПроверитьПравильностьИменованияДемоОбъектов()
	
	СписокТиповМетаданных = ПолучитьСписокТиповМетаданныхДляПроверки();
	СписокНеПодчиненныхОбъектов = Новый СписокЗначений;
	
	Для Каждого ТипМетаданныхВСписке Из СписокТиповМетаданных Цикл
		ТипМетаданных = ТипМетаданныхВСписке.Значение;
		Для Каждого ОбъектМетаданныхЗаданногоТипа Из Метаданные[ТипМетаданных] Цикл
			Если ТипМетаданных = "ПараметрыСеанса"
				Или ТипМетаданных = "Роли" Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрНайти(ОбъектМетаданныхЗаданногоТипа.Имя, "_Демо") > 0 И Лев (ОбъектМетаданныхЗаданногоТипа.Имя, 5) <> "_Демо" Тогда
				СтрокаНаименования = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 : %2", Строка(ТипМетаданных), ОбъектМетаданныхЗаданногоТипа.Имя);
				СписокНеПодчиненныхОбъектов.Добавить(СтрокаНаименования, ОбъектМетаданныхЗаданногоТипа.ПолноеИмя());
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Возврат Новый Структура("ПредставлениеОшибки, ОписаниеИсправления, ОшибочныеДанные",
		НСтр("ru = 'Неправильно названы демо-объекты'"), 
		НСтр("ru = 'Демо-объекты именуются с префиксом ""_Демо"" в начале имени. Исключение - объекты типа ПараметрыСеанса и Роли, где данный префикс
			|может находиться в середине имени.'"), СписокНеПодчиненныхОбъектов);
КонецФункции

&НаСервере
Функция Подключаемый_ПроверитьПринадлежностьОбъектовПодсистемам()
	
	Результат = Новый Массив();
	ОшибочныеОбъекты = ВыполнитьПроверкуПоПринадлежностиОбъектов();
	
	ПредставлениеОшибки = НСтр("ru = 'Объекты не принадлежат ни одной поставляемой подсистеме.'");
	ОписаниеИсправления = НСтр("ru = 'Все объекты метаданных в конфигурации должны быть подчинены одной поставляемой подсистеме.
		|Исключение составляют только те объекты, которые не могут быть подчинены подсистемам в текущей версии платформы.'");
	СтруктураОшибок =  Новый Структура("ПредставлениеОшибки, ОписаниеИсправления, ОшибочныеДанные", 
		ПредставлениеОшибки, ОписаниеИсправления, ОшибочныеОбъекты.НеПодчиненныеОбъекты);
	Результат.Добавить(СтруктураОшибок);
	
	ПредставлениеОшибки = НСтр("ru = 'Объекты принадлежат более чем одной поставляемой подсистеме.'");
	СтруктураОшибок =  Новый Структура("ПредставлениеОшибки, ОписаниеИсправления, ОшибочныеДанные", 
		ПредставлениеОшибки, ОписаниеИсправления, ОшибочныеОбъекты.ИзбыточноПодчиненныеОбъекты);
	Результат.Добавить(СтруктураОшибок);
	
	Возврат Результат;
КонецФункции

&НаСервере
Функция Подключаемый_ПроверитьПринадлежностьДемонстрационныхОбъектов()

	СписокОшибочныхОбъектов = Новый СписокЗначений;
	СписокОбъектовПодсистем = ПолучитьСписокОбъектовПодсистем();
	
	Для Каждого ПодчинениеОбъектаПодсистеме Из СписокОбъектовПодсистем Цикл
		
		Если ЭтоПоставляемаяПодсистема(ПодчинениеОбъектаПодсистеме.Подсистема)
			И СтрНачинаетсяС(ПодчинениеОбъектаПодсистеме.Объект.Имя, "_Демо") Тогда
			СписокОшибочныхОбъектов.Добавить(Строка(ПодчинениеОбъектаПодсистеме.Объект), ПодчинениеОбъектаПодсистеме.Объект.ПолноеИмя());
		КонецЕсли;
		
	КонецЦикла;
	
	ОписаниеИсправления = НСтр("ru = 'Демонстрационные объекты не должны быть включены в поставляемые подсистемы'");
	ПредставлениеОшибки = НСтр("ru = 'Следующие демонстрационные объекты включены в поставляемые подсистемы'");
	СтруктураОшибок =  Новый Структура("ПредставлениеОшибки, ОписаниеИсправления, ОшибочныеДанные", 
		ПредставлениеОшибки, ОписаниеИсправления, СписокОшибочныхОбъектов);
	Возврат СтруктураОшибок;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_ПроверитьКорректностьКомментированияДемоПримеров()

	ТекстФайла = Новый ТекстовыйДокумент;
	СписокОшибочныхОбъектов  = Новый СписокЗначений;
	
	Если КаталогВыгрузкиМодулей = "" Тогда
		ВыгрузитьКонфигурациюВXML(КаталогВыгрузкиМодулей);
	КонецЕсли;
	
	МассивМодулей = НайтиФайлы(КаталогВыгрузкиМодулей, "*.txt");
	
	Для Каждого ФайлМодуля Из МассивМодулей Цикл
		
		Если СтрНайти(ФайлМодуля.Имя, "ИнструментыРазработчикаПереходНаВерсию231") > 0
			Или СтрНайти(ФайлМодуля.Имя, "СообщенияВыгрузкиКонфигурацииВФайлы") > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НомерТекущейСтроки = 0;
		ТекстФайла.Прочитать(ФайлМодуля.ПолноеИмя);
		КоличествоСтрок = ТекстФайла.КоличествоСтрок();
		
		ПолноеИмяОбъекта = ПолноеИмяПоИмениМодуля(ФайлМодуля.ИмяБезРасширения);
		
		Пока НомерТекущейСтроки < КоличествоСтрок Цикл
			
			СтрокаПроверки = ТекстФайла.ПолучитьСтроку(НомерТекущейСтроки);
			Если СтрНайти(СтрокаПроверки, "Демо ") = 0 Тогда
				НомерТекущейСтроки = НомерТекущейСтроки + 1;
				Продолжить;
			Иначе
				Если (СтрНайти(СтрокаПроверки, "_Демо начало примера") = 0 И СтрНайти(СтрокаПроверки, "_Демо конец примера") = 0) 
						И СтрНайти(СтрокаПроверки, "//")> 0 Тогда
					СтрокаОшибки = "%1 : %2";
					СтрокаОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаОшибки, ФайлМодуля.ИмяБезРасширения, "Строка " + НомерТекущейСтроки);
					СписокОшибочныхОбъектов.Добавить(СтрокаОшибки, ПолноеИмяОбъекта);
				КонецЕсли;
			КонецЕсли;
			НомерТекущейСтроки = НомерТекущейСтроки + 1;
		КонецЦикла;
	КонецЦикла;
	
	ПредставлениеОшибки = НСтр("ru = 'Возможно неправильное комментирование демонстрационных примеров'");
	ОписаниеИсправления = НСтр("ru = 'Демонстрационные примеры выделяются в коде с помощью комментариев вида 
		|//_Демо начало примера
		|<Код примера>
		|//_Демо конец примера
		|Другие представления демонстрационных примеров в коде запрещены.'");
	СтруктураОшибок =  Новый Структура("ПредставлениеОшибки, ОписаниеИсправления, ОшибочныеДанные",
		ПредставлениеОшибки, ОписаниеИсправления, СписокОшибочныхОбъектов);
	Возврат СтруктураОшибок;
	
КонецФункции

&НаСервере
Функция Подключаемый_ПроверитьУстановкуФлажковОбщихМодулей()
	СписокОшибочныхМодулей = Новый СписокЗначений;
	Для Каждого ОбщийМодуль Из Метаданные.ОбщиеМодули Цикл
		
		Если ОбщийМодуль.ВызовСервера И Не ОбщийМодуль.Сервер Тогда
			СписокОшибочныхМодулей.Добавить(ОбщийМодуль.Имя, ОбщийМодуль.ПолноеИмя());
		КонецЕсли;
		
		Если ОбщийМодуль.ВызовСервера И ОбщийМодуль.КлиентУправляемоеПриложение Тогда
			Если СписокОшибочныхМодулей.НайтиПоЗначению(ОбщийМодуль.Имя) = Неопределено Тогда
				СписокОшибочныхМодулей.Добавить(ОбщийМодуль.Имя, ОбщийМодуль.ПолноеИмя());
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПредставлениеОшибки = НСтр("ru = 'Неправильно настроенные общие модули'");
	ОписаниеИсправления = НСтр("ru = 'Следующие комбинации настроек общих модулей недопустимы:
		|1) Флаг ""Вызов сервера"" установлен, но сброшен флаг ""Сервер"";
		|2) Установлены Флаги ""Вызов сервера"" и "" Клиент(управляемое приложение)""'");
	СтруктураОшибок =  Новый Структура("ПредставлениеОшибки, ОписаниеИсправления, ОшибочныеДанные", 
		ПредставлениеОшибки, ОписаниеИсправления, СписокОшибочныхМодулей);
	Возврат СтруктураОшибок;
КонецФункции

&НаКлиенте
Функция Подключаемый_ПроверитьВызовыОбщихМодулейИзНихСамих()
	
	СписокОшибочныхОбъектов  = Новый СписокЗначений;
	
	Если КаталогВыгрузкиМодулей = "" Тогда
		ВыгрузитьКонфигурациюВXML(КаталогВыгрузкиМодулей);
	КонецЕсли;
	
	ТекстФайла = Новый ТекстовыйДокумент;
	
	ПостфиксПовтИсп = "ПовтИсп.";
	
	МассивМодулей = НайтиФайлы(КаталогВыгрузкиМодулей, "*.txt");
	Для Каждого ФайлМодуля Из МассивМодулей Цикл
		Если СтрНайти(ФайлМодуля.Имя, "ОбщийМодуль") = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НомерТекущейСтроки = 0;
		ТекстФайла.Прочитать(ФайлМодуля.ПолноеИмя);
		КоличествоСтрок = ТекстФайла.КоличествоСтрок();
		
		ИмяОбщегоМодуля = СтрЗаменить(ФайлМодуля.ИмяБезРасширения,"ОбщийМодуль.","");
		ИмяОбщегоМодуля = СтрЗаменить(ИмяОбщегоМодуля,".Модуль",".");
		
		Если ВРег(Прав(ИмяОбщегоМодуля, СтрДлина(ПостфиксПовтИсп))) = ВРег(ПостфиксПовтИсп) Тогда
			Продолжить;
		КонецЕсли;
		
		Пока НомерТекущейСтроки < КоличествоСтрок Цикл
			
			СтрокаПроверки = ТекстФайла.ПолучитьСтроку(НомерТекущейСтроки);
			
			// Поиск строки вида "ИмяОбщегоМодуля.".
			НайденВызов = СтрНайти(СтрокаПроверки, ИмяОбщегоМодуля);
			Если НайденВызов = 0
				Или СтрНайти(СтрокаПроверки, "//") > 0 Тогда
				НомерТекущейСтроки = НомерТекущейСтроки + 1;
				Продолжить;
			КонецЕсли;
			
			// Поиск открывающей скобки после строки "ИмяОбщегоМодуля.".
			НайденаСкобка = СтрНайти(Прав(СтрокаПроверки, СтрДлина(СтрокаПроверки)-НайденВызов), "(");
			Если НайденаСкобка = 0 Тогда
				НомерТекущейСтроки = НомерТекущейСтроки + 1;
				Продолжить;
			КонецЕсли;
			
			// Проверка первого символа перед вызовом.
			СимволПередВызовом = СокрЛП(Сред(СтрокаПроверки, НайденВызов-1, 1));
			Если (ПустаяСтрока(СимволПередВызовом) Или СимволПередВызовом = "(")
				// Проверка того, что между строкой "ИмяОбщегоМодуля." и открывающей скобкой нет пробелов.
				И СтрНайти(Сред(СтрокаПроверки, НайденВызов, НайденаСкобка-НайденВызов), " ") = 0 Тогда
				
				// Расчет количества кавычек в строке.
				НачальныйСимвол = 1;
				КоличествоКавычек = 0;
				Пока Истина Цикл
					
					ЕстьКавычка = СтрНайти(Сред(СтрокаПроверки, НачальныйСимвол, НайденВызов), """");
					Если ЕстьКавычка <> 0 Тогда
						КоличествоКавычек = КоличествоКавычек + 1;
						НачальныйСимвол = НачальныйСимвол + ЕстьКавычка;
					Иначе
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
				// Если количество кавычек нечетное - пропускаем строку.
				Если КоличествоКавычек <> 0 Тогда
					ЧетноеКоличество = (КоличествоКавычек/2 = Цел(КоличествоКавычек/2));
					Если Не ЧетноеКоличество Тогда
						НомерТекущейСтроки = НомерТекущейСтроки + 1;
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				// это не запрос
				НайденСимвол = СтрНайти(СтрокаПроверки, "|");
				Если НайденСимвол > 0
					И НайденСимвол < НайденВызов Тогда
					НомерТекущейСтроки = НомерТекущейСтроки + 1;
					Продолжить;
				КонецЕсли;
				
				СтрокаОшибки = "%1 : %2";
				СтрокаОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаОшибки, ФайлМодуля.ИмяБезРасширения, "Строка " + НомерТекущейСтроки);
				
				ПолноеИмяОбъекта = ПолноеИмяПоИмениМодуля(ФайлМодуля.ИмяБезРасширения);
				СписокОшибочныхОбъектов.Добавить(СтрокаОшибки, ПолноеИмяОбъекта);
			КонецЕсли;
			
			НомерТекущейСтроки = НомерТекущейСтроки + 1;
		КонецЦикла;
		
	КонецЦикла;
	
	ПредставлениеОшибки = НСтр("ru = 'Название общего модуля в его коде'");
	ОписаниеИсправления = НСтр("ru = 'Возможен некорректный вызов процедуры или функции общего модуля из него самого.
		|В этом случае в строке вызова излишне писать имя модуля.'");
	СтруктураОшибок =  Новый Структура("ПредставлениеОшибки, ОписаниеИсправления, ОшибочныеДанные", 
		ПредставлениеОшибки, ОписаниеИсправления, СписокОшибочныхОбъектов);
	Возврат СтруктураОшибок;
	
КонецФункции

&НаСервере
Функция Подключаемый_ПроверитьПравоПросмотраКомандОткрытияСписковВРолях()
	
	КоллекцииОбъектомМетаданных = Новый Массив;
	КоллекцииОбъектомМетаданных.Добавить(Метаданные.Справочники);
	КоллекцииОбъектомМетаданных.Добавить(Метаданные.Документы);
	КоллекцииОбъектомМетаданных.Добавить(Метаданные.ЖурналыДокументов);
	КоллекцииОбъектомМетаданных.Добавить(Метаданные.ПланыВидовХарактеристик);
	КоллекцииОбъектомМетаданных.Добавить(Метаданные.ПланыСчетов);
	КоллекцииОбъектомМетаданных.Добавить(Метаданные.ПланыВидовРасчета);
	КоллекцииОбъектомМетаданных.Добавить(Метаданные.РегистрыСведений);
	КоллекцииОбъектомМетаданных.Добавить(Метаданные.РегистрыНакопления);
	КоллекцииОбъектомМетаданных.Добавить(Метаданные.РегистрыБухгалтерии);
	КоллекцииОбъектомМетаданных.Добавить(Метаданные.РегистрыРасчета);
	КоллекцииОбъектомМетаданных.Добавить(Метаданные.БизнесПроцессы);
	КоллекцииОбъектомМетаданных.Добавить(Метаданные.Задачи);
	
	СписокОшибочныхОбъектов = Новый СписокЗначений;
	
	Для каждого КоллекцияОбъектовМетаданных Из КоллекцииОбъектомМетаданных Цикл
		Для каждого ОбъектМетаданных Из КоллекцияОбъектовМетаданных Цикл
			Команда = ОбъектМетаданных.Команды.Найти(ОбъектМетаданных.Имя);
			Если Команда = Неопределено Тогда
				Продолжить;
			Иначе
				Для каждого Роль Из Метаданные.Роли Цикл
					ПравоОбъекта = ПравоДоступа("Просмотр", ОбъектМетаданных, Роль);
					ПравоКоманды = ПравоДоступа("Просмотр", Команда, Роль);
					Если ПравоОбъекта И НЕ ПравоКоманды Тогда
						
						// Пропускаем команды, которые открывают формы для редактирования объектов (списков объектов).
						// Такие команды не должны входить в роли, предназначенные только для просмотра объектов.
						КомандаДляРедактированияОбъекта = НСтр("ru = 'Открывает форму для редактирования'");
						Если СтрНачинаетсяС(Команда.Комментарий, КомандаДляРедактированияОбъекта)
							И НЕ ПравоДоступа("Редактирование", ОбъектМетаданных, Роль) Тогда
							Продолжить;
						КонецЕсли;
						
						СписокОшибочныхОбъектов.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Не хватает права Просмотр для дополнительной команды ""%1"" объекта метаданных ""%2"" в роли ""%3"".'"),
							Команда.Имя,
							ОбъектМетаданных.ПолноеИмя(),
							Роль.Имя), ОбъектМетаданных.ПолноеИмя());
							
					ИначеЕсли НЕ ПравоОбъекта И ПравоКоманды Тогда
						СписокОшибочныхОбъектов.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Лишнее право Просмотр для дополнительной команды ""%1"" объекта метаданных ""%2"" в роли ""%3"".'"),
							Команда.Имя,
							ОбъектМетаданных.ПолноеИмя(),
							Роль.Имя), ОбъектМетаданных.ПолноеИмя());
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ПредставлениеОшибки = НСтр("ru = 'Объекты имеют различный доступ со своими дополнительными командами открытия списков'");
	ОписаниеИсправления = НСтр("ru = 'Все объекты метаданных должны иметь одинаковые права на просмотр со своими дополнительными командами открытия списков.'");
	
	СтруктураОшибок =  Новый Структура(
		"ПредставлениеОшибки, ОписаниеИсправления, ОшибочныеДанные",
		ПредставлениеОшибки, ОписаниеИсправления, СписокОшибочныхОбъектов);
	Возврат СтруктураОшибок;
	
КонецФункции

&НаСервере
Функция Подключаемый_ПроверитьВхождениеРолейИВидовДоступаВПрофили()
	
	РолиИсключения = Новый Соответствие;
	РолиИсключения.Вставить("Администрирование", Истина);
	РолиИсключения.Вставить("ЗапускAutomation", Истина);
	РолиИсключения.Вставить("ЗапускВнешнегоСоединения", Истина);
	РолиИсключения.Вставить("ЗапускТолстогоКлиента", Истина);
	РолиИсключения.Вставить("ИнтерактивноеОткрытиеВнешнихОтчетовИОбработок", Истина);
	РолиИсключения.Вставить("ОбновлениеКонфигурацииБазыДанных", Истина);
	РолиИсключения.Вставить("РежимВсеФункции", Истина);
	РолиИсключения.Вставить("ОбновлениеКонфигурацииБазыДанных", Истина);
	РолиИсключения.Вставить("Подсистема_ДемоИнструментыРазработчика", Истина);
	РолиИсключения.Вставить("УдаленныйДоступОбменСообщениями", Истина);
	
	ВидыДоступаИсключения = Новый Соответствие;
	
	СписокОшибочныхОбъектов = Новый СписокЗначений;
	Константы.ПараметрыОграниченияДоступа.СоздатьМенеджерЗначения().ОбновитьОписаниеСвойствВидовДоступа();
	Справочники.ПрофилиГруппДоступа.ОбновитьОписаниеПоставляемыхПрофилей();
	ОбновитьПовторноИспользуемыеЗначения();
	ТекущиеПараметры = УправлениеДоступомСлужебныйПовтИсп.Параметры();
	ОписанияПрофилей = ТекущиеПараметры.ПоставляемыеПрофилиГруппДоступа.ОписанияПрофилей;
	ВидыДоступаМассив    = ТекущиеПараметры.СвойстваВидовДоступа.Массив;
	ВидыДоступаПоСсылкам = ТекущиеПараметры.СвойстваВидовДоступа.ПоСсылкам;
	
	РолиПрофилей = Новый Соответствие;
	ВидыДоступаПрофилей = Новый Соответствие;
	Для Каждого ОписаниеПрофиля Из ОписанияПрофилей Цикл
		Для Каждого Роль Из ОписаниеПрофиля.Значение.Роли Цикл
			РолиПрофилей.Вставить(Роль, Истина);
		КонецЦикла;
		Для Каждого Строка Из ОписаниеПрофиля.Значение.ВидыДоступа Цикл
			ВидыДоступаПрофилей.Вставить(Строка.Ключ, Истина);
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого СвойстваВидаДоступа Из ВидыДоступаМассив Цикл
		ИмяВидаДоступа = СвойстваВидаДоступа.Имя;
		
		Если ВидыДоступаИсключения.Получить(ИмяВидаДоступа) <> Неопределено
		 Или ВидыДоступаПрофилей.Получить(ИмяВидаДоступа) <> Неопределено Тогда
			
			Продолжить;
		КонецЕсли;
		
		СписокОшибочныхОбъектов.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Вид доступа ""%1"".'"), ИмяВидаДоступа));
	КонецЦикла;
	
	Для Каждого Роль Из Метаданные.Роли Цикл
		ИмяРоли = Роль.Имя;
		
		Если СтрНайти(ИмяРоли, "_Демо") = 0 И Не РольБСП(Роль) Тогда
			Продолжить;
		КонецЕсли;
		
		Если РолиИсключения.Получить(ИмяРоли) <> Неопределено
		 Или РолиПрофилей.Получить(ИмяРоли) <> Неопределено
		 Или СтрНайти(ИмяРоли, "Профиль_") > 0 Тогда
			
			Продолжить;
		КонецЕсли;
		
		СписокОшибочныхОбъектов.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Роль ""%1"".'"), ИмяРоли), Роль.ПолноеИмя());
	КонецЦикла;
	
	ПредставлениеОшибки = НСтр("ru = 'Роль или вид доступа не найдены ни в одном из описаний профилей'");
	ОписаниеИсправления = НСтр("ru = 'Включите роль или вид доступа в одно из описаний поставляемых или демонстрационный профилей.'");
	
	СтруктураОшибок =  Новый Структура;
	СтруктураОшибок.Вставить("ПредставлениеОшибки", ПредставлениеОшибки);
	СтруктураОшибок.Вставить("ОписаниеИсправления", ОписаниеИсправления);
	СтруктураОшибок.Вставить("ОшибочныеДанные",     СписокОшибочныхОбъектов);
	
	Возврат СтруктураОшибок;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_ПроверитьКомментарииДляБлоковКодаПодсистем()
	
	СписокОшибочныхОбъектов = Новый СписокЗначений;
	
	Если КаталогВыгрузкиМодулей = "" Тогда
		ВыгрузитьКонфигурациюВXML(КаталогВыгрузкиМодулей);
	КонецЕсли;
	
	МассивПодсистем = СписокИспользуемыхПодсистем();
	
	МассивМодулей = НайтиФайлы(КаталогВыгрузкиМодулей, "*.txt");
	
	ТекстФайла = Новый ТекстовыйДокумент;
	
	Состояние(НСтр("ru = 'Проверка комментариев для блоков кода'"));
	
	Для Каждого Файл Из МассивМодулей Цикл
		
		Если СтрНайти(Файл.Имя, "ИнструментыРазработчикаДополнительныеОтчетыИОбработкиРасстановкаФрагментовКода") > 0
			Или СтрНайти(Файл.Имя, "ИнструментыРазработчикаПечатьРасстановкаФрагментовКода") > 0
			Или СтрНайти(Файл.Имя, "ИнструментыРазработчикаПереходНаВерсию231") > 0
			Или СтрНайти(Файл.Имя, "ИнструментыРазработчикаПереходНаВерсию232") > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстФайла.Прочитать(Файл.ПолноеИмя);
		СтрокаТекста = ТекстФайла.ПолучитьТекст();
		
		Для Каждого Подсистема Из МассивПодсистем Цикл
			ОпределитьОшибкиКомментариев(Файл.Имя, Подсистема, СтрокаТекста, СписокОшибочныхОбъектов);
		КонецЦикла;
	КонецЦикла;
	
	ПредставлениеОшибки = НСтр("ru = 'Указаны неверные комментарии для блоков кода подсистем'");
	ОписаниеИсправления = НСтр("ru = 'Для всех блоков кода, относящихся к той или иной подсистеме, используются начальные и конечные комментарии вида:
	|<ПутьКПодсистеме>
	|...
	|Конец <ПутьКПодсистеме>'");
	
	СтруктураОшибок =  Новый Структура(
		"ПредставлениеОшибки, ОписаниеИсправления, ОшибочныеДанные",
		ПредставлениеОшибки, ОписаниеИсправления, СписокОшибочныхОбъектов);
	Возврат СтруктураОшибок;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_ПроверитьПравильностьУсловныхВызовов()
	
	СписокОшибочныхОбъектов = Новый СписокЗначений;
	
	Если КаталогВыгрузкиМодулей = "" Тогда
		ВыгрузитьКонфигурациюВXML(КаталогВыгрузкиМодулей);
	КонецЕсли;
	
	МассивМодулей = НайтиФайлы(КаталогВыгрузкиМодулей, "*.txt");
	
	СписокИспользуемыхПодсистем = СписокИспользуемыхПодсистем(Ложь);
	ТекстФайла = Новый ТекстовыйДокумент;
	
	Состояние(НСтр("ru = 'Проверка условных вызовов'"));
	
	Для Каждого Файл Из МассивМодулей Цикл
		
		Если СтрНайти(Файл.Имя, "ИнструментыРазработчикаПроверкаБСППередСборкой") > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстФайла.Прочитать(Файл.ПолноеИмя);
		СтрокаТекста = ТекстФайла.ПолучитьТекст();
		
		СтрокаУсловногоВызова = "ОбщегоНазначения.ПодсистемаСуществует(";
		СтрокаУсловногоВызова2 = "ОбщегоНазначенияКлиент.ПодсистемаСуществует(";
		ОпределитьОшибкиУсловныхВызовов(Файл.Имя, СтрокаТекста, СписокОшибочныхОбъектов, СписокИспользуемыхПодсистем, СтрокаУсловногоВызова);
		ОпределитьОшибкиУсловныхВызовов(Файл.Имя, СтрокаТекста, СписокОшибочныхОбъектов, СписокИспользуемыхПодсистем, СтрокаУсловногоВызова2);
	КонецЦикла;
	
	ПредставлениеОшибки = НСтр("ru = 'Возможно некорректный вызов функции ""ПодсистемаСуществует"" 
		|или допущена орфографическая ошибка в названии подсистемы.'");
	ОписаниеИсправления = НСтр("ru = 'Название подсистемы должно задаваться с учетом иерархии в виде - ""СтандартныеПодсистемы.ИмяПодсистемы""
		|или ""СтандартныеПодсистемы.ИмяПодсистемы1.ИмяПодсистемы2"" :'");
	
	СтруктураОшибок =  Новый Структура(
		"ПредставлениеОшибки, ОписаниеИсправления, ОшибочныеДанные",
		ПредставлениеОшибки, ОписаниеИсправления, СписокОшибочныхОбъектов);
	Возврат СтруктураОшибок;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_ПроверитьНаличиеПраваИнтерактивноеУдаление()
	
	СписокОшибочныхОбъектов = ПроверкаПравРолей("ИнтерактивноеУдаление", "ВсеРоли");
	
	ПредставлениеОшибки = НСтр("ru = 'Недопустимо наличие права ""Интерактивное удаление""'");
	ОписаниеИсправления = Неопределено;
	СтруктураОшибок =  Новый Структура(
		"ПредставлениеОшибки, ОписаниеИсправления, ОшибочныеДанные",
		ПредставлениеОшибки, ОписаниеИсправления, СписокОшибочныхОбъектов);
	Возврат СтруктураОшибок;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_ПроверитьРольПолныеПраваДляРазделяемыхОбъектовМетаданных()
	
	СписокОшибочныхОбъектов = ПроверкаПравРолей("ПраваРазделенныхОМД", "ПолныеПрава");
	
	ПредставлениеОшибки = НСтр("ru = 'Роль ПолныеПрава должна давать все права на разделенные объекты метаданных.'");
	ОписаниеИсправления = Неопределено;
	СтруктураОшибок =  Новый Структура(
		"ПредставлениеОшибки, ОписаниеИсправления, ОшибочныеДанные",
		ПредставлениеОшибки, ОписаниеИсправления, СписокОшибочныхОбъектов);
	Возврат СтруктураОшибок;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_ПроверитьРольАдминистраторСистемыДляРазделяемыхОбъектовМетаданных()
	
	СписокОшибочныхОбъектов = ПроверкаПравРолей("ПраваРазделенныхОМД", "АдминистраторСистемы");
	
	ПредставлениеОшибки = НСтр("ru = 'Роль АдминистраторСистемы не должна давать права на разделенные объекты метаданных.'");
	ОписаниеИсправления = Неопределено;
	СтруктураОшибок =  Новый Структура(
		"ПредставлениеОшибки, ОписаниеИсправления, ОшибочныеДанные",
		ПредставлениеОшибки, ОписаниеИсправления, СписокОшибочныхОбъектов);
	Возврат СтруктураОшибок;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_ПроверитьРольАдминистраторСистемыДляНеразделяемыхОбъектовМетаданных()
	
	СписокОшибочныхОбъектов = ПроверкаПравРолей("ПраваНеразделенныхОМД", "АдминистраторСистемы");
	
	ПредставлениеОшибки = НСтр("ru = 'Роль АдминистраторСистемы должна давать все права на неразделенные объекты метаданных.'");
	ОписаниеИсправления = Неопределено;
	СтруктураОшибок =  Новый Структура(
		"ПредставлениеОшибки, ОписаниеИсправления, ОшибочныеДанные",
		ПредставлениеОшибки, ОписаниеИсправления, СписокОшибочныхОбъектов);
	Возврат СтруктураОшибок;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_НекорректныеСвязиМеждуПодсистемами()
	
	Если КаталогВыгрузкиМодулей = "" Тогда
		ВыгрузитьКонфигурациюВXML(КаталогВыгрузкиМодулей);
	КонецЕсли;
	
	СписокОшибочныхОбъектов = НекорректныеСвязиМеждуПодсистемами();
	
	ПредставлениеОшибки = НСтр("ru = 'Недопустимо наличие недокументированных жестких связей между подсистемами'");
	ОписаниеИсправления = Неопределено;
	СтруктураОшибок =  Новый Структура(
		"ПредставлениеОшибки, ОписаниеИсправления, ОшибочныеДанные",
		ПредставлениеОшибки, ОписаниеИсправления, СписокОшибочныхОбъектов);
	Возврат СтруктураОшибок;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_ВыполнитьПоискЗапрещенныхКомментариев()
	
	Если КаталогВыгрузкиМодулей = "" Тогда
		ВыгрузитьКонфигурациюВXML(КаталогВыгрузкиМодулей);
	КонецЕсли;
	
	СтрокаПоиска = "TO"+"DO";
	СписокОшибочныхОбъектов = ПоискЗапрещенныхКомментариевВКодеМодулей(СтрокаПоиска);
	
	ПредставлениеОшибки = НСтр("ru = 'Недопустимо наличие комментария ""%1"" в текстах модулей.'");
	ПредставлениеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПредставлениеОшибки, СтрокаПоиска);
	ОписаниеИсправления = Неопределено;
	СтруктураОшибок =  Новый Структура(
		"ПредставлениеОшибки, ОписаниеИсправления, ОшибочныеДанные",
		ПредставлениеОшибки, ОписаниеИсправления, СписокОшибочныхОбъектов);
	Возврат СтруктураОшибок;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_ПроверитьЗначениеФлагаВключатьВСодержаниеСправки()
	
	СписокОшибочныхОбъектов = ПроцедурыСФлагомВключатьВСодержаниеСправки();
	
	ПредставлениеОшибки = НСтр("ru = 'Поставляемые подсистемы не должны содержать флаг ""Включать в содержание справки""'");
	ОписаниеИсправления = Неопределено;
	СтруктураОшибок =  Новый Структура(
		"ПредставлениеОшибки, ОписаниеИсправления, ОшибочныеДанные",
		ПредставлениеОшибки, ОписаниеИсправления, СписокОшибочныхОбъектов);
	Возврат СтруктураОшибок;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_НайтиВызовыМетодаРольДоступна()
	
	Если КаталогВыгрузкиМодулей = "" Тогда
		ВыгрузитьКонфигурациюВXML(КаталогВыгрузкиМодулей);
	КонецЕсли;
	
	СтрокаПоиска = "РольДоступна(";
	СписокОшибочныхОбъектов = ПоискЗапрещенныхМетодовВКодеМодулей(СтрокаПоиска);
	
	ПредставлениеОшибки = НСтр("ru = 'Недопустимо использование метода платформы ""%1""'");
	ПредставлениеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПредставлениеОшибки, СтрокаПоиска);
	ОписаниеИсправления = НСтр("ru = 'Необходимо использовать метод БСП ""Пользователи.РолиДоступны""'");
	СтруктураОшибок =  Новый Структура(
		"ПредставлениеОшибки, ОписаниеИсправления, ОшибочныеДанные",
		ПредставлениеОшибки, ОписаниеИсправления, СписокОшибочныхОбъектов);
	Возврат СтруктураОшибок;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_ПроверитьСовпадениеМодулейУправляемогоИОбычногоПриложений()
	
	ТекстФайлаОбычногоПриложения = Новый ТекстовыйДокумент;
	ТекстФайлаУправляемогоПриложения = Новый ТекстовыйДокумент;
	СписокОшибочныхОбъектов  = Новый СписокЗначений;
	
	Если КаталогВыгрузкиМодулей = "" Тогда
		ВыгрузитьКонфигурациюВXML(КаталогВыгрузкиМодулей);
	КонецЕсли;
	
	ТекстФайлаОбычногоПриложения = ПолучитьТекстовыйФайлПоПути(КаталогВыгрузкиМодулей, "Конфигурация.МодульОбычногоПриложения.txt");
	ТекстФайлаУправляемогоПриложения = ПолучитьТекстовыйФайлПоПути(КаталогВыгрузкиМодулей, "Конфигурация.МодульУправляемогоПриложения.txt");
	
	Список = Новый СписокЗначений;
	
	// Если не найден один из файлов - ошибка.
	Если ТекстФайлаОбычногоПриложения = Неопределено Или ТекстФайлаУправляемогоПриложения = Неопределено Тогда
		Список.Добавить("Не удалось найти файлы модулей приложения!");
		Возврат Новый Структура("ПредставлениеОшибки, ОписаниеИсправления, ОшибочныеДанные",НСтр("ru = 'Не удалось найти файлы модулей приложения!'"),"", Список) ;
	КонецЕсли;
	
	ПредставлениеОшибки = НСтр("ru = 'Модули обычного и управляемого приложений различны!'");
	ОписаниеИсправления = НСтр("ru = 'БСП поддерживает работу как в управляемом, так и в обычном приложении.
		|Соответственно, модули обычного и управляемого приложений должны совпадать за исключением специально предусмотренных случаев'");
	
	// Если количество строк различно - ошибка.
	Если ТекстФайлаОбычногоПриложения.КоличествоСтрок() <> ТекстФайлаУправляемогоПриложения.КоличествоСтрок() Тогда
		Список.Добавить(ПредставлениеОшибки);
		Возврат Новый Структура("ПредставлениеОшибки, ОписаниеИсправления, ОшибочныеДанные", 
			ПредставлениеОшибки, ОписаниеИсправления, Список);
	КонецЕсли;
	
	НомерПроверяемойСтроки = 0;
	
	Пока НомерПроверяемойСтроки < ТекстФайлаОбычногоПриложения.КоличествоСтрок() Цикл
		
		Если СокрЛП(ТекстФайлаОбычногоПриложения.ПолучитьСтроку(НомерПроверяемойСтроки)) <> 
			СокрЛП(ТекстФайлаУправляемогоПриложения.ПолучитьСтроку(НомерПроверяемойСтроки)) Тогда
			Список.Добавить(ПредставлениеОшибки);
			Возврат Новый Структура("ПредставлениеОшибки, ОписаниеИсправления, ОшибочныеДанные", 
				ПредставлениеОшибки, ОписаниеИсправления, Список);
		КонецЕсли;
		НомерПроверяемойСтроки = НомерПроверяемойСтроки + 1;
	КонецЦикла;
	
	Возврат Новый Структура("ПредставлениеОшибки, ОписаниеИсправления, ОшибочныеДанные", 
		ПредставлениеОшибки, ОписаниеИсправления, Список);
	
КонецФункции

// Следующие проверки не поддерживают адресную регистрацию ошибок.

&НаСервере
Функция Подключаемый_ПроверитьРолиНаНаличиеНедопустимыхПрав()
	
	СписокОшибочныхОбъектов = Новый СписокЗначений;
	
	Попытка
		Константы.ПараметрыРаботыПользователей.СоздатьМенеджерЗначения().ПроверитьНазначениеРолей(, Истина);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		СписокОшибочныхОбъектов.Добавить(КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
	КонецПопытки;
	
	ПредставлениеОшибки = НСтр("ru = 'Некорректно указано назначение ролей или некорректно настроены права в ролях.'");
	ОписаниеИсправления = НСтр("ru = 'См. комментарий к переопределяемой процедуре и документацию.'");
	
	СтруктураОшибок =  Новый Структура;
	СтруктураОшибок.Вставить("ПредставлениеОшибки", ПредставлениеОшибки);
	СтруктураОшибок.Вставить("ОписаниеИсправления", ОписаниеИсправления);
	СтруктураОшибок.Вставить("ОшибочныеДанные",     СписокОшибочныхОбъектов);
	
	Возврат СтруктураОшибок;
	
КонецФункции

&НаСервере
Функция Подключаемый_НайтиНеподдерживаемыеНастройкиРолей()
	
	ОбработкаОбъект = Обработки.ИнструментыРазработчикаУправлениеДоступом.Создать();
	Результат = ОбработкаОбъект.НеПоддерживаемыеНастройки(КаталогВыгрузкиФайловКонфигурации);
	
	СписокОшибочныхОбъектов = Новый СписокЗначений;
	Если ЗначениеЗаполнено(Результат) Тогда
		СписокОшибочныхОбъектов.Добавить(Результат);
	КонецЕсли;
	
	ПредставлениеОшибки = НСтр("ru = 'Настройки видимости, просмотра и редактирования по ролям должны находиться
		|в обработчике события ПриСозданииНаСервере.'");
	ОписаниеИсправления = Неопределено;
	СтруктураОшибок =  Новый Структура(
		"ПредставлениеОшибки, ОписаниеИсправления, ОшибочныеДанные",
		ПредставлениеОшибки, ОписаниеИсправления, СписокОшибочныхОбъектов);
	Возврат СтруктураОшибок;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры и функции проверок.

&НаКлиенте
Процедура ОпределитьОшибкиУсловныхВызовов(ИмяФайлаМодуля, Знач СтрокаТекста, Ошибки, СписокИспользуемыхПодсистем, СтрокаУсловногоВызова)
	
	Если СтрНайти(ИмяФайлаМодуля, "ОбщегоНазначенияКлиентСервер") > 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПолноеИмяОбъекта = ПолноеИмяПоИмениМодуля(ИмяФайлаМодуля);
	
	ТекстСообщения = "";
	
	Если СтрНайти(ИмяФайлаМодуля, ".Модуль.txt") Тогда
		СокращенноеИмяФайлаМодуля = СтрЗаменить(ИмяФайлаМодуля, ".Модуль.txt", "");
	ИначеЕсли СтрНайти(ИмяФайлаМодуля, ".Module.txt") Тогда
		СокращенноеИмяФайлаМодуля = СтрЗаменить(ИмяФайлаМодуля, ".Module.txt", "");
	КонецЕсли;
	
	Пока Истина Цикл
		
		ПозицияНачалаУсловногоВызова = СтрНайти(СтрокаТекста, СтрокаУсловногоВызова);
		
		Если ПозицияНачалаУсловногоВызова = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ТекущаяСтрокаТекста = Прав(СтрокаТекста, СтрДлина(СтрокаТекста) - ПозицияНачалаУсловногоВызова + 1);
		ПозицияОкончанияУсловногоВызова = СтрНайти(ТекущаяСтрокаТекста, """)");
		Если ПозицияОкончанияУсловногоВызова = 0 Тогда
			Возврат;
		КонецЕсли;
		
		УсловныйВызов = Сред(ТекущаяСтрокаТекста, 0, ПозицияОкончанияУсловногоВызова + 2);
		УсловныйВызов = СокрЛП(УсловныйВызов);
		
		Если ИмяПодсистемыЗаданоНекорректно(УсловныйВызов, СписокИспользуемыхПодсистем) Тогда
			
			Если ТекстСообщения = "" Тогда
				ТекстСообщения = НСтр("ru = '%1: %2'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СокращенноеИмяФайлаМодуля, УсловныйВызов);
			Иначе
				ТекстСообщения = УсловныйВызов;
			КонецЕсли;
			
			Ошибки.Добавить(ТекстСообщения, ПолноеИмяОбъекта);
			
		КонецЕсли;
		
		СтрокаТекста = Прав(ТекущаяСтрокаТекста, СтрДлина(ТекущаяСтрокаТекста) - ПозицияОкончанияУсловногоВызова + 1);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ИмяПодсистемыЗаданоНекорректно(УсловныйВызов, СписокИспользуемыхПодсистем)
	
	ИмяЗаданоКорректно = Ложь;
	
	Если СтрНайти(УсловныйВызов, "ЭлектронноеВзаимодействие.") > 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого ИспользуемаяПодсистема Из СписокИспользуемыхПодсистем Цикл
		
		СтрокаУсловногоВызова = СтрШаблон("ОбщегоНазначения.ПодсистемаСуществует(""%1"")", ИспользуемаяПодсистема);
		СтрокаУсловногоВызова2 = СтрШаблон("ОбщегоНазначенияКлиент.ПодсистемаСуществует(""%1"")", ИспользуемаяПодсистема);
		
		Если УсловныйВызов <> СтрокаУсловногоВызова
			И УсловныйВызов <> СтрокаУсловногоВызова2 Тогда
			ИмяЗаданоКорректно = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Не ИмяЗаданоКорректно;
	
КонецФункции

&НаСервере
Функция ВыполнитьПроверкуПоПринадлежностиОбъектов()
	СписокОбъектовПодсистем = ПолучитьСписокОбъектовПодсистем();
	
	// Возьмем только список объектов метаданных, представленных в подсистемах.
	СписокТиповМетаданных = ПолучитьСписокТиповМетаданныхДляПроверки();
	
	// не будем проверять:
	УдалитьИзСписка(СписокТиповМетаданных,"ФункциональныеОпции");
	УдалитьИзСписка(СписокТиповМетаданных,"ПараметрыФункциональныхОпций");
	УдалитьИзСписка(СписокТиповМетаданных,"Языки");
	
	НеПодчиненныеОбъекты = Новый СписокЗначений;
	ИзбыточноПодчиненныеОбъекты = Новый СписокЗначений;
	
	Для Каждого ТипМетаданныхВСписке Из СписокТиповМетаданных Цикл
		ТипМетаданных = ТипМетаданныхВСписке.Значение;
		Для Каждого ОбъектМетаданныхЗаданногоТипа Из Метаданные[ТипМетаданных] Цикл
			// пропускаем демо-объекты
			Если Не ЭтоПоставляемыйОбъект(ОбъектМетаданныхЗаданногоТипа, ТипМетаданных) Тогда
				Продолжить;
			КонецЕсли;
			// Ищем объекты, которые не подчинены ни одной подсистеме.
			ПараметрыОтбора = Новый Структура("Объект",ОбъектМетаданныхЗаданногоТипа);
			ПодчиненияПодсистемам = СписокОбъектовПодсистем.НайтиСтроки(ПараметрыОтбора);
			Если ПодчиненияПодсистемам.Количество() = 0 Тогда
				СтрокаНаименования = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 : %2", Строка(ТипМетаданных), ОбъектМетаданныхЗаданногоТипа.Имя);
				НеПодчиненныеОбъекты.Добавить(СтрокаНаименования, ОбъектМетаданныхЗаданногоТипа.ПолноеИмя());
			КонецЕсли;
			
			// Ищем объекты, которые подчинены более чем одной подсистеме.
			Если ПодчиненияПодсистемам.Количество() > 0 Тогда
				ЧислоПоставляемыхПодсистем = 0;
				Для Каждого РодительскаяПодсистема Из ПодчиненияПодсистемам Цикл
					Если ЭтоПоставляемаяПодсистема(РодительскаяПодсистема.Подсистема) Тогда
						ЧислоПоставляемыхПодсистем = ЧислоПоставляемыхПодсистем + 1;
					КонецЕсли;
				КонецЦикла;
				Если ЧислоПоставляемыхПодсистем > 1 Тогда
					СтрокаНаименования = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 : %2", Строка(ТипМетаданных), ОбъектМетаданныхЗаданногоТипа.Имя);
					ИзбыточноПодчиненныеОбъекты.Добавить(СтрокаНаименования, ОбъектМетаданныхЗаданногоТипа.ПолноеИмя());
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Новый Структура("НеПодчиненныеОбъекты,ИзбыточноПодчиненныеОбъекты", 
		НеПодчиненныеОбъекты, ИзбыточноПодчиненныеОбъекты);
	
КонецФункции

&НаСервере
Функция ЭтоПоставляемыйОбъект(ОбъектМетаданных, ТипМетаданных)
	
	Если ТипМетаданных = "ПараметрыСеанса" Тогда
		ИсключениеПроверки = (СтрНайти(ОбъектМетаданных.Имя, "_Демо") > 0);
	Иначе
		ИсключениеПроверки = (Лев(ОбъектМетаданных.Имя, 5) =  "_Демо");
	КонецЕсли;
	
	Возврат НЕ ИсключениеПроверки;
КонецФункции

&НаСервере
Процедура УдалитьИзСписка(Список, ИмяОбъекта)
	УдаляемоеЗначение = Список.НайтиПоЗначению(ИмяОбъекта);
	Если УдаляемоеЗначение = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	Список.Удалить(УдаляемоеЗначение);
КонецПроцедуры

&НаСервере 
Функция ЭтоПоставляемаяПодсистема(ПодсистемаПроверки)
	ПоставляемаяПодсистема = Метаданные.Подсистемы.СтандартныеПодсистемы;
	Возврат ПодсистемаПроверки = ПоставляемаяПодсистема
		ИЛИ ПодсистемаПроверки.Родитель() = ПоставляемаяПодсистема
		ИЛИ ПодсистемаПроверки.Родитель().Родитель() = ПоставляемаяПодсистема;
КонецФункции

&НаСервере
Функция СписокИспользуемыхПодсистем(ТолькоСтандартныеПодсистемы = Истина)
	
	Результат = Новый Массив;
	СтандартныеПодсистемы = Метаданные.Подсистемы.Найти("СтандартныеПодсистемы");
	Если СтандартныеПодсистемы <> Неопределено Тогда
		СписокПодсистем = СтандартныеПодсистемы.Подсистемы;
		ДобавитьПодсистемы(Результат, СписокПодсистем, "", "СтандартныеПодсистемы.");
	КонецЕсли;
	
	Если Не ТолькоСтандартныеПодсистемы Тогда
		МетаданныеТехнологияСервиса = Метаданные.Подсистемы.Найти("ТехнологияСервиса");
		Если МетаданныеТехнологияСервиса <> Неопределено Тогда
			СписокПодсистем = МетаданныеТехнологияСервиса.Подсистемы;
			ДобавитьПодсистемы(Результат, СписокПодсистем, "", "ТехнологияСервиса.");
		КонецЕсли;
		
		МетаданныеИнтернетПоддержкаПользователей = Метаданные.Подсистемы.Найти("ИнтернетПоддержкаПользователей");
		Если МетаданныеИнтернетПоддержкаПользователей <> Неопределено Тогда
			СписокПодсистем = МетаданныеИнтернетПоддержкаПользователей.Подсистемы;
			ДобавитьПодсистемы(Результат, СписокПодсистем, "", "ИнтернетПоддержкаПользователей.");
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого ПодсистемаИсключение Из ВнедряемыеПодсистемы() Цикл
		Результат.Добавить(ПодсистемаИсключение);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ДобавитьПодсистемы(СписокПодсистем, ВложенныеПодсистемы, ПутьКПодсистеме, Префикс)
	
	Если ВложенныеПодсистемы.Количество() > 0 Тогда 
		Для Каждого Подсистема Из ВложенныеПодсистемы Цикл
			РезервныйПуть = ПутьКПодсистеме;
			ПутьКПодсистеме = ПутьКПодсистеме + "." + Строка(Подсистема.Имя);
			ДобавитьПодсистемы(СписокПодсистем, Подсистема.Подсистемы, ПутьКПодсистеме, Префикс);
			СписокПодсистем.Добавить(Префикс + Сред(ПутьКПодсистеме, 2));
			ПутьКПодсистеме = РезервныйПуть;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВнедряемыеПодсистемы()
	
	Исключения = Новый Массив;
	Исключения.Добавить("СтандартныеПодсистемы.ВнешниеБизнесПроцессыИЗадачи");
	Исключения.Добавить("СтандартныеПодсистемы.РезервноеКопированиеОбластейДанныхМС");
	
	Возврат Исключения;
	
КонецФункции

&НаКлиенте
Процедура ОпределитьОшибкиКомментариев(ИмяФайлаМодуля, ИмяПодсистемы, Знач СтрокаТекста, Ошибки)
	
	НачалоФрагмента = НайтиНачалоФрагмента(СтрокаТекста, ИмяПодсистемы);
	Пока НачалоФрагмента > 0 Цикл
		
		ПозицияКонцаФрагмента = НайтиКонецФрагмента(СтрокаТекста, ИмяПодсистемы);
		Если ПозицияКонцаФрагмента = 0 Тогда
			ТекстСообщения = НСтр("ru = '[ИмяФайлаМодуля]: для открывающей скобки [НачалоФрагмента] не обнаружена закрывающая скобка.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "[НачалоФрагмента]", "// " + ИмяПодсистемы);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ИмяФайлаМодуля]", ИмяФайлаМодуля);
			ПолноеИмяОбъекта = ПолноеИмяПоИмениМодуля(ИмяФайлаМодуля);
			Ошибки.Добавить(ТекстСообщения, ПолноеИмяОбъекта);
			Возврат;
		КонецЕсли;
		
		Если ПозицияКонцаФрагмента < НачалоФрагмента Тогда
			ТекстСообщения = НСтр("ru = '[ИмяФайлаМодуля]: для открывающей скобки [НачалоФрагмента] закрывающая скобка расположена выше по тексту.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "[НачалоФрагмента]", "// " + ИмяПодсистемы);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ИмяФайлаМодуля]", ИмяФайлаМодуля);
			ПолноеИмяОбъекта = ПолноеИмяПоИмениМодуля(ИмяФайлаМодуля);
			Ошибки.Добавить(ТекстСообщения, ПолноеИмяОбъекта);
			Возврат;
		КонецЕсли;
		
		ДлинаНачалаФрагмента = СтрДлина("// " + ИмяПодсистемы);
		ПромежуточнаяСтрока = Сред(СтрокаТекста, НачалоФрагмента + ДлинаНачалаФрагмента + 1, ПозицияКонцаФрагмента - (НачалоФрагмента + ДлинаНачалаФрагмента) + 1);
		Если НайтиНачалоФрагмента(ПромежуточнаяСтрока, ИмяПодсистемы) > 0 Тогда 
			ТекстСообщения = НСтр("ru = '[ИмяФайлаМодуля]: внутри открывающейся скобки [НачалоФрагмента] есть еще одна открывающаяся скобка, до закрывающейся. Фрагмент кода: [ФрагментКода]'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "[НачалоФрагмента]", "// " + ИмяПодсистемы);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ИмяФайлаМодуля]", ИмяФайлаМодуля);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ФрагментКода]", Лев(ПромежуточнаяСтрока, 200));
			ПолноеИмяОбъекта = ПолноеИмяПоИмениМодуля(ИмяФайлаМодуля);
			Ошибки.Добавить(ТекстСообщения, ПолноеИмяОбъекта);
			Возврат;
		КонецЕсли;
		
		ПозицияПоследнегоСимвола = ПозицияКонцаФрагмента + СтрДлина("// Конец " + ИмяПодсистемы);
		СтрокаТекста = Сред(СтрокаТекста, ПозицияПоследнегоСимвола);
		
		НачалоФрагмента = НайтиНачалоФрагмента(СтрокаТекста, ИмяПодсистемы);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция НайтиНачалоФрагмента(Знач СтрокаТекста, Знач ИмяПодсистемы)
	
	СтрокаТекста  = НРег(СтрокаТекста);
	ИмяПодсистемы = НРег(ИмяПодсистемы);
	
	ПервыйВариант = "// " + ИмяПодсистемы;
	ВторойВариант = "//" + ИмяПодсистемы;
	
	Если СтрНайти(СтрокаТекста, ПервыйВариант) = 0 И СтрНайти(СтрокаТекста, ВторойВариант) = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Для Итерация = 1 По СтрДлина(СтрокаТекста) Цикл
		
		Если Сред(СтрокаТекста, Итерация, СтрДлина(ПервыйВариант)) = (ПервыйВариант) Тогда
			Если Не ПустаяСтрока(Сред(СтрокаТекста, Итерация + СтрДлина(ПервыйВариант), 1)) Тогда
				Продолжить;
			КонецЕсли;
			Возврат Итерация;
		КонецЕсли;
		
		Если Сред(СтрокаТекста, Итерация, СтрДлина(ВторойВариант)) = (ВторойВариант) Тогда 
			Если Не ПустаяСтрока(Сред(СтрокаТекста, Итерация + СтрДлина(ВторойВариант), 1)) Тогда 
				Продолжить;
			КонецЕсли;
			Возврат Итерация;
		КонецЕсли;
	КонецЦикла;
	
	Возврат 0;
	
КонецФункции

&НаКлиенте
Функция НайтиКонецФрагмента(Знач СтрокаТекста, Знач ИмяПодсистемы)
	
	СтрокаТекста  = НРег(СтрокаТекста);
	ИмяПодсистемы = НРег(ИмяПодсистемы);
	
	ПервыйВариант = "// конец " + ИмяПодсистемы;
	ВторойВариант = "//конец " + ИмяПодсистемы;
	
	Если СтрНайти(СтрокаТекста, ПервыйВариант) = 0 И СтрНайти(СтрокаТекста, ВторойВариант) = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Для Итерация = 1 По СтрДлина(СтрокаТекста) Цикл
		
		Если Сред(СтрокаТекста, Итерация, СтрДлина(ПервыйВариант)) = (ПервыйВариант) Тогда 
			Если Не ПустаяСтрока(Сред(СтрокаТекста, Итерация + СтрДлина(ПервыйВариант), 1)) Тогда 
				Продолжить;
			КонецЕсли;
			Возврат Итерация;
		КонецЕсли;
		
		Если Сред(СтрокаТекста, Итерация, СтрДлина(ВторойВариант)) = (ВторойВариант) Тогда 
			Если Не ПустаяСтрока(Сред(СтрокаТекста, Итерация + СтрДлина(ВторойВариант), 1)) Тогда 
				Продолжить;
			КонецЕсли;
			Возврат Итерация;
		КонецЕсли;
	КонецЦикла;
	
	Возврат 0;
	
КонецФункции

&НаСервере
Функция ПроверкаПравРолей(ТипПроверки, НазваниеРоли)
	
	СтруктураПрав = ПраваОбъектовМетаданных();
	
	НеверноЗаполненныеРоли = Новый СписокЗначений;
	
	// Проверка прав на планы обмена.
	Для Каждого Элемент Из Метаданные.ПланыОбмена Цикл
		
		ИмяОбъектаМетаданных = НСтр("ru = 'ПланыОбмена'");
		НеверноЗаполненныеРоли = ПроверкаРоли(
			Элемент, СтруктураПрав.ПланыОбмена, НеверноЗаполненныеРоли, ТипПроверки, НазваниеРоли, ИмяОбъектаМетаданных);
		
	КонецЦикла;
	
	// Проверка прав на константы.
	Для Каждого Элемент Из Метаданные.Константы Цикл
		
		ИмяОбъектаМетаданных = НСтр("ru = 'Константы'");
		НеверноЗаполненныеРоли = ПроверкаРоли(
			Элемент, СтруктураПрав.Константы, НеверноЗаполненныеРоли, ТипПроверки, НазваниеРоли, ИмяОбъектаМетаданных);
		
	КонецЦикла;
	
	// Проверка прав на справочники.
	Для Каждого Элемент Из Метаданные.Справочники Цикл
		
		ИмяОбъектаМетаданных = НСтр("ru = 'Справочники'");
		НеверноЗаполненныеРоли = ПроверкаРоли(
			Элемент, СтруктураПрав.Справочники, НеверноЗаполненныеРоли, ТипПроверки, НазваниеРоли, ИмяОбъектаМетаданных);
		
	КонецЦикла;
	
	// Проверка прав на документы.
	Для Каждого Элемент Из Метаданные.Документы Цикл
		
		ИмяОбъектаМетаданных = НСтр("ru = 'Документы'");
		НеверноЗаполненныеРоли = ПроверкаРоли(
			Элемент, СтруктураПрав.Документы, НеверноЗаполненныеРоли, ТипПроверки, НазваниеРоли, ИмяОбъектаМетаданных);
		
	КонецЦикла;
	
	// Проверка прав на планы видов характеристик.
	Для Каждого Элемент Из Метаданные.ПланыВидовХарактеристик Цикл
		
		ИмяОбъектаМетаданных = НСтр("ru = 'ПланыВидовХарактеристик'");
		НеверноЗаполненныеРоли = ПроверкаРоли(
			Элемент, СтруктураПрав.ПланыВидовХарактеристик, НеверноЗаполненныеРоли, ТипПроверки, НазваниеРоли, ИмяОбъектаМетаданных);
		
	КонецЦикла;
	
	// Проверка прав на регистры сведений.
	Для Каждого Элемент Из Метаданные.РегистрыСведений Цикл
		
		ИмяОбъектаМетаданных = НСтр("ru = 'РегистрыСведений'");
		НеверноЗаполненныеРоли = ПроверкаРоли(
			Элемент, СтруктураПрав.РегистрыСведений, НеверноЗаполненныеРоли, ТипПроверки, НазваниеРоли, ИмяОбъектаМетаданных);
		
	КонецЦикла;
	
	// Проверка прав на регистры накопления.
	Для Каждого Элемент Из Метаданные.РегистрыНакопления Цикл
		
		ИмяОбъектаМетаданных = НСтр("ru = 'РегистрыНакопления'");
		НеверноЗаполненныеРоли = ПроверкаРоли(
			Элемент, СтруктураПрав.РегистрыНакопления, НеверноЗаполненныеРоли, ТипПроверки, НазваниеРоли, ИмяОбъектаМетаданных);
		
	КонецЦикла;
	
	// Проверка прав на бизнес-процессы.
	Для Каждого Элемент Из Метаданные.БизнесПроцессы Цикл
		
		ИмяОбъектаМетаданных = НСтр("ru = 'БизнесПроцессы'");
		НеверноЗаполненныеРоли = ПроверкаРоли(
			Элемент, СтруктураПрав.БизнесПроцессы, НеверноЗаполненныеРоли, ТипПроверки, НазваниеРоли, ИмяОбъектаМетаданных);
		
	КонецЦикла;
	
	// Проверка прав на задачи
	Для Каждого Элемент Из Метаданные.Задачи Цикл
		
		ИмяОбъектаМетаданных = НСтр("ru = 'Задачи'");
		НеверноЗаполненныеРоли = ПроверкаРоли(
			Элемент, СтруктураПрав.Задачи, НеверноЗаполненныеРоли, ТипПроверки, НазваниеРоли, ИмяОбъектаМетаданных);
		
	КонецЦикла;
	
	Возврат НеверноЗаполненныеРоли;
	
КонецФункции

&НаСервере
Функция ПроверкаРоли(ОбъектМД, СписокПрав, НеверноЗаполненныеРоли, ТипПроверки, НазваниеРоли, ИмяОбъектаМетаданных)
	
	ЭлементСоставаОбщегоРеквизита = Метаданные.ОбщиеРеквизиты.ОбластьДанныхОсновныеДанные.Состав.Найти(ОбъектМД);
	ЭлементСоставаОбщегоВспомогательногоРеквизита = Метаданные.ОбщиеРеквизиты.ОбластьДанныхВспомогательныеДанные.Состав.Найти(ОбъектМД);
	
	ПолноеИмяОбъекта = ЭлементСоставаОбщегоРеквизита.Метаданные.ПолноеИмя();
	
	Если СписокИсключений.НайтиПоЗначению(ЭлементСоставаОбщегоРеквизита.Метаданные.Имя) <> Неопределено Тогда
		Возврат НеверноЗаполненныеРоли;
	КонецЕсли;
	
	Если ТипПроверки = "ИнтерактивноеУдаление" Тогда
		
		Если СписокПрав.НайтиПоЗначению("ИнтерактивноеУдаление") = Неопределено Тогда
			Возврат НеверноЗаполненныеРоли;
		КонецЕсли;
		
		Для Каждого ЭлементРоль Из Метаданные.Роли Цикл
			ДоступКОбъектуУстановлен = ПравоДоступа(
				"ИнтерактивноеУдаление", ЭлементСоставаОбщегоРеквизита.Метаданные, ЭлементРоль);
				
			Если ДоступКОбъектуУстановлен Тогда
				СтрокаОшибки = НСтр("ru = 'Роль %1, объект %2.%3'");
				СтрокаОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаОшибки,
					                     ЭлементРоль.Имя,
					                     ИмяОбъектаМетаданных,
					                     ЭлементСоставаОбщегоРеквизита.Метаданные.Имя);
				НеверноЗаполненныеРоли.Добавить(СтрокаОшибки, ПолноеИмяОбъекта);
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Для Каждого Элемент Из СписокПрав Цикл
			
			Если Элемент.Значение = "ИнтерактивноеУдаление" Тогда
				Продолжить;
			КонецЕсли;
			
			Если НазваниеРоли = "АдминистраторСистемы" Тогда
				ДоступКОбъектуУстановлен = ПравоДоступа(
					Элемент.Значение, ЭлементСоставаОбщегоРеквизита.Метаданные, Метаданные.Роли.АдминистраторСистемы);
			ИначеЕсли НазваниеРоли = "ПолныеПрава" Тогда
				ДоступКОбъектуУстановлен = ПравоДоступа(
					Элемент.Значение, ЭлементСоставаОбщегоРеквизита.Метаданные, Метаданные.Роли.ПолныеПрава);
			КонецЕсли;
			
			Если ТипПроверки = "ПраваРазделенныхОМД" Тогда
				
				Если НазваниеРоли = "АдминистраторСистемы" Тогда
					
					Если ЭлементСоставаОбщегоРеквизита.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Авто Тогда
						
						Если ДоступКОбъектуУстановлен Тогда
							НеверноЗаполненныеРоли.Добавить(ИмяОбъектаМетаданных + "." + ЭлементСоставаОбщегоРеквизита.Метаданные.Имя, ПолноеИмяОбъекта);
							Прервать;
						КонецЕсли;
						
					КонецЕсли;
					
				ИначеЕсли НазваниеРоли = "ПолныеПрава" Тогда
					
					Если ЭлементСоставаОбщегоРеквизита.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Авто
						И Не ДоступКОбъектуУстановлен Тогда
						НеверноЗаполненныеРоли.Добавить(ИмяОбъектаМетаданных + "." + ЭлементСоставаОбщегоРеквизита.Метаданные.Имя, ПолноеИмяОбъекта);
						Прервать;
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли ТипПроверки = "ПраваНеразделенныхОМД" Тогда
				
				Если НазваниеРоли = "АдминистраторСистемы" Тогда
					
					Если ЭлементСоставаОбщегоРеквизита.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.НеИспользовать Тогда
						ВспомогательныеДанные = (ЭлементСоставаОбщегоВспомогательногоРеквизита.Использование =
							                     Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Использовать);
						
						Если Не ДоступКОбъектуУстановлен И Не ВспомогательныеДанные Тогда
							НеверноЗаполненныеРоли.Добавить(ИмяОбъектаМетаданных + "." + ЭлементСоставаОбщегоРеквизита.Метаданные.Имя, ПолноеИмяОбъекта);
							Прервать;
						КонецЕсли;
						
					КонецЕсли;
					
				ИначеЕсли НазваниеРоли = "ПолныеПрава" Тогда
					
					Если ЭлементСоставаОбщегоРеквизита.Использование = 
							Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.НеИспользовать Тогда
							
						Если Элемент.Значение = "Чтение"
							Или Элемент.Значение = "Просмотр"
							Или Элемент.Значение = "ВводПоСтроке" Тогда
							Продолжить;
						ИначеЕсли ДоступКОбъектуУстановлен Тогда
							НеверноЗаполненныеРоли.Добавить(ИмяОбъектаМетаданных + "." + ЭлементСоставаОбщегоРеквизита.Метаданные.Имя, ПолноеИмяОбъекта);
							Прервать;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат НеверноЗаполненныеРоли;
	
КонецФункции

&НаСервере
Функция ПраваОбъектовМетаданных()
	
	СтруктураПрав = Новый Структура;
	
	// Планы обмена
	СписокПрав = Новый СписокЗначений;
	СписокПрав.Добавить("Чтение");
	СписокПрав.Добавить("Добавление");
	СписокПрав.Добавить("Изменение");
	СписокПрав.Добавить("Удаление");
	СписокПрав.Добавить("Просмотр");
	СписокПрав.Добавить("ИнтерактивноеДобавление");
	СписокПрав.Добавить("Редактирование");
	СписокПрав.Добавить("ИнтерактивноеУдаление");
	СписокПрав.Добавить("ИнтерактивнаяПометкаУдаления");
	СписокПрав.Добавить("ИнтерактивноеСнятиеПометкиУдаления");
	СписокПрав.Добавить("ИнтерактивноеУдалениеПомеченных");
	СписокПрав.Добавить("ВводПоСтроке");
	СтруктураПрав.Вставить("ПланыОбмена", СписокПрав);
	
	// Константы
	СписокПрав = Новый СписокЗначений;
	СписокПрав.Добавить("Чтение");
	СписокПрав.Добавить("Изменение");
	СписокПрав.Добавить("Просмотр");
	СписокПрав.Добавить("Редактирование");
	СтруктураПрав.Вставить("Константы", СписокПрав);
	
	// Справочники
	СписокПрав = Новый СписокЗначений;
	СписокПрав.Добавить("Чтение");
	СписокПрав.Добавить("Добавление");
	СписокПрав.Добавить("Изменение");
	СписокПрав.Добавить("Удаление");
	СписокПрав.Добавить("Просмотр");
	СписокПрав.Добавить("ИнтерактивноеДобавление");
	СписокПрав.Добавить("Редактирование");
	СписокПрав.Добавить("ИнтерактивноеУдаление");
	СписокПрав.Добавить("ИнтерактивнаяПометкаУдаления");
	СписокПрав.Добавить("ИнтерактивноеСнятиеПометкиУдаления");
	СписокПрав.Добавить("ИнтерактивноеУдалениеПомеченных");
	СписокПрав.Добавить("ВводПоСтроке");
	СтруктураПрав.Вставить("Справочники", СписокПрав);
	
	// Документы
	СписокПрав = Новый СписокЗначений;
	СписокПрав.Добавить("Чтение");
	СписокПрав.Добавить("Добавление");
	СписокПрав.Добавить("Изменение");
	СписокПрав.Добавить("Удаление");
	СписокПрав.Добавить("Проведение");
	СписокПрав.Добавить("ОтменаПроведения");
	СписокПрав.Добавить("Просмотр");
	СписокПрав.Добавить("ИнтерактивноеДобавление");
	СписокПрав.Добавить("Редактирование");
	СписокПрав.Добавить("ИнтерактивноеУдаление");
	СписокПрав.Добавить("ИнтерактивнаяПометкаУдаления");
	СписокПрав.Добавить("ИнтерактивноеСнятиеПометкиУдаления");
	СписокПрав.Добавить("ИнтерактивноеУдалениеПомеченных");
	СписокПрав.Добавить("ИнтерактивноеПроведение");
	СписокПрав.Добавить("ИнтерактивноеПроведениеНеОперативное");
	СписокПрав.Добавить("ИнтерактивнаяОтменаПроведения");
	СписокПрав.Добавить("ИнтерактивноеИзменениеПроведенных");
	СписокПрав.Добавить("ВводПоСтроке");
	СтруктураПрав.Вставить("Документы", СписокПрав);
	
	// Планы видов характеристик
	СписокПрав = Новый СписокЗначений;
	СписокПрав.Добавить("Чтение");
	СписокПрав.Добавить("Добавление");
	СписокПрав.Добавить("Изменение");
	СписокПрав.Добавить("Удаление");
	СписокПрав.Добавить("Просмотр");
	СписокПрав.Добавить("ИнтерактивноеДобавление");
	СписокПрав.Добавить("Редактирование");
	СписокПрав.Добавить("ИнтерактивноеУдаление");
	СписокПрав.Добавить("ИнтерактивнаяПометкаУдаления");
	СписокПрав.Добавить("ИнтерактивноеСнятиеПометкиУдаления");
	СписокПрав.Добавить("ИнтерактивноеУдалениеПомеченных");
	СписокПрав.Добавить("ВводПоСтроке");
	СтруктураПрав.Вставить("ПланыВидовХарактеристик", СписокПрав);
	
	// Регистры сведений
	СписокПрав = Новый СписокЗначений;
	СписокПрав.Добавить("Чтение");
	СписокПрав.Добавить("Изменение");
	СписокПрав.Добавить("Просмотр");
	СписокПрав.Добавить("Редактирование");
	СтруктураПрав.Вставить("РегистрыСведений", СписокПрав);
	
	// Регистры накопления
	СписокПрав = Новый СписокЗначений;
	СписокПрав.Добавить("Чтение");
	СписокПрав.Добавить("Изменение");
	СписокПрав.Добавить("Просмотр");
	СписокПрав.Добавить("Редактирование");
	СписокПрав.Добавить("УправлениеИтогами");
	СтруктураПрав.Вставить("РегистрыНакопления", СписокПрав);
	
	// Бизнес-процессы
	СписокПрав = Новый СписокЗначений;
	СписокПрав.Добавить("Чтение");
	СписокПрав.Добавить("Добавление");
	СписокПрав.Добавить("Изменение");
	СписокПрав.Добавить("Удаление");
	СписокПрав.Добавить("Просмотр");
	СписокПрав.Добавить("ИнтерактивноеДобавление");
	СписокПрав.Добавить("Редактирование");
	СписокПрав.Добавить("ИнтерактивноеУдаление");
	СписокПрав.Добавить("ИнтерактивнаяПометкаУдаления");
	СписокПрав.Добавить("ИнтерактивноеСнятиеПометкиУдаления");
	СписокПрав.Добавить("ИнтерактивноеУдалениеПомеченных");
	СписокПрав.Добавить("ВводПоСтроке");
	СписокПрав.Добавить("ИнтерактивнаяАктивация");
	СписокПрав.Добавить("Старт");
	СписокПрав.Добавить("ИнтерактивныйСтарт");
	СтруктураПрав.Вставить("БизнесПроцессы", СписокПрав);
	
	// Задачи
	СписокПрав = Новый СписокЗначений;
	СписокПрав.Добавить("Чтение");
	СписокПрав.Добавить("Добавление");
	СписокПрав.Добавить("Изменение");
	СписокПрав.Добавить("Удаление");
	СписокПрав.Добавить("Просмотр");
	СписокПрав.Добавить("ИнтерактивноеДобавление");
	СписокПрав.Добавить("Редактирование");
	СписокПрав.Добавить("ИнтерактивноеУдаление");
	СписокПрав.Добавить("ИнтерактивнаяПометкаУдаления");
	СписокПрав.Добавить("ИнтерактивноеСнятиеПометкиУдаления");
	СписокПрав.Добавить("ИнтерактивноеУдалениеПомеченных");
	СписокПрав.Добавить("ВводПоСтроке");
	СписокПрав.Добавить("ИнтерактивнаяАктивация");
	СписокПрав.Добавить("Выполнение");
	СписокПрав.Добавить("ИнтерактивноеВыполнение");
	СтруктураПрав.Вставить("Задачи", СписокПрав);
	
	Возврат СтруктураПрав;
КонецФункции

&НаСервере
Функция НекорректныеСвязиМеждуПодсистемами()
	
	СписокОшибочныхОбъектов = Новый СписокЗначений;
	ПолныеИменаПодсистем    = ПолныеИменаПодсистем();
	
	НекорректныеСвязи = 
		Отчеты.ИнструментыРазработчикаЗависимостиПодсистем.НекорректныеЗависимостиПодсистемБСП(КаталогВыгрузкиМодулей);
		
	КопияТаблицы = НекорректныеСвязи.Скопировать();
	КопияТаблицы.Свернуть("ВызывающаяПодсистема");
	Для Каждого СтрокаВызывающаяПодсистема Из КопияТаблицы Цикл
		
		ПараметрыОтбора = Новый Структура("ВызывающаяПодсистема", СтрокаВызывающаяПодсистема.ВызывающаяПодсистема);
		НайденныеСтроки = НекорректныеСвязи.НайтиСтроки(ПараметрыОтбора);
		СформированнаяСтрока = "";
		ТекущаяВызываемаяПодсистема = "";
		НомерСтроки = 0;
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Если СформированнаяСтрока = ""
				Или ТекущаяВызываемаяПодсистема <> НайденнаяСтрока.ВызываемаяПодсистема Тогда
				
				Если ТекущаяВызываемаяПодсистема <> ""
					И СформированнаяСтрока <> "" Тогда
					СформированнаяСтрока = СформированнаяСтрока + Символы.ПС;
				КонецЕсли;
				
				ТекущаяВызываемаяПодсистема = НайденнаяСтрока.ВызываемаяПодсистема;
				НомерСтроки = 0;
				СформированнаяСтрока = СформированнаяСтрока
				                       + НайденнаяСтрока.ВызывающаяПодсистема + " -> "
				                       + НайденнаяСтрока.ВызываемаяПодсистема + Символы.ПС;
			КонецЕсли;
			НомерСтроки = НомерСтроки + 1;
			СформированнаяСтрока = СформированнаяСтрока + Символы.Таб + НомерСтроки + ". "
			                       + НайденнаяСтрока.ВызывающийОбъект + " ("
			                       + НайденнаяСтрока.МестоВызова + ")";
			СформированнаяСтрока = СформированнаяСтрока
			                       + ?(НайденнаяСтрока.ВызываемыйОбъект <> "", " -> " + НайденнаяСтрока.ВызываемыйОбъект, "") + Символы.ПС;
		КонецЦикла;
		
		СформированнаяСтрока = СформированнаяСтрока + Символы.ПС;
		СписокОшибочныхОбъектов.Добавить(СформированнаяСтрока, ПолныеИменаПодсистем[СтрокаВызывающаяПодсистема.ВызывающаяПодсистема]);
		
	КонецЦикла;
	
	Возврат СписокОшибочныхОбъектов;
	
КонецФункции

&НаСервере
Функция ПолныеИменаПодсистем()
	
	Соответствие = Новый Соответствие;
	
	Для Каждого СтандартнаяПодсистема Из Метаданные.Подсистемы.СтандартныеПодсистемы.Подсистемы Цикл
		Соответствие.Вставить(СтандартнаяПодсистема.Имя, СтандартнаяПодсистема.ПолноеИмя());
		Если СтандартнаяПодсистема.Имя = "РаботаВМоделиСервиса" Тогда
			// Перебор всех подсистем ВМоделиСервиса.
			Для Каждого ПодсистемаВМоделиСервиса Из СтандартнаяПодсистема.Подсистемы Цикл
				Соответствие.Вставить(ПодсистемаВМоделиСервиса.Имя, ПодсистемаВМоделиСервиса.ПолноеИмя());
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Соответствие;
	
КонецФункции

&НаСервере
Функция ПоискЗапрещенныхКомментариевВКодеМодулей(СтрокаПоиска)
	
	СписокОшибочныхОбъектов = Новый СписокЗначений;
	МассивМодулей = НайтиФайлы(КаталогВыгрузкиМодулей, "*.txt");
	ТекстФайла = Новый ТекстовыйДокумент;
	НомерСтроки = 0;
	
	Для Каждого Файл Из МассивМодулей Цикл
		
		Если СтрНайти(Файл.Имя, "ИнструментыРазработчикаПроверкаБСППередСборкой") > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстФайла.Прочитать(Файл.ПолноеИмя);
		СтрокаТекста = ТекстФайла.ПолучитьТекст();
		СтрокаТекста = ВРег(СтрокаТекста);
		
		НомерСимвола = СтрНайти(СтрокаТекста, СтрокаПоиска);
		КомментарийНайден = (НомерСимвола > 0);
		Пока КомментарийНайден Цикл
			
			НомерСтроки = НомерСтроки(СтрокаТекста, НомерСимвола, НомерСтроки);
			СписокОшибочныхОбъектов.Добавить(Файл.Имя + " - строка " + НомерСтроки, ПолноеИмяПоИмениМодуля(Файл.Имя));
			СтрокаТекста = Сред(СтрокаТекста, НомерСимвола + 4);
			
			НомерСимвола = СтрНайти(СтрокаТекста, СтрокаПоиска);
			КомментарийНайден = (НомерСимвола > 0);
			
		КонецЦикла;
		НомерСтроки = 0;
		
	КонецЦикла;
	
	Возврат СписокОшибочныхОбъектов;
	
КонецФункции

&НаСервере
Функция ПроцедурыСФлагомВключатьВСодержаниеСправки()
	
	СписокОшибочныхОбъектов = Новый СписокЗначений;
	Для Каждого Подсистема Из Метаданные.Подсистемы.СтандартныеПодсистемы.Подсистемы Цикл
		Если Подсистема.ВключатьСправкуВСодержание Тогда
			СписокОшибочныхОбъектов.Добавить(Подсистема.ПолноеИмя(), Подсистема.ПолноеИмя());
		КонецЕсли;
		Для Каждого ДочерняяПодсистема Из Подсистема.Подсистемы Цикл
			Если Подсистема.ВключатьСправкуВСодержание Тогда
				СписокОшибочныхОбъектов.Добавить(ДочерняяПодсистема.ПолноеИмя(), ДочерняяПодсистема.ПолноеИмя());
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат СписокОшибочныхОбъектов;
	
КонецФункции

&НаСервере
Функция НомерСтроки(СтрокаТекста, НомерСимвола, НомерСтроки)
	
	НомерСтроки = НомерСтроки + СтрЧислоВхождений(Лев(СтрокаТекста, НомерСимвола), Символы.ПС) + ?(НомерСтроки = 0, 1, 0);
	
	Возврат НомерСтроки;
	
КонецФункции

&НаСервере
Функция ПоискЗапрещенныхМетодовВКодеМодулей(СтрокаПоиска)
	
	СписокОшибочныхОбъектов = Новый СписокЗначений;
	МассивМодулей = НайтиФайлы(КаталогВыгрузкиМодулей, "*.txt");
	ТекстФайла = Новый ТекстовыйДокумент;
	НомерСтроки = 0;
	ИсключающийКомментарий = "// Не заменять на РолиДоступны";
	
	Для Каждого Файл Из МассивМодулей Цикл
		
		Если СтрНайти(Файл.Имя, "ИнструментыРазработчикаПроверкаБСППередСборкой") > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстФайла.Прочитать(Файл.ПолноеИмя);
		СтрокаТекста = ТекстФайла.ПолучитьТекст();
		СтрокаТекста = ВРег(СтрокаТекста);
		
		НомерСимвола = СтрНайти(СтрокаТекста, ВРег(СтрокаПоиска));
		КомментарийНайден = (НомерСимвола > 0);
		Пока КомментарийНайден Цикл
			
			НомерСтроки = НомерСтроки(СтрокаТекста, НомерСимвола, НомерСтроки);
			Если СтрНайти(ТекстФайла.ПолучитьСтроку(НомерСтроки), ИсключающийКомментарий) = 0 Тогда
				СписокОшибочныхОбъектов.Добавить(Файл.Имя + " - строка " + НомерСтроки, ПолноеИмяПоИмениМодуля(Файл.Имя));
			КонецЕсли;
			СтрокаТекста = Сред(СтрокаТекста, НомерСимвола + 4);
			
			НомерСимвола = СтрНайти(СтрокаТекста, СтрокаПоиска);
			КомментарийНайден = (НомерСимвола > 0);
			
		КонецЦикла;
		НомерСтроки = 0;
		
	КонецЦикла;
	
	Возврат СписокОшибочныхОбъектов;
	
КонецФункции

&НаСервере
Функция ОткрытКонфигуратор()
	
	Для Каждого Сеанс Из ПолучитьСеансыИнформационнойБазы() Цикл
		Если ВРег(Сеанс.ИмяПриложения) = ВРег("Designer") Тогда // Конфигуратор
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция РольБСП(Роль, Подсистема = Неопределено)
	
	Если Подсистема = Неопределено Тогда
		Подсистема = Метаданные.Подсистемы.СтандартныеПодсистемы;
	КонецЕсли;
	
	Если Подсистема.Состав.Содержит(Роль) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Для Каждого ТекущаяПодсистема Из Подсистема.Подсистемы Цикл
		Если ТекущаяПодсистема.Состав.Содержит(Роль) Тогда
			Возврат Истина;
		КонецЕсли;
		Если РольБСП(Роль, ТекущаяПодсистема) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ПолноеИмяПоИмениМодуля(ИмяМодуля)
	ИмяМодуляЧастями = СтрРазделить(ИмяМодуля, ".");
	Возврат ИмяМодуляЧастями[0] + "." + ИмяМодуляЧастями[1];
КонецФункции

#КонецОбласти
