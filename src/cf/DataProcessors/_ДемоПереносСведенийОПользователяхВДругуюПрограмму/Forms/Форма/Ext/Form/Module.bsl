#Область ОписаниеПеременных

// Организация фонового выполнения переноса.
&НаКлиенте
Перем ФормаДлительнойОперации;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОбработчикаОжидания = Новый Структура;
	СтандартныеПодсистемыСервер.УстановитьОтображениеЗаголовковГрупп(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КаталогФайловойБазыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбора.Каталог = КаталогФайловойБазы;
	
	Если ДиалогВыбора.Выбрать() Тогда
		КаталогФайловойБазы = ДиалогВыбора.Каталог;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипАутентификацииПриИзменении(Элемент)
	Элементы.ГруппаАутентификации.Доступность = (ТипАутентификации = 0);
КонецПроцедуры

&НаКлиенте
Процедура ТипБазыПриИзменении(Элемент)
	
	Если ТипБазы = "Файловая" Тогда
		Элементы.ГруппаТипБазы.ТекущаяСтраница = Элементы.ГруппаФайловая;
	Иначе
		Элементы.ГруппаТипБазы.ТекущаяСтраница = Элементы.ГруппаСерверная;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПроверитьПодключение(Команда)
	
	Если СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ИнформационнаяБазаФайловая Тогда
		ОбщегоНазначенияКлиент.ЗарегистрироватьCOMСоединитель(Ложь);
	КонецЕсли;
	
	СтруктураНастроек = ПараметрыПодключенияCOM();
	
	ТекстСообщения = ОшибкиПодключенияCOMНаСервере(СтруктураНастроек);
	Если ПустаяСтрока(ТекстСообщения) Тогда
		// Нет ошибок, сообщим об успехе.
		ТекстСообщения = НСтр("ru = 'Проверка подключения успешно завершена.'");
	КонецЕсли;
	
	ОчиститьСообщения();
	ПоказатьПредупреждение(, ТекстСообщения);
	
КонецПроцедуры

&НаКлиенте
Процедура Перенести(Команда)
	
	ПеренестиПользователей();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Процедура ОтменитьФоновоеЗадание(Знач ИдентификаторЗадания)
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
КонецПроцедуры

&НаСервере
Функция ФоноваяЗагрузкаЗавершена(Знач ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПользователиДляПереноса(Знач Источник, Результат = Неопределено)
	
	Если Результат = Неопределено Тогда
		Результат = Новый Соответствие;
	КонецЕсли;
	
	Для Каждого Строка Из Источник.ПолучитьЭлементы() Цикл
		Если Строка.Пометка = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// Текущая строка
		Группа = Результат[Строка.ГруппаПользователей];
		Если Группа = Неопределено Тогда
			Группа = Новый Соответствие;
			Результат[Строка.ГруппаПользователей] = Группа;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Строка.Пользователь) Тогда
			Группа[Строка.Пользователь] = Истина;
		КонецЕсли;
		
		// Подчиненные строки
		ПользователиДляПереноса(Строка, Результат); 
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ИзменениеПометкиПользователя(Знач КоллекцияСтрок, Знач ИсходныеДанные)
	
	Для Каждого Строка Из КоллекцияСтрок Цикл
		
		Если Строка <> ИсходныеДанные И Строка.Пользователь = ИсходныеДанные.Пользователь Тогда
			Строка.Пометка = ИсходныеДанные.Пометка;
			ПроставитьПометкиВниз(Строка);
			ПроставитьПометкиВверх(Строка);
		КонецЕсли;
		
		ИзменениеПометкиПользователя(Строка.ПолучитьЭлементы(), ИсходныеДанные);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроставитьПометкиВниз(Знач ДанныеСтроки)
	Значение = ДанныеСтроки.Пометка;
	Для Каждого Потомок Из ДанныеСтроки.ПолучитьЭлементы() Цикл
		Потомок.Пометка = Значение;
		ПроставитьПометкиВниз(Потомок);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПроставитьПометкиВверх(Знач ДанныеСтроки)
	
	РодительСтроки = ДанныеСтроки.ПолучитьРодителя();
	Если РодительСтроки <> Неопределено Тогда
		ВсеИстина = Истина;
		НеВсеЛожь = Ложь;
		Для Каждого Потомок Из РодительСтроки.ПолучитьЭлементы() Цикл
			ВсеИстина = ВсеИстина И (Потомок.Пометка = 1);
			НеВсеЛожь = НеВсеЛожь Или Булево(Потомок.Пометка);
		КонецЦикла;
		Если ВсеИстина Тогда
			РодительСтроки.Пометка = 1;
		ИначеЕсли НеВсеЛожь Тогда
			РодительСтроки.Пометка = 2;
		Иначе
			РодительСтроки.Пометка = 0;
		КонецЕсли;
		ПроставитьПометкиВверх(РодительСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыПодключенияCOM()
	
	Результат = ОбщегоНазначенияКлиентСервер.СтруктураПараметровДляУстановкиВнешнегоСоединения();
	
	Результат.ВариантРаботыИнформационнойБазы = ТипБазы;
	Результат.КаталогИнформационнойБазы       = КаталогФайловойБазы;
	
	Результат.ИмяСервера1СПредприятия                     = СерверБазы;
	Результат.ИмяИнформационнойБазыНаСервере1СПредприятия = ИмяБазы;
	Результат.АутентификацияОперационнойСистемы           = ?(ТипАутентификации = 1, Истина, Ложь);
	
	Результат.ИмяПользователя    = Пользователь;
	Результат.ПарольПользователя = Пароль;
	
	Возврат Результат;
КонецФункции

&НаСервереБезКонтекста
Функция ОшибкиПодключенияCOMНаСервере(Знач СтруктураНастроек)
	
	Результат = ОбменДаннымиПовтИсп.УстановитьВнешнееСоединениеСБазой(СтруктураНастроек);
	Если Результат.Соединение = Неопределено Тогда
		Возврат Результат.КраткоеОписаниеОшибки;
	КонецЕсли;
	
	Возврат "";
КонецФункции

// Начало выполнения переноса после успешной проверки параметров безопасности.
&НаКлиенте
Процедура ПеренестиПользователей()
	
	Если СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ИнформационнаяБазаФайловая Тогда
		ОбщегоНазначенияКлиент.ЗарегистрироватьCOMСоединитель(Ложь);
	КонецЕсли;
	
	ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
	ПараметрыОбработчикаОжидания.Вставить("ИдентификаторЗадания");
	ПараметрыОбработчикаОжидания.Вставить("АдресХранилища");
	
	РезультатЗапуска = ЗапуститьВыгрузкуДанныхНаСервере(УникальныйИдентификатор, ПараметрыПодключенияCOM());
	
	ПараметрыОбработчикаОжидания.ИдентификаторЗадания = РезультатЗапуска.ИдентификаторЗадания;
	ПараметрыОбработчикаОжидания.АдресХранилища       = РезультатЗапуска.АдресХранилища;
	
	Если РезультатЗапуска.ЗаданиеВыполнено Тогда
		СообщитьОЗавершенииПереноса();
		Возврат;
	КонецЕсли;
	
	Состояние( НСтр("ru = 'Выполняется перенос сведений о пользователях.
		                  |Подождите, пожалуйста...'") );
	
	ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтотОбъект, РезультатЗапуска.ИдентификаторЗадания);
	
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура СообщитьОЗавершенииПереноса()
	
	// Все сообщения фонового обработчика.
	ВывестиСообщенияФоновогоЗадания(ПараметрыОбработчикаОжидания.ИдентификаторЗадания);
	
	// Итоговый результат
	АдресХранилища = ПараметрыОбработчикаОжидания.АдресХранилища;
	Если ЭтоАдресВременногоХранилища(АдресХранилища) Тогда
		
		ТекстСообщения = ПолучитьИзВременногоХранилища(АдресХранилища);
		Если Не ПустаяСтрока(ТекстСообщения) Тогда
			ПоказатьПредупреждение(, ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
	// Сброс состояния
	Состояние();
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВывестиСообщенияФоновогоЗадания(Знач Идентификатор)
	
	Если Идентификатор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ФоновоеЗадание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(Идентификатор);
	Если ФоновоеЗадание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СообщенияФоновогоЗадания = ФоновоеЗадание.ПолучитьСообщенияПользователю(Истина);
	Для Каждого Сообщение Из СообщенияФоновогоЗадания Цикл
		Сообщение.Сообщить();
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура КоррекцияУровняСтрок(Знач КоллекцияСтрокДерева, Знач ЗначениеРодителя)
	
	Позиция = КоллекцияСтрокДерева.Количество() - 1;
	Пока Позиция >= 0 Цикл
		СтрокаДерева = КоллекцияСтрокДерева[Позиция];
		Позиция = Позиция - 1;
		
		ДочерниеСтроки = СтрокаДерева.Строки;
		ТекущаяГруппа  = СтрокаДерева.ГруппаПользователей;
		
		КоррекцияУровняСтрок(ДочерниеСтроки, ТекущаяГруппа);
		
		ЭтоСтрокаГруппы = СтрокаДерева.Пользователь = NULL;
		Если ТекущаяГруппа = ЗначениеРодителя И ЭтоСтрокаГруппы Тогда
			Для Каждого Строка Из ДочерниеСтроки Цикл
				ЗаполнитьЗначенияСвойств(КоллекцияСтрокДерева.Добавить(), Строка);
			КонецЦикла;
			КоллекцияСтрокДерева.Удалить(СтрокаДерева);
			
		Иначе
			Если ЭтоСтрокаГруппы Тогда
				СтрокаДерева.ИндексПиктограммы = 1;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	ИдентификаторЗадания = ПараметрыОбработчикаОжидания.ИдентификаторЗадания;
	
	Если ФормаДлительнойОперации <> Неопределено И ФормаДлительнойОперации.Открыта() Тогда
		
		Если ФоноваяЗагрузкаЗавершена(ИдентификаторЗадания) Тогда
			ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
			СообщитьОЗавершенииПереноса();
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
		КонецЕсли;
		
	Иначе
		ОтменитьФоновоеЗадание(ИдентификаторЗадания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗапуститьВыгрузкуДанныхНаСервере(Знач ИдентификаторФормы, Знач ПараметрыПодключения)
	
	ПараметрыОперации = Новый Структура;
	ПараметрыОперации.Вставить("ПараметрыПодключения",      ПараметрыПодключения);
	
	Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		ИдентификаторФормы,
		"Обработки._ДемоПереносСведенийОПользователяхВДругуюПрограмму.ВыполнитьПереносСведенийОПользователях", 
		ПараметрыОперации, 
		НСтр("ru = 'Перенос сведений о пользователях в другую программу'"));
	
	ПараметрыОбработчикаОжидания.Вставить("АдресХранилища", Результат.АдресХранилища);
	
	Возврат Результат;
КонецФункции

#КонецОбласти
