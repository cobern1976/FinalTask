//начало текста модуля

///////////////////////////////////////////////////
//Служебные функции и процедуры
///////////////////////////////////////////////////

&НаКлиенте
// контекст фреймворка Vanessa-Behavior
Перем Ванесса;
 
&НаКлиенте
// Структура, в которой хранится состояние сценария между выполнением шагов. Очищается перед выполнением каждого сценария.
Перем Контекст Экспорт;
 
&НаКлиенте
// Структура, в которой можно хранить служебные данные между запусками сценариев. Существует, пока открыта форма Vanessa-Behavior.
Перем КонтекстСохраняемый Экспорт;

&НаКлиенте
// Функция экспортирует список шагов, которые реализованы в данной внешней обработке.
Функция ПолучитьСписокТестов(КонтекстФреймворкаBDD) Экспорт
	Ванесса = КонтекстФреймворкаBDD;
	
	ВсеТесты = Новый Массив;

	//описание параметров
	//Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,Снипет,ИмяПроцедуры,ПредставлениеТеста,Транзакция,Параметр);

	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЕслиПокупкаТоПризнакОчистки(Парам01)","ЕслиПокупкаТоПризнакОчистки","Допустим Если Покупка то признак очистки 1");

	Возврат ВсеТесты;
КонецФункции
	
&НаСервере
// Служебная функция.
Функция ПолучитьМакетСервер(ИмяМакета)
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	Возврат ОбъектСервер.ПолучитьМакет(ИмяМакета);
КонецФункции
	
&НаКлиенте
// Служебная функция для подключения библиотеки создания fixtures.
Функция ПолучитьМакетОбработки(ИмяМакета) Экспорт
	Возврат ПолучитьМакетСервер(ИмяМакета);
КонецФункции



///////////////////////////////////////////////////
//Работа со сценариями
///////////////////////////////////////////////////

&НаКлиенте
// Процедура выполняется перед началом каждого сценария
Процедура ПередНачаломСценария() Экспорт
	
КонецПроцедуры

&НаКлиенте
// Процедура выполняется перед окончанием каждого сценария
Процедура ПередОкончаниемСценария() Экспорт
	
КонецПроцедуры



///////////////////////////////////////////////////
//Реализация шагов
///////////////////////////////////////////////////

&НаКлиенте
//Допустим Если Покупка то признак очистки 1
//@ЕслиПокупкаТоПризнакОчистки(Парам01)
/// ПризнакОперации =1 Покупка, 0 - Продажа
Процедура ЕслиПокупкаТоПризнакОчистки(ПризнакОперации) Экспорт
	//Ванесса.ПосмотретьЗначение(Парам01,Истина);
	//ВызватьИсключение "Не реализовано.";
	Если ПризнакОперации=1 Тогда
		УдалитьДокументыПокупки();
	ИначеЕсли ПризнакОперации = 0 Тогда
		УдалитьДокументыПродажи();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УдалитьДокументыПокупки()

	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	                |	Покупка.Ссылка
	                |ИЗ
	                |	Документ.Покупка КАК Покупка";
	выборка = Запрос.Выполнить().Выбрать();
	Пока выборка.Следующий() Цикл
		докОбъект = выборка.Ссылка.ПолучитьОбъект();
		Если докОбъект.Проведен Тогда
			докОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЕсли;
		докОбъект.Удалить();
	КонецЦикла;

КонецПроцедуры // ОтменитьПроведениеДокументовПокупки()

&НаСервере
Процедура УдалитьДокументыПродажи()

	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	                |	Продажа.Ссылка
	                |ИЗ
	                |	Документ.Продажа КАК Продажа";
	выборка = Запрос.Выполнить().Выбрать();
	Пока выборка.Следующий() Цикл
		докОбъект = выборка.Ссылка.ПолучитьОбъект();
		Если докОбъект.Проведен Тогда
			докОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЕсли;
		докОбъект.Удалить();
	КонецЦикла;

КонецПроцедуры // ОтменитьПроведениеДокументовПокупки()

//окончание текста модуля